{"version":3,"file":"Generator.js","sources":["../../src/Extras/Generator/generator-utils.ts","../../src/Extras/Generator/GeneratorTypes.ts","../../src/Extras/Generator/AlignmentCurve.ts","../../src/Extras/Generator/GeometryTypes.ts","../../src/Extras/Generator/Generator.ts"],"sourcesContent":["\n/**\n * Helper: Performs a backwards forEach on an array\n * @param arr The array\n * @param f The function to be applied\n */\nexport function forEachRev<T>(arr: T[], f: (e: T, i?: number) => void): void {\n    for (let i=arr.length-1; i>=0; --i) f(arr[i], i);\n}\n\n/**\n * Helper: Loads a binary file from the given url and reads its bytes.\n * @param src The path to read the file from\n */\nexport async function loadBinaryFile(src: string): Promise<Uint8Array> {\n    return new Promise((resolve, reject) => {\n        const r = new XMLHttpRequest();\n        r.open(\"GET\", src, true);\n        r.withCredentials = true;\n        r.responseType = \"arraybuffer\";\n        r.onload = () => {\n            const arrayBuffer = r.response;\n            if (arrayBuffer) {\n                const byteArray = new Uint8Array(arrayBuffer);\n                resolve(byteArray);\n            } else {\n                reject(\"Error loading file\");\n            }\n        };\n        r.send(null);\n    });\n}","import { flatbuffers } from \"flatbuffers\";\nimport { Trimble } from \"../../TrimBim_generated\";\nimport Fbs = Trimble.Technology.TrimBim.Fbs;\nimport { UUID } from \"../../UUID\";\nimport {Box3, Color, Vector3} from \"three\";\nimport {AlignmentType} from \"../../common\";\n\nexport abstract class GeometryDefinition {\n    index: number = -1;\n    abstract get type(): Fbs.GeometryType;\n    abstract get boundingBox(): Box3;\n    abstract generate(b: flatbuffers.Builder): flatbuffers.Offset;\n}\n\nexport type Identifier = number|string|UUID;\n\n/**\n * Represents both a trb GeometryInstance and Entity (in this implementation, these have\n * a one-to-one relationship to each other).\n */\nexport interface Instance {\n    idIndex: number,    // The idType-specific index of the ID of the entity corresponding to this instance.\n    idType: Fbs.IdentifierType,\n    definitionId: number,\n    materialId: number,\n    globalPlacement: Vector3,\n}\n\nexport interface Material {\n    textureId: number,\n    color: Color,\n    opacity?: number\n}\n\nexport interface Texture {\n    bytes: Uint8Array,\n    type: Fbs.TextureType,\n}\n\nexport interface TextStyle {\n    font: string;\n    size: number;\n    attenuated: boolean;\n    alignment: AlignmentType;\n    verticalAlign: number;\n    horizontalAlign: number;\n}\n","import { flatbuffers } from \"flatbuffers\";\nimport { Trimble } from \"../../TrimBim_generated\";\nimport Fbs = Trimble.Technology.TrimBim.Fbs;\nimport {GeometryDefinition} from \"./GeneratorTypes\";\nimport {Box2, Box3, Vector2, Vector3} from \"three\";\n\nexport interface HorizontalLineSegment {\n    startTag: string;\n    endTag: string;\n    startPoint: Vector2;\n    startDirection: number;\n    segmentLength: number;\n}\n\nexport interface HorizontalCircularArcSegment {\n    startTag: string;\n    endTag: string;\n    startPoint: Vector2;\n    startDirection: number;\n    segmentLength: number;\n    radius: number;\n    isCCW: boolean;\n}\n\nexport interface HorizontalClothoidalArcSegment {\n    startTag: string;\n    endTag: string;\n    startPoint: Vector2;\n    startDirection: number;\n    segmentLength: number;\n    startRadius: number;\n    clothoidConstant: number;\n    isCCW: boolean;\n    isEntry: boolean;\n}\n\nexport interface HorizontalTransitionArcSegment {\n    startTag: string;\n    endTag: string;\n    startPoint: Vector2;\n    startDirection: number;\n    segmentLength: number;\n    startRadius: number;\n    endRadius: number;\n    isStartRadiusCCW: boolean;\n    isEndRadiusCCW: boolean;\n    type: Fbs.HorizontalTransitionCurveType;\n}\n\nexport interface VerticalLineSegment {\n    startTag: string;\n    endTag: string;\n    startDistAlong: number;\n    horizontalLength: number;\n    startHeight: number;\n    startGradient: number;\n}\n\nexport interface VerticalCircularArcSegment {\n    startTag: string;\n    endTag: string;\n    startDistAlong: number;\n    horizontalLength: number;\n    startHeight: number;\n    startGradient: number;\n    radius: number;\n    isConvex: boolean;\n}\n\nexport interface VerticalParabolicArcSegment {\n    startTag: string;\n    endTag: string;\n    startDistAlong: number;\n    horizontalLength: number;\n    startHeight: number;\n    startGradient: number;\n    parabolaConstant: number;\n    isConvex: boolean;\n}\n\nexport interface HorizontalCurve {\n    startAlongDistance: number;\n    segmentTypes: Fbs.HorizontalSegmentType[];\n    lineSegments:HorizontalLineSegment[];\n    circularArcSegments:HorizontalCircularArcSegment[];\n    clothoidalArcSegments:HorizontalClothoidalArcSegment[];\n    transitionArcSegments:HorizontalTransitionArcSegment[];\n\n}\n\nexport interface VerticalCurve {\n    segmentTypes:Fbs.VerticalSegmentType[];\n    lineSegments:VerticalLineSegment[];\n    circularArcSegments:VerticalCircularArcSegment[];\n    parabolicArcSegments:VerticalParabolicArcSegment[];\n\n}\n\nexport class AlignmentCurve extends GeometryDefinition {\n    horizontalCurve: HorizontalCurve;\n    verticalCurve: VerticalCurve;\n    name: string;\n\n    get type(): Fbs.GeometryType {\n        return Fbs.GeometryType.AlignmentCurve;\n    }\n\n    get boundingBox(): Box3 {\n        const bb = this.calculateHorizontalCurveBoundingBox();\n        \n        const verticalRange = this.calculateVerticalHeightRange();\n\n        const min: Vector3 = new Vector3(bb.min.x, bb.min.y, verticalRange[0]);\n        const max: Vector3 = new Vector3(bb.max.x, bb.max.y, verticalRange[1]);\n        return new Box3(min, max);\n    }\n\n    private getHorizontalLineSegmentPointAt(lineSegment: HorizontalLineSegment, distance: number): Vector2 {\n\n        const segmentLength = lineSegment.segmentLength;\n        const startPoint = lineSegment.startPoint.clone();\n        const startDirection = lineSegment.startDirection;\n\n        if (distance < 0) {\n            distance = 0;\n        }\n        if (distance > segmentLength) {\n            distance = segmentLength;\n        }\n\n        const endPoint = new Vector2(distance * Math.cos(startDirection),\n            distance * Math.sin(startDirection));\n\n        startPoint.add(endPoint);\n\n        return startPoint;\n    }\n\n    private getHorizontalCircularArcSegmentPointAt(circularArcSegment: HorizontalCircularArcSegment, distance: number): Vector2 {\n        const startDirection = circularArcSegment.startDirection;\n        const deltaAngle = distance / circularArcSegment.radius;\n        const startAngle = circularArcSegment.startDirection + (circularArcSegment.isCCW ? -Math.PI / 2 : Math.PI / 2);\n        const angle = startAngle + (circularArcSegment.isCCW ? deltaAngle : -deltaAngle);\n        const originDirection = startDirection + (circularArcSegment.isCCW ? Math.PI / 2 : -Math.PI / 2);\n        const dirX = Math.cos(originDirection);\n        const dirY = Math.sin(originDirection);\n        const direction = new Vector2(dirX, dirY).multiplyScalar(circularArcSegment.radius);\n        const centerPoint = circularArcSegment.startPoint.clone().add(direction);\n        const fromCenterPointX = Math.cos(angle);\n        const fromCenterPointY = Math.sin(angle);\n        const fromCenterPoint = new Vector2(fromCenterPointX, fromCenterPointY).multiplyScalar(circularArcSegment.radius);\n        return centerPoint.add(fromCenterPoint);\n    }\n\n    private calculateHorizontalCircularArcSegmentBoundingBox(circularArcSegment: HorizontalCircularArcSegment): Box2 {\n        const deltaAngle = circularArcSegment.segmentLength / circularArcSegment.radius;\n        const startAngle = circularArcSegment.startDirection + (circularArcSegment.isCCW ? -Math.PI / 2 : Math.PI / 2);\n        let minAngle = circularArcSegment.isCCW ? startAngle : startAngle - deltaAngle;\n        let maxAngle = circularArcSegment.isCCW ? startAngle + deltaAngle : startAngle;\n\n        const originDirection = circularArcSegment.isCCW ? circularArcSegment.startDirection + Math.PI / 2 : circularArcSegment.startDirection - Math.PI / 2;\n        const dirX = Math.cos(originDirection) * circularArcSegment.radius;\n        const dirY = Math.sin(originDirection) * circularArcSegment.radius;\n        const direction = new Vector2(dirX, dirY);\n        const centerPoint = circularArcSegment.startPoint.clone().add(direction);\n        const radius = circularArcSegment.radius;\n\n        if (minAngle < 0) {\n            minAngle += 2 * Math.PI;\n            maxAngle += 2 * Math.PI;\n        }\n\n        const min = this.getHorizontalCircularArcSegmentPointAt(circularArcSegment, 0);\n        const max = min.clone();\n\n        // if arc falls entirely within any quadrant its start and end point will define the bounding box.\n        // if it passes through any line dividing that quadrant the point passing through that line will be one of the extremes of the bb\n\n        // check all quadrant divisions to see if arc passes through\n        for (let i = 0; i < 8; i++) {\n            const angle = (Math.PI / 2) * i;\n            if (minAngle < angle && maxAngle > angle) {\n                const dirCX = Math.cos(angle) * radius;\n                const dirCY = Math.sin(angle) * radius;\n                const dirC = new Vector2(dirCX, dirCY);\n                const point = centerPoint.clone().add(dirC);\n\n                min.min(point);\n                max.max(point);\n\n            }\n        }\n        const endPoint = this.getHorizontalCircularArcSegmentPointAt(circularArcSegment, circularArcSegment.segmentLength);\n        min.min(endPoint);\n        max.max(endPoint);\n\n        return new Box2(min, max);\n    }\n\n    private calculateHorizontalLineSegmentBoundingBox(lineSegment: HorizontalLineSegment): Box2 {\n\n        const length = lineSegment.segmentLength;\n\n        const start = this.getHorizontalLineSegmentPointAt(lineSegment, 0);\n        const end = this.getHorizontalLineSegmentPointAt(lineSegment, length);\n\n        const min = start.clone();\n        const max = start.clone();\n\n        min.min(end);\n        max.max(end);\n\n        return new Box2(min, max);\n    }\n\n    // rough approximation.\n    private calculateHorizontalTransientCurveSegmentBoundingBox(horizontalTransitionArcSegment: HorizontalTransitionArcSegment): Box2 {\n        const point0 = horizontalTransitionArcSegment.startPoint;\n        const startDirection = horizontalTransitionArcSegment.startDirection;\n        const segmentLength = horizontalTransitionArcSegment.segmentLength;\n        const isStartRadiusCCW = horizontalTransitionArcSegment.isStartRadiusCCW;\n\n        const dir1X = Math.cos(startDirection) * segmentLength;\n        const dir1Y = Math.sin(startDirection) * segmentLength;\n        const direction1 = new Vector2(dir1X, dir1Y);\n        const point1 = point0.clone().add(direction1);\n\n        const boundDirection = (isStartRadiusCCW ? startDirection + Math.PI / 4 : -Math.PI / 4);\n\n        const dir2X = Math.cos(boundDirection) * segmentLength;\n        const dir2Y = Math.sin(boundDirection) * segmentLength;\n        const direction2 = new Vector2(dir2X, dir2Y);\n        const point2 = point0.clone().add(direction2);\n\n        const min = point0.clone();\n        const max = point0.clone();\n\n        min.min(point1);\n        min.min(point2);\n        max.max(point1);\n        max.max(point2);\n\n        return new Box2(min, max);\n    }\n\n\n    private mergeBox2(box1: Box2, box2: Box2): Box2 {\n        box1.min.min(box2.min);\n        box1.max.max(box2.max);\n        return box1;\n    }\n\n    private calculateHorizontalCurveBoundingBox(): Box2 {\n\n        let result = new Box2();\n\n        let lsIndex = 0;\n        let casIndex = 0;\n        let tasIndex = 0;\n\n        for (const segment of this.horizontalCurve.segmentTypes) {\n            switch (segment) {\n                case  0:\n                    break;\n                case 1: // LineSegment\n                    result = this.mergeBox2(this.calculateHorizontalLineSegmentBoundingBox(this.horizontalCurve.lineSegments[lsIndex]), result);\n                    lsIndex++;\n                    break;\n                case 2: // CircularArcSegment\n                    result = this.mergeBox2(this.calculateHorizontalCircularArcSegmentBoundingBox(this.horizontalCurve.circularArcSegments[casIndex]), result);\n                    casIndex++;\n                    break;\n                case 3: // ClothoidalArcSegment\n                    break;\n                case 4: // TransientCurveSegment\n                    result = this.mergeBox2(this.calculateHorizontalTransientCurveSegmentBoundingBox(this.horizontalCurve.transitionArcSegments[tasIndex]), result);\n                    tasIndex++;\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    private calculateVerticalLineSegmentHeightRange(verticalLineSegment: VerticalLineSegment): number[] {\n        const horizontalDistance = verticalLineSegment.horizontalLength;\n        const startHeight = verticalLineSegment.startHeight;\n        const endHeight = startHeight + horizontalDistance * verticalLineSegment.startGradient;\n\n        const min = Math.min(startHeight, endHeight);\n        const max = Math.max(startHeight, endHeight);\n\n        return [min, max];\n    }\n\n    private calculateVerticalCircularArcSegmentHeightRange(verticalCircularArcSegment: VerticalCircularArcSegment): number[] {\n        const SH = verticalCircularArcSegment.startHeight;\n        const SDA = verticalCircularArcSegment.startDistAlong;\n        const HL = verticalCircularArcSegment.horizontalLength;\n        const SG = verticalCircularArcSegment.startGradient;\n        let R = verticalCircularArcSegment.radius;\n\n        if(!verticalCircularArcSegment.isConvex) R = -R;\n\n        const Cx = SDA + (SG * R) / Math.sqrt(SG * SG + 1);\n        const Cy = SH - R / Math.sqrt(SG * SG + 1);\n\n        const CTB = Cy + R; // top or bottom of circle\n\n        const EH = Cy +\n                        ( verticalCircularArcSegment.isConvex ?\n                               Math.sqrt(R * R - Math.pow((HL - (Cx - SDA)), 2)) :\n                               -1 * Math.sqrt(R * R - Math.pow((HL - (Cx - SDA)), 2))\n                        );\n        return [Math.min(EH,SH,CTB), Math.max(EH,SH,CTB)];\n    }\n\n    private calculateVerticalHeightRange(): number[] {\n\n        let result: number[] = [];\n        let min;\n        let max;\n\n        let lsIndex = 0;\n        let casIndex = 0;\n\n        for (const segment of this.verticalCurve.segmentTypes) {\n            switch (segment) {\n                case  0:\n                    break;\n                case 1: // LineSegment\n                    result = this.calculateVerticalLineSegmentHeightRange(this.verticalCurve.lineSegments[lsIndex]);\n                    typeof min !== 'undefined' ? min = Math.min(result[0], min) : min = result[0];\n                    typeof max !== 'undefined' ? max = Math.max(result[1], max) : max = result[1];\n                    lsIndex++;\n                    break;\n                case 2: // CircularArcSegment\n                    result = this.calculateVerticalCircularArcSegmentHeightRange(this.verticalCurve.circularArcSegments[casIndex]);\n                    typeof min !== 'undefined' ? min = Math.min(result[0], min) : min = result[0];\n                    typeof max !== 'undefined' ? max = Math.max(result[1], max) : max = result[1];\n                    casIndex++;\n                    break;\n                case 3: // ParabolicArcSegment\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return [min, max];\n    }\n\n    generate(b: flatbuffers.Builder): flatbuffers.Offset {\n        const horizontalCurveOffset = this.generateHorizontalCurve(b);\n        const verticalCurveOffset = this.generateVerticalCurve(b);\n        Fbs.AlignmentCurve.startAlignmentCurve(b);\n        Fbs.AlignmentCurve.addHorizontalCurve(b, horizontalCurveOffset);\n        Fbs.AlignmentCurve.addVerticalCurve(b, verticalCurveOffset);\n        return Fbs.AlignmentCurve.endAlignmentCurve(b);\n    }\n\n    private generateHorizontalCurve(b: flatbuffers.Builder): flatbuffers.Offset {\n        const segmentTypesOffset = Fbs.HorizontalCurve.createSegmentTypesVector(b,\n            this.horizontalCurve.segmentTypes\n        );\n\n        const lineSegmentsOffset = Fbs.HorizontalCurve.createLineSegmentsVector(b,\n            this.horizontalCurve.lineSegments.map(x => {\n                const startTagOffset = b.createString(x.startTag);\n                const endTagOffset = b.createString(x.endTag);\n                Fbs.HorizontalLineSegment.startHorizontalLineSegment(b);\n                Fbs.HorizontalLineSegment.addStartTag(b, startTagOffset);\n                Fbs.HorizontalLineSegment.addEndTag(b, endTagOffset);\n                Fbs.HorizontalLineSegment.addStartPoint(b,\n                    Fbs.Vec2d.createVec2d(b, x.startPoint.x, x.startPoint.y)\n                );\n                Fbs.HorizontalLineSegment.addStartDirection(b, x.startDirection);\n                Fbs.HorizontalLineSegment.addSegmentLength(b, x.segmentLength);\n                return Fbs.HorizontalLineSegment.endHorizontalLineSegment(b);\n            })\n        );\n\n        const circularArcSegmentsOffset = Fbs.HorizontalCurve.createCircularArcSegmentsVector(b,\n            this.horizontalCurve.circularArcSegments.map(x => {\n                const startTagOffset = b.createString(x.startTag);\n                const endTagOffset = b.createString(x.endTag);\n                Fbs.HorizontalCircularArcSegment.startHorizontalCircularArcSegment(b);\n                Fbs.HorizontalCircularArcSegment.addStartTag(b, startTagOffset);\n                Fbs.HorizontalCircularArcSegment.addEndTag(b, endTagOffset);\n                Fbs.HorizontalCircularArcSegment.addStartPoint(b,\n                    Fbs.Vec2d.createVec2d(b, x.startPoint.x, x.startPoint.y)\n                );\n                Fbs.HorizontalCircularArcSegment.addStartDirection(b, x.startDirection);\n                Fbs.HorizontalCircularArcSegment.addSegmentLength(b, x.segmentLength);\n                Fbs.HorizontalCircularArcSegment.addRadius(b, x.radius);\n                Fbs.HorizontalCircularArcSegment.addIsCCW(b, x.isCCW);\n                return Fbs.HorizontalCircularArcSegment.endHorizontalCircularArcSegment(b);\n            })\n        );\n\n        const clothoidalArcSegmentsOffset = Fbs.HorizontalCurve.createClothoidalArcSegmentsVector(b,\n            this.horizontalCurve.clothoidalArcSegments.map(x => {\n                const startTagOffset = b.createString(x.startTag);\n                const endTagOffset = b.createString(x.endTag);\n                Fbs.HorizontalClothoidalArcSegment.startHorizontalClothoidalArcSegment(b);\n                Fbs.HorizontalClothoidalArcSegment.addStartTag(b, startTagOffset);\n                Fbs.HorizontalClothoidalArcSegment.addEndTag(b, endTagOffset);\n                Fbs.HorizontalClothoidalArcSegment.addStartPoint(b,\n                    Fbs.Vec2d.createVec2d(b, x.startPoint.x, x.startPoint.y)\n                );\n                Fbs.HorizontalClothoidalArcSegment.addStartDirection(b, x.startDirection);\n                Fbs.HorizontalClothoidalArcSegment.addSegmentLength(b, x.segmentLength);\n                Fbs.HorizontalClothoidalArcSegment.addStartRadius(b, x.startRadius);\n                Fbs.HorizontalClothoidalArcSegment.addClothoidConstant(b, x.clothoidConstant);\n                Fbs.HorizontalClothoidalArcSegment.addIsCCW(b, x.isCCW);\n                Fbs.HorizontalClothoidalArcSegment.addIsEntry(b, x.isEntry);\n                return Fbs.HorizontalClothoidalArcSegment.endHorizontalClothoidalArcSegment(b);\n            })\n        );\n\n        const transitionArcSegments = Fbs.HorizontalCurve.createTransitionArcSegmentsVector(b,\n            this.horizontalCurve.transitionArcSegments.map(x => {\n                const startTagOffset = b.createString(x.startTag);\n                const endTagOffset = b.createString(x.endTag);\n                Fbs.HorizontalTransitionArcSegment.startHorizontalTransitionArcSegment(b);\n                Fbs.HorizontalTransitionArcSegment.addStartTag(b, startTagOffset);\n                Fbs.HorizontalTransitionArcSegment.addEndTag(b, endTagOffset);\n                Fbs.HorizontalTransitionArcSegment.addStartPoint(b,\n                    Fbs.Vec2d.createVec2d(b, x.startPoint.x, x.startPoint.y)\n                );\n                Fbs.HorizontalTransitionArcSegment.addStartDirection(b, x.startDirection);\n                Fbs.HorizontalTransitionArcSegment.addSegmentLength(b, x.segmentLength);\n                Fbs.HorizontalTransitionArcSegment.addStartRadius(b, x.startRadius);\n                Fbs.HorizontalTransitionArcSegment.addEndRadius(b, x.endRadius);\n                Fbs.HorizontalTransitionArcSegment.addIsStartRadiusCCW(b, x.isStartRadiusCCW);\n                Fbs.HorizontalTransitionArcSegment.addIsEndRadiusCCW(b, x.isEndRadiusCCW);\n                Fbs.HorizontalTransitionArcSegment.addType(b, x.type);\n                return Fbs.HorizontalTransitionArcSegment.endHorizontalTransitionArcSegment(b);\n            })\n        );\n\n        Fbs.HorizontalCurve.startHorizontalCurve(b);\n        Fbs.HorizontalCurve.addStartAlongDistance(b, this.horizontalCurve.startAlongDistance);\n        Fbs.HorizontalCurve.addSegmentTypes(b, segmentTypesOffset);\n        Fbs.HorizontalCurve.addLineSegments(b, lineSegmentsOffset);\n        Fbs.HorizontalCurve.addCircularArcSegments(b, circularArcSegmentsOffset);\n        Fbs.HorizontalCurve.addClothoidalArcSegments(b, clothoidalArcSegmentsOffset);\n        Fbs.HorizontalCurve.addTransitionArcSegments(b, transitionArcSegments);\n        return Fbs.HorizontalCurve.endHorizontalCurve(b);\n    }\n\n    private generateVerticalCurve(b: flatbuffers.Builder): flatbuffers.Offset {\n        const segmentTypesOffset = Fbs.VerticalCurve.createSegmentTypesVector(b,\n            this.verticalCurve.segmentTypes\n        );\n\n        const lineSegmentsOffset = Fbs.VerticalCurve.createLineSegmentsVector(b,\n            this.verticalCurve.lineSegments.map(x => {\n                const startTagOffset = b.createString(x.startTag);\n                const endTagOffset = b.createString(x.endTag);\n                Fbs.VerticalLineSegment.startVerticalLineSegment(b);\n                Fbs.VerticalLineSegment.addStartTag(b, startTagOffset);\n                Fbs.VerticalLineSegment.addEndTag(b, endTagOffset);\n                Fbs.VerticalLineSegment.addStartDistAlong(b, x.startDistAlong);\n                Fbs.VerticalLineSegment.addHorizontalLength(b, x.horizontalLength);\n                Fbs.VerticalLineSegment.addStartHeight(b, x.startHeight);\n                Fbs.VerticalLineSegment.addStartGradient(b, x.startGradient);\n                return Fbs.VerticalLineSegment.endVerticalLineSegment(b);\n            })\n        );\n\n        const circularArcSegmentsOffset = Fbs.VerticalCurve.createCircularArcSegmentsVector(b,\n            this.verticalCurve.circularArcSegments.map(x => {\n                const startTagOffset = b.createString(x.startTag);\n                const endTagOffset = b.createString(x.endTag);\n                Fbs.VerticalCircularArcSegment.startVerticalCircularArcSegment(b);\n                Fbs.VerticalCircularArcSegment.addStartTag(b, startTagOffset);\n                Fbs.VerticalCircularArcSegment.addEndTag(b, endTagOffset);\n                Fbs.VerticalCircularArcSegment.addStartDistAlong(b, x.startDistAlong);\n                Fbs.VerticalCircularArcSegment.addHorizontalLength(b, x.horizontalLength);\n                Fbs.VerticalCircularArcSegment.addStartHeight(b, x.startHeight);\n                Fbs.VerticalCircularArcSegment.addStartGradient(b, x.startGradient);\n                Fbs.VerticalCircularArcSegment.addRadius(b, x.radius);\n                Fbs.VerticalCircularArcSegment.addIsConvex(b, x.isConvex);\n                return Fbs.VerticalCircularArcSegment.endVerticalCircularArcSegment(b);\n            })\n        );\n\n        const parabolicArcSegmentsOffset = Fbs.VerticalCurve.createParabolicArcSegmentsVector(b,\n            this.verticalCurve.parabolicArcSegments.map(x => {\n                const startTagOffset = b.createString(x.startTag);\n                const endTagOffset = b.createString(x.endTag);\n                Fbs.VerticalParabolicArcSegment.startVerticalParabolicArcSegment(b);\n                Fbs.VerticalParabolicArcSegment.addStartTag(b, startTagOffset);\n                Fbs.VerticalParabolicArcSegment.addEndTag(b, endTagOffset);\n                Fbs.VerticalParabolicArcSegment.addStartDistAlong(b, x.startDistAlong);\n                Fbs.VerticalParabolicArcSegment.addHorizontalLength(b, x.horizontalLength);\n                Fbs.VerticalParabolicArcSegment.addStartHeight(b, x.startHeight);\n                Fbs.VerticalParabolicArcSegment.addStartGradient(b, x.startGradient);\n                Fbs.VerticalParabolicArcSegment.addParabolaConstant(b, x.parabolaConstant);\n                Fbs.VerticalParabolicArcSegment.addIsConvex(b, x.isConvex);\n                return Fbs.VerticalParabolicArcSegment.endVerticalParabolicArcSegment(b);\n            })\n        );\n\n        Fbs.VerticalCurve.startVerticalCurve(b);\n        Fbs.VerticalCurve.addSegmentTypes(b, segmentTypesOffset);\n        Fbs.VerticalCurve.addLineSegments(b, lineSegmentsOffset);\n        Fbs.VerticalCurve.addCircularArcSegments(b, circularArcSegmentsOffset);\n        Fbs.VerticalCurve.addParabolicArcSegments(b, parabolicArcSegmentsOffset);\n        return Fbs.VerticalCurve.endVerticalCurve(b);\n    }\n}\n","import { flatbuffers } from \"flatbuffers\";\nimport { Trimble } from \"../../TrimBim_generated\";\nimport Fbs = Trimble.Technology.TrimBim.Fbs;\nimport { forEachRev } from \"./generator-utils\";\nimport { GeometryDefinition } from \"./GeneratorTypes\";\nimport {Box3, Vector2, Vector3} from \"three\";\n\nconst ZeroBox = new Box3(new Vector3(0,0,0), new Vector3(0,0,0));\n\nexport * from \"./AlignmentCurve\";\n\nexport interface IndexedVertex {\n    positionIndex: number;\n    normalIndex: number;\n}\n\nexport interface GridLineSegment {\n    axisTag: string;\n    start: Vector3;\n    end: Vector3;\n}\n\nexport class TexturedBillboard extends GeometryDefinition {\n    leftUpXY: Vector2;\n    leftUpUV: Vector2;\n    rightDownXY: Vector2;\n    rightDownUV: Vector2;\n    IsInWorldUnits: boolean;\n\n    get type(): Fbs.GeometryType {\n        return Fbs.GeometryType.TexturedBillboard;\n    }\n\n    get boundingBox(): Box3 {\n        return ZeroBox;\n    }\n\n    generate(b: flatbuffers.Builder): flatbuffers.Offset {\n        return Fbs.TexturedBillboard.createTexturedBillboard(\n            b,\n            this.leftUpXY.x, this.leftUpXY.y, this.leftUpUV.x, this.leftUpUV.y,\n            this.rightDownXY.x, this.rightDownXY.y, this.rightDownUV.x, this.rightDownUV.y,\n            this.IsInWorldUnits\n        );\n    }\n}\n\nexport class BillboardText extends GeometryDefinition {\n    textStyleId: number;\n    text: string;\n\n    get type(): Fbs.GeometryType {\n        return Fbs.GeometryType.BillboardText;\n    }\n    get boundingBox(): Box3 {\n        return ZeroBox;\n    }\n\n    generate(b: flatbuffers.Builder): flatbuffers.Offset {\n        const stringOffset = b.createString(this.text);\n        Fbs.BillboardText.startBillboardText(b);\n        Fbs.BillboardText.addTextStyleId(b, this.textStyleId);\n        Fbs.BillboardText.addText(b, stringOffset);\n        return Fbs.BillboardText.endBillboardText(b);\n    }\n}\n\nexport class TriangleMesh extends GeometryDefinition {\n    positions: Vector3[];\n    normals: Vector3[];\n    vertices: IndexedVertex[];\n    indices: number[];\n\n    get type(): Fbs.GeometryType {\n        return Fbs.GeometryType.TriangleMesh;\n    }\n\n    get boundingBox(): Box3 {\n        const box = new Box3(this.positions[0].clone(), this.positions[0].clone());\n        for (const p of this.positions)\n            box.expandByPoint(p);\n        return box;\n    }\n\n    generate(b: flatbuffers.Builder): flatbuffers.Offset {\n        Fbs.TriangleMesh.startPositionsVector(b, this.positions.length);\n        forEachRev(this.positions, p => {\n            Fbs.Vec3f.createVec3f(b, p.x, p.y, p.z);\n        });\n        const positionsOffset = b.endVector();\n\n        Fbs.TriangleMesh.startNormalsVector(b, this.normals.length);\n        forEachRev(this.normals, n => {\n            Fbs.Vec3f.createVec3f(b, n.x, n.y, n.z);\n        });\n        const normalsOffset = b.endVector();\n\n        Fbs.TriangleMesh.startVerticesVector(b, this.vertices.length);\n        forEachRev(this.vertices, v => {\n            Fbs.IndexedVertex.createIndexedVertex(b, v.positionIndex, v.normalIndex);\n        });\n        const verticesOffset = b.endVector();\n\n        const indicesOffset = Fbs.TriangleMesh.createIndicesVector(b, this.indices);\n\n        Fbs.TriangleMesh.startTriangleMesh(b);\n        Fbs.TriangleMesh.addPositions(b, positionsOffset);\n        Fbs.TriangleMesh.addNormals(b, normalsOffset);\n        Fbs.TriangleMesh.addVertices(b, verticesOffset);\n        Fbs.TriangleMesh.addIndices(b, indicesOffset);\n        return Fbs.TriangleMesh.endTriangleMesh(b);\n    }\n}\n\nexport class GridLineContainer extends GeometryDefinition {\n    gridLineSegments: GridLineSegment[];\n\n    get type(): Fbs.GeometryType {\n        return Fbs.GeometryType.GridLineContainer;\n    }\n\n    get boundingBox(): Box3 {\n        if (this.gridLineSegments.length === 0) return ZeroBox;\n        const min = new Vector3(Infinity, Infinity, Infinity);\n        const max = new Vector3(-Infinity, -Infinity, -Infinity);\n        for (const l of this.gridLineSegments) {\n            min.x = Math.min(min.x, l.start.x, l.end.x);\n            min.y = Math.min(min.y, l.start.y, l.end.y);\n            min.z = Math.min(min.z, l.start.z, l.end.z);\n            max.x = Math.max(max.x, l.start.x, l.end.x);\n            max.y = Math.max(max.y, l.start.y, l.end.y);\n            max.z = Math.max(max.z, l.start.z, l.end.z);\n        }\n        return new Box3(min, max);\n    }\n\n    generate(b: flatbuffers.Builder): flatbuffers.Offset {\n        const gridLineSegments = this.gridLineSegments.map(s => {\n            const stringOffset = b.createString(s.axisTag);\n            Fbs.GridLineSegment.startGridLineSegment(b);\n            Fbs.GridLineSegment.addAxisTag(b, stringOffset);\n            Fbs.GridLineSegment.addLineSegment(b, Fbs.Line3d.createLine3d(\n                b,\n                s.start.x,s.start.y,s.start.z,\n                s.end.x,s.end.y,s.end.z\n            ));\n            return Fbs.GridLineSegment.endGridLineSegment(b);\n        });\n        const gridLineSegmentsOffset = Fbs.GridLineContainer.createGridLineSegmentsVector(b, gridLineSegments);\n        const gridArcsOffset = Fbs.GridLineContainer.createGridArcsVector(b, []);\n\n        Fbs.GridLineContainer.startGridLineContainer(b);\n        Fbs.GridLineContainer.addGridLineSegments(b, gridLineSegmentsOffset);\n        Fbs.GridLineContainer.addGridArcs(b, gridArcsOffset);\n\n        return Fbs.GridLineContainer.endGridLineContainer(b);\n    }\n}\n","import { flatbuffers } from \"flatbuffers\";\nimport { Trimble } from \"../../TrimBim_generated\";\nimport Fbs = Trimble.Technology.TrimBim.Fbs;\nimport {GeometryDefinition, Identifier, Instance, Material, TextStyle, Texture,} from \"./GeneratorTypes\";\nimport {\n    IndexedVertex,\n    GridLineSegment,\n    TexturedBillboard,\n    BillboardText,\n    TriangleMesh,\n    GridLineContainer,\n    AlignmentCurve,\n    HorizontalCurve,\n    VerticalCurve,\n    HorizontalLineSegment,\n    VerticalLineSegment,\n    HorizontalCircularArcSegment,\n    HorizontalClothoidalArcSegment,\n    HorizontalTransitionArcSegment,\n    VerticalCircularArcSegment,\n    VerticalParabolicArcSegment\n} from \"./GeometryTypes\";\nimport { forEachRev, loadBinaryFile } from \"./generator-utils\";\nimport { UUID } from \"../../UUID\";\nimport {Color, Vector2, Vector3} from \"three\";\n\nexport {\n    loadBinaryFile,\n    Material,\n    Texture,\n    IndexedVertex,\n    GridLineSegment,\n    HorizontalCurve,\n    VerticalCurve,\n    HorizontalLineSegment,\n    VerticalLineSegment,\n    HorizontalCircularArcSegment,\n    HorizontalClothoidalArcSegment,\n    HorizontalTransitionArcSegment,\n    VerticalCircularArcSegment,\n    VerticalParabolicArcSegment\n};\n\nexport class Generator {\n    private b = new flatbuffers.Builder(1024);\n    private geometryDefinitions: GeometryDefinition[] = [];\n    private geometryDefinitionsMap = new Map<Fbs.GeometryType, number[]>();\n    private instances: Instance[] = [];\n    private instancesMap = new Map<Fbs.IdentifierType, number[]>();\n    private materials: Material[] = [];\n    private textures: Texture[] = [];\n    private textStyles: TextStyle[] = [];\n    private stringIdentifiers: string[] = [];\n    private guidIdentifiers: UUID[] = [];\n\n    constructor() {\n        Object.values(Fbs.GeometryType).forEach(v => {\n            const i = v as Fbs.GeometryType;\n            if (!isNaN(i)) this.geometryDefinitionsMap.set(i, []);\n        });\n        Object.values(Fbs.IdentifierType).forEach(v => {\n            const i = v as Fbs.IdentifierType;\n            if (!isNaN(i)) this.instancesMap.set(i, []);\n        });\n    }\n\n    public get definitionCount(): number {\n        return this.geometryDefinitions.length;\n    }\n\n    public addMaterial(material: Material): number {\n        this.materials.push(Object.assign({textureId: -1}, material));\n        return this.materials.length - 1;\n    }\n\n    public addTexture(texture: Texture): number {\n        this.textures.push(texture);\n        return this.textures.length - 1;\n    }\n\n    public addTextStyle(textStyle: TextStyle): number {\n        this.textStyles.push(textStyle);\n        return this.textStyles.length - 1;\n    }\n\n    public addInstance(definitionId: number, materialId: number, position: Vector3, givenId?: string|UUID): Identifier {\n        if (definitionId >= this.geometryDefinitions.length)\n            throw new Error(`Definition ${ definitionId } does not exist.`);\n        let idType = Fbs.IdentifierType.None;\n        if (givenId && typeof givenId === \"string\") {\n            idType = Fbs.IdentifierType.String;\n            if (this.stringIdentifiers.indexOf(givenId) >= 0)\n                throw new Error(`String ID '${ givenId }' has already been defined.`);\n            this.stringIdentifiers.push(givenId);\n        }\n        if (givenId && (givenId as UUID).type === \"UUID\") {\n            idType = Fbs.IdentifierType.Guid;\n            if (this.guidIdentifiers.find(guid => guid.equals(givenId as UUID)))\n                throw new Error(`GUID '${ givenId.toString() }' has already been defined.`);\n            this.guidIdentifiers.push(givenId as UUID);\n        }\n\n        this.instances.push({\n            idIndex: this.instancesMap.get(idType).length,\n            idType: idType,\n            definitionId: definitionId,\n            materialId: materialId,\n            globalPlacement: position,\n        } as Instance);\n        this.instancesMap.get(idType).push(this.instances.length - 1);\n\n        if (idType === Fbs.IdentifierType.String || idType === Fbs.IdentifierType.Guid) return givenId;\n        else return this.instancesMap.get(idType).length - 1;\n    }\n\n    /**\n     * Adds a geometry definition to the generator.\n     * NB: Any methods that add geometry definitions need to do so using this method.\n     * @param def The GeometryDefinition to be added.\n     */\n    private addDefinition(def: GeometryDefinition): number {\n        const typeSpecificIndex = this.geometryDefinitionsMap.get(def.type).length;\n        const globalIndex = this.geometryDefinitions.length;\n        def.index = typeSpecificIndex;\n        this.geometryDefinitions.push(def);\n        this.geometryDefinitionsMap.get(def.type).push(globalIndex);\n        return globalIndex;\n    }\n\n    public addTriangleMeshDefinition(positions: Vector3[], normals: Vector3[], vertices: IndexedVertex[], indices: number[]): number {\n        const t = new TriangleMesh();\n        t.positions = positions;\n        t.normals = normals;\n        t.vertices = vertices;\n        t.indices = indices;\n        return this.addDefinition(t);\n    }\n\n    public addTriangleDefinition(v1: Vector3, v2: Vector3, v3: Vector3): number {\n        const t = new TriangleMesh();\n\n        t.positions = [v1, v2, v3];\n\n        const normal = v2.clone().sub(v1).cross(v3.clone().sub(v1)).normalize();\n        t.normals = [new Vector3(normal.x, normal.y, normal.z)];\n\n        t.vertices = [\n            {positionIndex: 0, normalIndex: 0},\n            {positionIndex: 1, normalIndex: 0},\n            {positionIndex: 2, normalIndex: 0},\n        ];\n\n        t.indices = [0,1,2];\n\n        return this.addDefinition(t);\n    }\n\n    public addBillboardDefinition(width: number = 64, height: number = 64, worldUnits: boolean = false): number {\n        const p = new TexturedBillboard();\n        p.leftUpXY = new Vector2(-width/2, -height/2 );\n        p.leftUpUV = new Vector2(0, 1 );\n        p.rightDownXY = new Vector2(width/2, height/2 );\n        p.rightDownUV = new Vector2(1, 0);\n        p.IsInWorldUnits = worldUnits;\n        return this.addDefinition(p);\n    }\n\n    public addBillboardTextDefinition(text: string, textStyleId: number): number {\n        const t = new BillboardText();\n        t.text = text;\n        t.textStyleId = textStyleId;\n        return this.addDefinition(t);\n    }\n\n    public addGridLineContainerDefinition(lineSegments: GridLineSegment[]): number {\n        const g = new GridLineContainer();\n        g.gridLineSegments = lineSegments;\n        return this.addDefinition(g);\n    }\n\n    public addAlignmentCurveDefinition(horizontalCurve: HorizontalCurve, verticalCurve: VerticalCurve, name: string): number {\n        const a = new AlignmentCurve();\n        a.horizontalCurve = horizontalCurve;\n        a.verticalCurve = verticalCurve;\n        a.name = name;\n        return this.addDefinition(a);\n    }\n\n    public generate(): ArrayBuffer {\n\n        if (this.instances.length === 0) throw new Error(\"At least one valid instance needs to be defined.\");\n\n        const b = this.b;\n\n        let modelPropertiesOffset;\n        {   // Model Properties:\n\n            const mp_children = {\n                angleMeasures:              Fbs.ModelProperties.createAngleMeasuresVector(b, []),\n                areaMeasures:               Fbs.ModelProperties.createAreaMeasuresVector(b, []),\n                dateTimeValues:             Fbs.ModelProperties.createDateTimeValuesVector(b, []),\n                definitions:                Fbs.ModelProperties.createDefinitionsVector(b, []),\n                descriptions:               Fbs.ModelProperties.createDescriptionsVector(b, []),\n                doubleValues:               Fbs.ModelProperties.createDoubleValuesVector(b, []),\n                histories:                  null as number,\n                lengthMeasures:             Fbs.ModelProperties.createLengthMeasuresVector(b, []),\n                massMeasures:               Fbs.ModelProperties.createMassMeasuresVector(b, []),\n                names:                      Fbs.ModelProperties.createNamesVector(b, []),\n                objectTypes:                Fbs.ModelProperties.createObjectTypesVector(b, []),\n                owners:                     Fbs.ModelProperties.createOwnersVector(b, []),\n                productBindings:            null as number,\n                products:                   null as number,\n                propertyNames:              Fbs.ModelProperties.createPropertyNamesVector(b, []),\n                propertySetBindings:        Fbs.ModelProperties.createPropertySetBindingsVector(b, []),\n                propertySetNames:           Fbs.ModelProperties.createPropertySetNamesVector(b, []),\n                stringValues:               Fbs.ModelProperties.createStringValuesVector(b, []),\n                volumeMeasures:             Fbs.ModelProperties.createVolumeMeasuresVector(b, []),\n            };\n            Fbs.ModelProperties.startHistoriesVector(b, 0); mp_children.histories = b.endVector();\n            Fbs.ModelProperties.startProductBindingsVector(b, 0); mp_children.productBindings = b.endVector();\n            Fbs.ModelProperties.startProductsVector(b, 0); mp_children.products = b.endVector();\n\n            Fbs.ModelProperties.startModelProperties(b);\n            Fbs.ModelProperties.addAngleMeasures(b,                 mp_children.angleMeasures);\n            Fbs.ModelProperties.addAreaMeasures(b,                  mp_children.areaMeasures);\n            Fbs.ModelProperties.addDateTimeValues(b,                mp_children.dateTimeValues);\n            Fbs.ModelProperties.addDefinitions(b,                   mp_children.definitions);\n            Fbs.ModelProperties.addDescriptions(b,                  mp_children.descriptions);\n            Fbs.ModelProperties.addDoubleValues(b,                  mp_children.doubleValues);\n            Fbs.ModelProperties.addHistories(b,                     mp_children.histories);\n            Fbs.ModelProperties.addLengthMeasures(b,                mp_children.lengthMeasures);\n            Fbs.ModelProperties.addMassMeasures(b,                  mp_children.massMeasures);\n            Fbs.ModelProperties.addNames(b,                         mp_children.names);\n            Fbs.ModelProperties.addObjectTypes(b,                   mp_children.objectTypes);\n            Fbs.ModelProperties.addOwners(b,                        mp_children.owners);\n            Fbs.ModelProperties.addProductBindings(b,               mp_children.productBindings);\n            Fbs.ModelProperties.addProducts(b,                      mp_children.products);\n            Fbs.ModelProperties.addPropertyNames(b,                 mp_children.propertyNames);\n            Fbs.ModelProperties.addPropertySetBindings(b,           mp_children.propertySetBindings);\n            Fbs.ModelProperties.addPropertySetNames(b,              mp_children.propertySetNames);\n            Fbs.ModelProperties.addStringValues(b,                  mp_children.stringValues);\n            Fbs.ModelProperties.addVolumeMeasures(b,                mp_children.volumeMeasures);\n\n            modelPropertiesOffset = Fbs.ModelProperties.endModelProperties(b);\n        }\n\n        let modelEntitiesOffset;\n        {   // Model Entities:\n\n            const me_children = {\n                entities:                       null as number,\n                hierarchies:                    null as number,\n                guidIdentifiers:                null as number,\n                stringIdentifiers:              Fbs.ModelEntities.createStringIdentifiersVector(b, this.stringIdentifiers.map(id => b.createString(id))),\n                spatialHashIdentifiers:         null as number,\n                dwgHandleIdentifiers:           Fbs.ModelEntities.createDwgHandleIdentifiersVector(b, []),\n                entityClasses:                  Fbs.ModelEntities.createEntityClassesVector(b, [b.createString(\"Class\")]),\n            };\n            Fbs.ModelEntities.startHierarchiesVector(b, 0);             me_children.hierarchies = b.endVector();\n            Fbs.ModelEntities.startSpatialHashIdentifiersVector(b, 0);  me_children.spatialHashIdentifiers = b.endVector();\n\n            // Entities:\n            Fbs.ModelEntities.startEntitiesVector(b, this.instances.length);\n            forEachRev(this.instances, (e, i) => {\n                Fbs.Entity.createEntity(\n                    b, e.idType, e.idIndex, 0,\n                    e.globalPlacement.x, e.globalPlacement.y, e.globalPlacement.z,\n                    1, 0, 0,\n                    0, 1, 0\n                );\n            });\n            me_children.entities = b.endVector();\n\n            // GUID identifiers:\n            Fbs.ModelEntities.startGuidIdentifiersVector(b, this.guidIdentifiers.length);\n            this.guidIdentifiers.forEach(guid => this.generateGuid(guid));\n            me_children.guidIdentifiers = b.endVector();\n\n            Fbs.ModelEntities.startModelEntities(b);\n            Fbs.ModelEntities.addEntities(b,                    me_children.entities);\n            Fbs.ModelEntities.addHierarchies(b,                 me_children.hierarchies);\n            Fbs.ModelEntities.addGuidIdentifiers(b,             me_children.guidIdentifiers);\n            Fbs.ModelEntities.addStringIdentifiers(b,           me_children.stringIdentifiers);\n            Fbs.ModelEntities.addSpatialHashIdentifiers(b,      me_children.spatialHashIdentifiers);\n            Fbs.ModelEntities.addDwgHandleIdentifiers(b,        me_children.dwgHandleIdentifiers);\n            Fbs.ModelEntities.addEntityClasses(b,               me_children.entityClasses);\n            modelEntitiesOffset = Fbs.ModelEntities.endModelEntities(b);\n        }\n\n        const modelGeometry: flatbuffers.Offset = this.generateModelGeometries();\n\n        const mapConversionsOffset = Fbs.Model.createMapConversionsVector(b, []);\n        const metadataOffset = Fbs.Model.createMetadataVector(b, []);\n\n        // Model\n        Fbs.Model.startModel(b);\n        Fbs.Model.addEntities(b, modelEntitiesOffset);\n        Fbs.Model.addProperties(b, modelPropertiesOffset);\n        Fbs.Model.addMapConversions(b, mapConversionsOffset);\n        Fbs.Model.addMetadata(b, metadataOffset);\n        Fbs.Model.addGeometry(b, modelGeometry);\n\n        const modelOffset = Fbs.Model.endModel(b);\n        Fbs.Model.finishModelBuffer(b, modelOffset);\n\n        const res = b.asUint8Array().slice();\n\n        return res.buffer;\n    }\n\n    private generateModelGeometries(): flatbuffers.Offset {\n        const b = this.b;\n\n        const mg_children = {\n            alignmentCurves: Fbs.ModelGeometry.createAlignmentCurvesVector(b, this.generateGeometries(Fbs.GeometryType.AlignmentCurve)),\n            billboards: Fbs.ModelGeometry.createBillboardsVector(b, []),\n            billboardTexts: Fbs.ModelGeometry.createBillboardTextsVector(b, this.generateGeometries(Fbs.GeometryType.BillboardText)),\n            bolts: Fbs.ModelGeometry.createBoltsVector(b, []),\n            bReps: Fbs.ModelGeometry.createBRepsVector(b, []),\n            bRepWithNormals: Fbs.ModelGeometry.createBRepWithNormalsVector(b, []),\n            bRepWithUVs: Fbs.ModelGeometry.createBRepWithUVsVector(b, []),\n            coordinateGeometryPoints: Fbs.ModelGeometry.createCoordinateGeometryPointsVector(b, []),\n            definitions: null as number,\n            graphicsContainers: Fbs.ModelGeometry.createGraphicsContainersVector(b, []),\n            gridLineContainers: Fbs.ModelGeometry.createGridLineContainersVector(b, this.generateGeometries(Fbs.GeometryType.GridLineContainer)),\n            instances: null as number,\n            layers: null as number,\n            localPlacements: null as number,\n            surfaceMaterials: null as number,\n            sweptDiskSolids: Fbs.ModelGeometry.createSweptDiskSolidsVector(b, []),\n            textStyles: null as number,\n            texturedBillboards: this.generateTexturedBillboards(),\n            texturedTriangleMeshes: Fbs.ModelGeometry.createTexturedTriangleMeshesVector(b, []),\n            texturedTriangleMeshes8: Fbs.ModelGeometry.createTexturedTriangleMeshes8Vector(b, []),\n            textures: null as number,\n            triangleMeshes: Fbs.ModelGeometry.createTriangleMeshesVector(b, this.generateGeometries(Fbs.GeometryType.TriangleMesh)),\n            triangleMeshes8: Fbs.ModelGeometry.createTriangleMeshes8Vector(b, []),\n        };\n\n        Fbs.ModelGeometry.startLocalPlacementsVector(b, 1);\n        Fbs.Placement3.createPlacement3(b, 0,0,0, 1,0,0, 0,1,0);\n        mg_children.localPlacements = b.endVector();\n\n        // Surface materials:\n        Fbs.ModelGeometry.startSurfaceMaterialsVector(b, this.materials.length);\n        forEachRev(this.materials, (m, i) => {\n            const to255 = (v: number) => v !== undefined ? v * 255 : 255;\n            const colorTo255 = (c: Color, key: string) => c !== undefined ? to255((c as any)[key]) : 255;\n            Fbs.SurfaceMaterial.createSurfaceMaterial(\n                b,\n                colorTo255(m.color, \"r\"), colorTo255(m.color, \"g\"), colorTo255(m.color, \"b\"), to255(m.opacity),\n                m.textureId, Fbs.Sidedness.Double, Fbs.LineStyle.Normal, 0, 0\n            );\n        });\n        mg_children.surfaceMaterials = b.endVector();\n\n        {   // Layers\n            const layerName0Offset = b.createString(\"Layer\");\n            mg_children.layers = Fbs.ModelGeometry.createLayersVector(b, [layerName0Offset]);\n        }\n\n        // Instances\n        Fbs.ModelGeometry.startInstancesVector(b, this.instances.length);\n        forEachRev(this.instances, (e, i) => {\n            Fbs.GeometryInstance.createGeometryInstance(b, 0, i, e.definitionId, e.materialId, 0);\n        });\n        mg_children.instances = b.endVector();\n\n        // Definitions\n        Fbs.ModelGeometry.startDefinitionsVector(b, this.definitionCount);\n        forEachRev(this.geometryDefinitions, (def, i) => {\n            const bb = def.boundingBox;\n            Fbs.GeometryDefinition.createGeometryDefinition(\n                b, def.type, def.index,\n                bb.min.x,bb.min.y,bb.min.z,\n                bb.max.x,bb.max.y,bb.max.z\n            );\n        });\n        mg_children.definitions = b.endVector();\n\n        {   // TextStyles\n            const fontOffsets = this.textStyles.map(ts => b.createString(ts.font || \"\"));\n            const textStyles = this.textStyles.map((ts, i) => {\n                Fbs.TextStyle.startTextStyle(b);\n                Fbs.TextStyle.addFont(b, fontOffsets[i]);\n                Fbs.TextStyle.addSize(b, ts.size || 0);\n                Fbs.TextStyle.addOptions(b, ts.attenuated ? 1 : 0);\n                Fbs.TextStyle.addVerticalAlign(b, ts.verticalAlign || 0);\n                Fbs.TextStyle.addHorizontalAlign(b, ts.horizontalAlign || 0);\n                Fbs.TextStyle.addRotationAngle(b, 0);\n                Fbs.TextStyle.addLayout(b, Fbs.LayoutType.LeftToRight);\n                Fbs.TextStyle.addAlignment(b, ts.alignment || Fbs.AlignmentType.LeftTop);\n                Fbs.TextStyle.addMaxAutoScale(b, 0);\n                Fbs.TextStyle.addVerticalDistanceToObject(b, 0);\n                return Fbs.TextStyle.endTextStyle(b);\n            });\n            mg_children.textStyles = Fbs.ModelGeometry.createTextStylesVector(b, textStyles);\n        }\n\n        {   // Textures\n            const textureOffsets: number[] = [];\n            this.textures.forEach((t,i) => {\n                const bytesOffset = Fbs.Texture.createBytesVector(b, t.bytes);\n                Fbs.Texture.startTexture(b);\n                Fbs.Texture.addType(b, t.type);\n                Fbs.Texture.addBytes(b, bytesOffset);\n                textureOffsets.push(Fbs.Texture.endTexture(b));\n            });\n            mg_children.textures = Fbs.ModelGeometry.createTexturesVector(b, textureOffsets);\n        }\n\n        Fbs.ModelGeometry.startModelGeometry(b);\n        Fbs.ModelGeometry.addAlignmentCurves(b, mg_children.alignmentCurves);\n        Fbs.ModelGeometry.addBillboards(b, mg_children.billboards);\n        Fbs.ModelGeometry.addBillboardTexts(b, mg_children.billboardTexts);\n        Fbs.ModelGeometry.addBolts(b, mg_children.bolts);\n        Fbs.ModelGeometry.addBReps(b, mg_children.bReps);\n        Fbs.ModelGeometry.addBRepWithNormals(b, mg_children.bRepWithNormals);\n        Fbs.ModelGeometry.addBRepWithUVs(b, mg_children.bRepWithUVs);\n        Fbs.ModelGeometry.addCoordinateGeometryPoints(b, mg_children.coordinateGeometryPoints);\n        Fbs.ModelGeometry.addDefinitions(b, mg_children.definitions);\n        Fbs.ModelGeometry.addGraphicsContainers(b, mg_children.graphicsContainers);\n        Fbs.ModelGeometry.addGridLineContainers(b, mg_children.gridLineContainers);\n        Fbs.ModelGeometry.addInstances(b, mg_children.instances);\n        Fbs.ModelGeometry.addLayers(b, mg_children.layers);\n        Fbs.ModelGeometry.addLocalPlacements(b, mg_children.localPlacements);\n        Fbs.ModelGeometry.addSurfaceMaterials(b, mg_children.surfaceMaterials);\n        Fbs.ModelGeometry.addSweptDiskSolids(b, mg_children.sweptDiskSolids);\n        Fbs.ModelGeometry.addTextStyles(b, mg_children.textStyles);\n        Fbs.ModelGeometry.addTexturedBillboards(b, mg_children.texturedBillboards);\n        Fbs.ModelGeometry.addTexturedTriangleMeshes(b, mg_children.texturedTriangleMeshes);\n        Fbs.ModelGeometry.addTexturedTriangleMeshes8(b, mg_children.texturedTriangleMeshes8);\n        Fbs.ModelGeometry.addTextures(b, mg_children.textures);\n        Fbs.ModelGeometry.addTriangleMeshes(b, mg_children.triangleMeshes);\n        Fbs.ModelGeometry.addTriangleMeshes8(b, mg_children.triangleMeshes8);\n\n        return Fbs.ModelGeometry.endModelGeometry(b);\n    }\n\n    private generateGeometries(geometryType: Fbs.GeometryType): flatbuffers.Offset[] {\n        return this.geometryDefinitionsMap.get(geometryType)\n            .map(i => this.geometryDefinitions[i].generate(this.b));\n    }\n\n    private generateTexturedBillboards(): flatbuffers.Offset {\n        const b = this.b;\n        const texturedBillboardIds = this.geometryDefinitionsMap.get(Fbs.GeometryType.TexturedBillboard);\n        Fbs.ModelGeometry.startTexturedBillboardsVector(b, texturedBillboardIds.length);\n        forEachRev(texturedBillboardIds, i => {\n            const tb = this.geometryDefinitions[i] as TexturedBillboard;\n            tb.generate(b);\n        });\n        return b.endVector();\n    }\n\n    private generateGuid(uuid: UUID): flatbuffers.Offset {\n        const b = this.b;\n        return Fbs.Guid.createGuid(b,\n            uuid.data[3] << 24 | uuid.data[2] << 16 | uuid.data[1] << 8 | uuid.data[0],\n            uuid.data[5] << 8 | uuid.data[4],\n            uuid.data[7] << 8 | uuid.data[6],\n            uuid.data[8],\n            uuid.data[9],\n            uuid.data[10],\n            uuid.data[11],\n            uuid.data[12],\n            uuid.data[13],\n            uuid.data[14],\n            uuid.data[15]\n        );\n    }\n}\n"],"names":["forEachRev","arr","f","i","length","GeometryDefinition","[object Object]","this","Fbs","Trimble","Technology","TrimBim","AlignmentCurve","type","GeometryType","boundingBox","bb","calculateHorizontalCurveBoundingBox","verticalRange","calculateVerticalHeightRange","min","Vector3","x","y","max","Box3","lineSegment","distance","segmentLength","startPoint","clone","startDirection","endPoint","Vector2","Math","cos","sin","add","circularArcSegment","deltaAngle","radius","angle","isCCW","PI","originDirection","dirX","dirY","direction","multiplyScalar","centerPoint","fromCenterPointX","fromCenterPointY","fromCenterPoint","startAngle","minAngle","maxAngle","getHorizontalCircularArcSegmentPointAt","dirCX","dirCY","dirC","point","Box2","start","getHorizontalLineSegmentPointAt","end","horizontalTransitionArcSegment","point0","isStartRadiusCCW","dir1X","dir1Y","direction1","point1","boundDirection","dir2X","dir2Y","direction2","point2","box1","box2","result","lsIndex","casIndex","tasIndex","segment","horizontalCurve","segmentTypes","mergeBox2","calculateHorizontalLineSegmentBoundingBox","lineSegments","calculateHorizontalCircularArcSegmentBoundingBox","circularArcSegments","calculateHorizontalTransientCurveSegmentBoundingBox","transitionArcSegments","verticalLineSegment","horizontalDistance","horizontalLength","startHeight","endHeight","startGradient","verticalCircularArcSegment","SH","SDA","startDistAlong","HL","SG","R","isConvex","Cx","sqrt","Cy","CTB","EH","pow","verticalCurve","calculateVerticalLineSegmentHeightRange","calculateVerticalCircularArcSegmentHeightRange","b","horizontalCurveOffset","generateHorizontalCurve","verticalCurveOffset","generateVerticalCurve","startAlignmentCurve","addHorizontalCurve","addVerticalCurve","endAlignmentCurve","segmentTypesOffset","HorizontalCurve","createSegmentTypesVector","lineSegmentsOffset","createLineSegmentsVector","map","startTagOffset","createString","startTag","endTagOffset","endTag","HorizontalLineSegment","startHorizontalLineSegment","addStartTag","addEndTag","addStartPoint","Vec2d","createVec2d","addStartDirection","addSegmentLength","endHorizontalLineSegment","circularArcSegmentsOffset","createCircularArcSegmentsVector","HorizontalCircularArcSegment","startHorizontalCircularArcSegment","addRadius","addIsCCW","endHorizontalCircularArcSegment","clothoidalArcSegmentsOffset","createClothoidalArcSegmentsVector","clothoidalArcSegments","HorizontalClothoidalArcSegment","startHorizontalClothoidalArcSegment","addStartRadius","startRadius","addClothoidConstant","clothoidConstant","addIsEntry","isEntry","endHorizontalClothoidalArcSegment","createTransitionArcSegmentsVector","HorizontalTransitionArcSegment","startHorizontalTransitionArcSegment","addEndRadius","endRadius","addIsStartRadiusCCW","addIsEndRadiusCCW","isEndRadiusCCW","addType","endHorizontalTransitionArcSegment","startHorizontalCurve","addStartAlongDistance","startAlongDistance","addSegmentTypes","addLineSegments","addCircularArcSegments","addClothoidalArcSegments","addTransitionArcSegments","endHorizontalCurve","VerticalCurve","VerticalLineSegment","startVerticalLineSegment","addStartDistAlong","addHorizontalLength","addStartHeight","addStartGradient","endVerticalLineSegment","VerticalCircularArcSegment","startVerticalCircularArcSegment","addIsConvex","endVerticalCircularArcSegment","parabolicArcSegmentsOffset","createParabolicArcSegmentsVector","parabolicArcSegments","VerticalParabolicArcSegment","startVerticalParabolicArcSegment","addParabolaConstant","parabolaConstant","endVerticalParabolicArcSegment","startVerticalCurve","addParabolicArcSegments","endVerticalCurve","ZeroBox","TexturedBillboard","createTexturedBillboard","leftUpXY","leftUpUV","rightDownXY","rightDownUV","IsInWorldUnits","BillboardText","stringOffset","text","startBillboardText","addTextStyleId","textStyleId","addText","endBillboardText","TriangleMesh","box","positions","p","expandByPoint","startPositionsVector","Vec3f","createVec3f","z","positionsOffset","endVector","startNormalsVector","normals","n","normalsOffset","startVerticesVector","vertices","v","IndexedVertex","createIndexedVertex","positionIndex","normalIndex","verticesOffset","indicesOffset","createIndicesVector","indices","startTriangleMesh","addPositions","addNormals","addVertices","addIndices","endTriangleMesh","GridLineContainer","gridLineSegments","Infinity","l","s","axisTag","GridLineSegment","startGridLineSegment","addAxisTag","addLineSegment","Line3d","createLine3d","endGridLineSegment","gridLineSegmentsOffset","createGridLineSegmentsVector","gridArcsOffset","createGridArcsVector","startGridLineContainer","addGridLineSegments","addGridArcs","endGridLineContainer","flatbuffers","Builder","Map","Object","values","forEach","isNaN","geometryDefinitionsMap","set","IdentifierType","instancesMap","definitionCount","geometryDefinitions","material","materials","push","assign","textureId","texture","textures","textStyle","textStyles","definitionId","materialId","position","givenId","Error","idType","None","String","stringIdentifiers","indexOf","Guid","guidIdentifiers","find","guid","equals","toString","instances","idIndex","get","globalPlacement","def","typeSpecificIndex","globalIndex","index","t","addDefinition","v1","v2","v3","normal","sub","cross","normalize","width","height","worldUnits","g","name","a","modelPropertiesOffset","modelEntitiesOffset","mp_children","angleMeasures","ModelProperties","createAngleMeasuresVector","areaMeasures","createAreaMeasuresVector","dateTimeValues","createDateTimeValuesVector","definitions","createDefinitionsVector","descriptions","createDescriptionsVector","doubleValues","createDoubleValuesVector","histories","lengthMeasures","createLengthMeasuresVector","massMeasures","createMassMeasuresVector","names","createNamesVector","objectTypes","createObjectTypesVector","owners","createOwnersVector","productBindings","products","propertyNames","createPropertyNamesVector","propertySetBindings","createPropertySetBindingsVector","propertySetNames","createPropertySetNamesVector","stringValues","createStringValuesVector","volumeMeasures","createVolumeMeasuresVector","startHistoriesVector","startProductBindingsVector","startProductsVector","startModelProperties","addAngleMeasures","addAreaMeasures","addDateTimeValues","addDefinitions","addDescriptions","addDoubleValues","addHistories","addLengthMeasures","addMassMeasures","addNames","addObjectTypes","addOwners","addProductBindings","addProducts","addPropertyNames","addPropertySetBindings","addPropertySetNames","addStringValues","addVolumeMeasures","endModelProperties","me_children","entities","hierarchies","ModelEntities","createStringIdentifiersVector","id","spatialHashIdentifiers","dwgHandleIdentifiers","createDwgHandleIdentifiersVector","entityClasses","createEntityClassesVector","startHierarchiesVector","startSpatialHashIdentifiersVector","startEntitiesVector","e","Entity","createEntity","startGuidIdentifiersVector","generateGuid","startModelEntities","addEntities","addHierarchies","addGuidIdentifiers","addStringIdentifiers","addSpatialHashIdentifiers","addDwgHandleIdentifiers","addEntityClasses","endModelEntities","modelGeometry","generateModelGeometries","mapConversionsOffset","Model","createMapConversionsVector","metadataOffset","createMetadataVector","startModel","addProperties","addMapConversions","addMetadata","addGeometry","modelOffset","endModel","finishModelBuffer","asUint8Array","slice","buffer","mg_children","alignmentCurves","ModelGeometry","createAlignmentCurvesVector","generateGeometries","billboards","createBillboardsVector","billboardTexts","createBillboardTextsVector","bolts","createBoltsVector","bReps","createBRepsVector","bRepWithNormals","createBRepWithNormalsVector","bRepWithUVs","createBRepWithUVsVector","coordinateGeometryPoints","createCoordinateGeometryPointsVector","graphicsContainers","createGraphicsContainersVector","gridLineContainers","createGridLineContainersVector","layers","localPlacements","surfaceMaterials","sweptDiskSolids","createSweptDiskSolidsVector","texturedBillboards","generateTexturedBillboards","texturedTriangleMeshes","createTexturedTriangleMeshesVector","texturedTriangleMeshes8","createTexturedTriangleMeshes8Vector","triangleMeshes","createTriangleMeshesVector","triangleMeshes8","createTriangleMeshes8Vector","startLocalPlacementsVector","Placement3","createPlacement3","startSurfaceMaterialsVector","m","to255","undefined","colorTo255","c","key","SurfaceMaterial","createSurfaceMaterial","color","opacity","Sidedness","Double","LineStyle","Normal","layerName0Offset","createLayersVector","startInstancesVector","GeometryInstance","createGeometryInstance","startDefinitionsVector","createGeometryDefinition","fontOffsets","ts","font","TextStyle","startTextStyle","addFont","addSize","size","addOptions","attenuated","addVerticalAlign","verticalAlign","addHorizontalAlign","horizontalAlign","addRotationAngle","addLayout","LayoutType","LeftToRight","addAlignment","alignment","AlignmentType","LeftTop","addMaxAutoScale","addVerticalDistanceToObject","endTextStyle","createTextStylesVector","textureOffsets","bytesOffset","Texture","createBytesVector","bytes","startTexture","addBytes","endTexture","createTexturesVector","startModelGeometry","addAlignmentCurves","addBillboards","addBillboardTexts","addBolts","addBReps","addBRepWithNormals","addBRepWithUVs","addCoordinateGeometryPoints","addGraphicsContainers","addGridLineContainers","addInstances","addLayers","addLocalPlacements","addSurfaceMaterials","addSweptDiskSolids","addTextStyles","addTexturedBillboards","addTexturedTriangleMeshes","addTexturedTriangleMeshes8","addTextures","addTriangleMeshes","addTriangleMeshes8","endModelGeometry","geometryType","generate","texturedBillboardIds","startTexturedBillboardsVector","uuid","createGuid","data","async","src","Promise","resolve","reject","r","XMLHttpRequest","open","withCredentials","responseType","onload","arrayBuffer","response","byteArray","Uint8Array","send"],"mappings":"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"}