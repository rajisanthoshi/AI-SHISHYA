define(["module","exports","three.mjs","./4efec337.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","./three.mjs","three.mjs","three.mjs"],(function(module,exports,three,PickingTool,ArrayCamera_js,EventDispatcher_js,PerspectiveCamera_js,Vector3_js,Vector4_js,Group_js,Color_js,Matrix4_js,Vector2_js,Matrix3_js,CubeTexture_js,Texture_js,DataTexture2DArray_js,DataTexture3D_js,Plane_js,Mesh_js,BoxGeometry_js,ShaderMaterial_js,CubeCamera_js,MeshDepthMaterial_js,MeshDistanceMaterial_js,BufferAttribute_js,BufferGeometry_js,Frustum_js,PlaneGeometry_js,three_module_js,Texture,BufferAttribute){"use strict";var BehaviorSubject=function(e){function t(t){var n=e.call(this)||this;return n._value=t,n}return PickingTool.__extends(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),t.prototype._subscribe=function(t){var n=e.prototype._subscribe.call(this,t);return n&&!n.closed&&t.next(this._value),n},t.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new PickingTool.ObjectUnsubscribedError;return this._value},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(PickingTool.Subject),AnimationFrameAction=function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.scheduler=t,i.work=n,i}return PickingTool.__extends(t,e),t.prototype.requestAsyncId=function(t,n,i){return void 0===i&&(i=0),null!==i&&i>0?e.prototype.requestAsyncId.call(this,t,n,i):(t.actions.push(this),t.scheduled||(t.scheduled=requestAnimationFrame((function(){return t.flush(null)}))))},t.prototype.recycleAsyncId=function(t,n,i){if(void 0===i&&(i=0),null!==i&&i>0||null===i&&this.delay>0)return e.prototype.recycleAsyncId.call(this,t,n,i);0===t.actions.length&&(cancelAnimationFrame(n),t.scheduled=void 0)},t}(PickingTool.AsyncAction),AnimationFrameScheduler=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return PickingTool.__extends(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,n=this.actions,i=-1,r=n.length;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while(++i<r&&(e=n.shift()));if(this.active=!1,t){for(;++i<r&&(e=n.shift());)e.unsubscribe();throw t}},t}(PickingTool.AsyncScheduler),animationFrameScheduler=new AnimationFrameScheduler(AnimationFrameAction);function concatAll(){return PickingTool.mergeAll(1)}function concat$1(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return concatAll()(PickingTool.of.apply(void 0,e))}function defer(e){return new PickingTool.Observable((function(t){var n;try{n=e()}catch(e){return void t.error(e)}return(n?PickingTool.from(n):PickingTool.empty()).subscribe(t)}))}function interval(e,t){return void 0===e&&(e=0),void 0===t&&(t=PickingTool.async),(!PickingTool.isNumeric(e)||e<0)&&(e=0),t&&"function"==typeof t.schedule||(t=PickingTool.async),new PickingTool.Observable((function(n){return n.add(t.schedule(dispatch,e,{subscriber:n,counter:0,period:e})),n}))}function dispatch(e){var t=e.subscriber,n=e.counter,i=e.period;t.next(n),this.schedule({subscriber:t,counter:n+1,period:i},i)}function concat(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return t.lift.call(concat$1.apply(void 0,[t].concat(e)))}}function pairwise(){return function(e){return e.lift(new PairwiseOperator)}}var PairwiseOperator=function(){function e(){}return e.prototype.call=function(e,t){return t.subscribe(new PairwiseSubscriber(e))},e}(),PairwiseSubscriber=function(e){function t(t){var n=e.call(this,t)||this;return n.hasPrev=!1,n}return PickingTool.__extends(t,e),t.prototype._next=function(e){var t;this.hasPrev?t=[this.prev,e]:this.hasPrev=!0,this.prev=e,t&&this.destination.next(t)},t}(PickingTool.Subscriber);function takeWhile(e,t){return void 0===t&&(t=!1),function(n){return n.lift(new TakeWhileOperator(e,t))}}var TakeWhileOperator=function(){function e(e,t){this.predicate=e,this.inclusive=t}return e.prototype.call=function(e,t){return t.subscribe(new TakeWhileSubscriber(e,this.predicate,this.inclusive))},e}(),TakeWhileSubscriber=function(e){function t(t,n,i){var r=e.call(this,t)||this;return r.predicate=n,r.inclusive=i,r.index=0,r}return PickingTool.__extends(t,e),t.prototype._next=function(e){var t,n=this.destination;try{t=this.predicate(e,this.index++)}catch(e){return void n.error(e)}this.nextOrComplete(e,t)},t.prototype.nextOrComplete=function(e,t){var n=this.destination;Boolean(t)?n.next(e):(this.inclusive&&n.next(e),n.complete())},t}(PickingTool.Subscriber);class Checksum{constructor(){this.intPlaceholder=new Int32Array(1),this.floatPlaceholder=new Float32Array(this.intPlaceholder.buffer),this.bytes=new Uint8Array(this.intPlaceholder.buffer),this.crc=-1}add(e){switch(typeof e){case"number":Number.isInteger(e)&&e<Checksum.MAX_INT32&&e>Checksum.MIN_INT32?this.intPlaceholder[0]=e:this.floatPlaceholder[0]=e,this.compute();break;case"boolean":this.intPlaceholder[0]=e?1:0,this.compute();break;case"string":for(let t=0;t<e.length;++t)this.intPlaceholder[0]=e.codePointAt(t),this.compute();break;case"object":for(const t in e)e.hasOwnProperty(t)&&this.add(e[t])}return this}get(){return~this.crc}clear(){return this.crc=-1,this}compute(){for(let e=0;e<4;++e){this.crc^=this.bytes[e];for(let e=0;e<8;++e)this.crc=1&this.crc?this.crc>>1^Checksum.POLY:this.crc>>1}}}Checksum.POLY=2197175160,Checksum.MAX_INT32=2147483647,Checksum.MIN_INT32=-2147483648;class PickerCache{constructor(){this.cache=new Map,this.checksum=new Checksum}async execCached(e,t,n,i){await this.sleep(10*(2-n));let r=this._get(e,t,n);return r instanceof Promise?await r:(null!==r||(this._reportProcessingStart(e,t,n),r=await i(),this._reportProcessingEndAndStore(e,t,n,r)),r)}_get(e,t,n){const i=this.getCompatibleCache(e,t,n);return i?null!==i.intersection?i.intersection:new Promise((e=>{i.listeners||(i.listeners=[]),i.listeners.push((()=>e(i.intersection)))})):null}_reportProcessingStart(e,t,n){if(this.getCache(e,t,n))throw new Error("reportProcessingStart() is called multiple times");this.setCache(e,t,n,{intersection:null})}_reportProcessingEndAndStore(e,t,n,i){const r=this.getCache(e,t,n);if(null!==r.intersection)throw new Error("reportProcessingEndAndStore() is called before reportProcessingStart(), or called multiple times");r.intersection=i,r.listeners&&r.listeners.forEach((e=>e()))}clear(){for(const e of this.cache)null!==e[1].intersection&&this.cache.delete(e[0])}getCompatibleCache(e,t,n){const i=this._toChecksum(e,t);if(0===n)return this.cache.get(i+n);for(let e=2;e>=n;e--){const t=this.cache.get(i+e);if(t)return t}}getCache(e,t,n){const i=this._toChecksum(e,t);return this.cache.get(i+n)}setCache(e,t,n,i){this.cache.set(this._toChecksum(e,t)+n,i)}_toChecksum(e,t){if(this.checksum.clear().add(e.x).add(e.y),t){0===t.length&&this.checksum.add("empty");for(const e of t)this.checksum.add(e.name)}return this.checksum.get()}sleep(e){return new Promise((t=>setTimeout(t,e)))}}class Picker{constructor(e,t,n,i){this._camera=e,this._models=t,this._container=n,this.settingsDispatcher=i,this.cache=new PickerCache,this.backClipPlane=new three.Plane,this.createFrustumFromScreenRect=(()=>{const e=new three.Plane,t=new three.Plane,n=new three.Plane,i=new three.Plane,r=new three.Plane,a=new three.Plane,o=new three.Vector3,s=new three.Vector3,l=new three.Vector3,c=new three.Vector3,d=new three.Vector3,u=new three.Vector3,h=new three.Vector2,p=new three.Vector2;return(f,m)=>{screenPositionToRayTracePoint(f,this._container,h),screenPositionToRayTracePoint(m,this._container,p);const g=this._camera;return o.set(h.x,h.y,1).unproject(g),s.set(p.x,h.y,1).unproject(g),l.set(h.x,p.y,1).unproject(g),c.set(p.x,p.y,1).unproject(g),d.set(h.x,h.y,0).unproject(g),u.set(p.x,p.y,0).unproject(g),e.setFromCoplanarPoints(d,o,s),t.setFromCoplanarPoints(u,s,c),n.setFromCoplanarPoints(u,c,l),i.setFromCoplanarPoints(d,l,o),g.getWorldDirection(r.normal),r.constant=g.position.length(),a.normal=r.normal,a.constant=1/0,new three.Frustum(e,n,i,t,r,a)}})(),e.subscribe((()=>this.cache.clear()))}setWorldBoundingBox(e){this._worldBoundingBox=e}createCaster(e,t){const n=new PickingTool.Caster;n.screenPosition=e;const i=screenPositionToRayTracePoint(n.screenPosition,this._container);return n.setFromCamera(i,this._camera),n.frustum=this.createFrustumFromScreenPoint(n.screenPosition,t),n}createFrustumFromScreenPoint(e,t){return this.createFrustumFromScreenRect(e.clone().subScalar(t),e.clone().addScalar(t))}async pickForNavigation(e){return await this.cache.execCached(e,void 0,0,(async()=>{const t=this.createCaster(e,50);return t.navigation=!0,this.reduceIntersections(await this.pickAllModels(t,void 0))}))}pick(e,t){return this.cache.execCached(e,t,1,(async()=>{const n=this.createCaster(e,this.settingsDispatcher.settings.snapDistance);return this.reduceIntersections(await this.pickAllModels(n,t))}))}async pickSnapped(e,t,n){const i=await this.cache.execCached(e,void 0,2,(async()=>{const i=this.createCaster(e,this.settingsDispatcher.settings.snapDistance);let r=await this.pickAllModelsSnapped(i,t,n);if(r){const e=r.find((e=>0===e.snapType));e&&(this.backClipPlane.setFromNormalAndCoplanarPoint(e.normal,e.point),r=r.filter((e=>this.backClipPlane.distanceToPoint(e.point)>=0)))}return this.reduceIntersections(r)}));return i&&t.includes(i.snapType)?i:null}async getIntersectionFromScreenRect(e,t,n=!1){const i=new PickingTool.Caster;delete i.ray,i.frustum=this.createFrustumFromScreenRect(e,t);const r=[],a=this._models.getIterable();for(const e of a){const t=e;t.isSelectable&&r.push(t.areaPick(i,n))}let o=await Promise.all(r);return o=o.filter((e=>!!e)),o}async pickAllModels(e,t){const n=[];for(const i of t||this._models.getIterable()){const t=i;t.pick&&n.push(t.pick(e))}return(await Promise.all(n)).filter((e=>!!e))}async pickAllModelsSnapped(e,t,n){if(this.pickerBusy&&!n)return;this.pickerBusy=!0;const i=[];for(const n of this._models.getIterable()){const r=n;r.pickSnapped&&i.push(r.pickSnapped(e,t))}const r=await Promise.all(i);return this.pickerBusy=!1,r.flat().filter((e=>!!e))}reduceIntersections(e){return e&&0!==e.length?e.reduce(((e,t)=>{const n=void 0!==e.distanceToRay&&void 0!==t.distanceToRay?e.distanceToRay/e.distance-t.distanceToRay/t.distance:e.distance-t.distance,i=(void 0!==e.pickPriority?e.pickPriority:0)-(t.pickPriority?t.pickPriority:0),r=(void 0!==e.snapType?e.snapType:0)-(t.snapType?t.snapType:0);return(0===i?0===r?n:-r:-i)<0?e:t})):void 0}}function screenPositionToRayTracePoint(e,t,n=new three.Vector2){const i=t.getBoundingClientRect();return n.x=(e.x-i.left)/t.clientWidth*2-1,n.y=-(e.y-i.top)/t.clientHeight*2+1,n}new three.Raycaster,(()=>{const e=new three.Vector3})();const DEG_RATIO=1/360;function getPerspectiveViewWorldSize(e,t){return Math.tan(e*Math.PI*DEG_RATIO)*t}function iterate(e,t){if(Array.isArray(e))for(let n=0;n<e.length;n++)t(e[n],n);else t(e,0)}function disposeImage(){this.image=void 0}class Vector3Const{}Vector3Const.zero=Object.freeze(new three.Vector3(0,0,0)),Vector3Const.one=Object.freeze(new three.Vector3(1,1,1)),Vector3Const.up=Object.freeze(new three.Vector3(0,0,1)),Vector3Const.down=Object.freeze(new three.Vector3(0,0,-1)),Vector3Const.forward=Object.freeze(new three.Vector3(0,1,0)),Vector3Const.back=Object.freeze(new three.Vector3(0,-1,0)),Vector3Const.right=Object.freeze(new three.Vector3(1,0,0)),Vector3Const.left=Object.freeze(new three.Vector3(-1,0,0));class Zoom{constructor(e){this._api=e,this._scrollSpeed=.1,this._pinchSpeed=.0035,this.zoomPosition=new three.Vector3,this.zoomOffset=new three.Vector3,this.cameraDirection=new three.Vector3,this.right=new three.Vector3,this.up=new three.Vector3,this.forward=new three.Vector3,this.useWorldCenter=!1,this._camera=e.camera,this._zoomTarget=new three.Vector3,this._cameraExpectedPosition=new three.Vector3;const t=this._api.inputHandler;let n=!1;this._zoom$=t.zoom$.pipe(PickingTool.mergeMap((async e=>(n||(await this._scrollStart(e),n=!0),e))),PickingTool.tap((e=>this.updateTargetIfNeeded(e))),PickingTool.map((e=>this.applyZoom(this._camera,this._scrollSpeed*e.speed,e.intersection))),PickingTool.debounceTime(200),PickingTool.tap((()=>n=!1))),this._pinch$=t.pointerDown$.pipe(PickingTool.filter((e=>e.touchCount>=2)),PickingTool.mergeMap(PickingTool.addIntersectionForNavigation(t.picker)),PickingTool.tap((e=>this.onPinchStart(e))),PickingTool.mergeMap((()=>t.pointerMove$.pipe(PickingTool.filter((e=>e.touchCount>=2)),PickingTool.map((e=>this.onPinchMove(e))),PickingTool.takeUntil(t.pointerUp$))))),this.enabled=!0}static get Name(){return"zoom"}get name(){return Zoom.Name}async _scrollStart(e){this.useWorldCenter?this._api.models.worldBoundingBox.value.getCenter(this._zoomTarget):(e.intersection=await this._api.picker.pickForNavigation(new three.Vector2(e.x,e.y)),this.setZoomTarget(e))}set enabled(e){this._scrollHandle&&(this._scrollHandle.unsubscribe(),this._pinchHandle.unsubscribe(),this._scrollHandle=null),e&&(this._scrollHandle=this._zoom$.subscribe(),this._pinchHandle=this._pinch$.subscribe())}get enabled(){return!!this._scrollHandle}setZoomTarget(e){const t=e.intersection;if(this._rayTracePoint=screenPositionToRayTracePoint(e,this._api.container),t&&t.point&&t.point.distanceTo(this._camera.position)>2*this._camera.nearMin)this._zoomTarget.copy(t.point);else{this._zoomTarget.set(this._rayTracePoint.x,this._rayTracePoint.y,1).unproject(this._camera);const e=t?10*this._camera.nearMin:Zoom.getDistanceToNearestModel(this._camera.position,this._api.models,10*this._camera.nearMin,1e3);this._zoomTarget.sub(this._camera.position).normalize().multiplyScalar(e).add(this._camera.position)}this.previousTargetTime=performance.now()}static getDistanceToNearestModel(e,t,n,i){let r=i;for(const n of t.getBoundingBoxesIterable()){const t=n.distanceToPoint(e);r>t&&(r=t)}return Math.max(r,n)}perspectiveZoom(e,t,n){const i=e.position;this._camera.getWorldDirection(this.cameraDirection),this.zoomPosition.copy(this.zoomOffset).multiplyScalar(-t).add(i),e.position.copy(this.zoomPosition),this._api.camera.callListeners()}orthographicZoom(e,t){e.getWorldDirection(this.forward),this.right.copy(Vector3Const.right),this.up.copy(Vector3Const.forward),this.right.applyQuaternion(this._camera.quaternion),this.up.applyQuaternion(this._camera.quaternion);const n=e.aspect>1?e.orthoSize/e.aspect:e.orthoSize,i=e.aspect>1?e.orthoSize:e.orthoSize*e.aspect,r=n*this._rayTracePoint.y,a=i*this._rayTracePoint.x,o=(n-r)*(1+t)+r-(1+t)*n,s=(i-a)*(1+t)+a-(1+t)*i;this.up.multiplyScalar(o),this.right.multiplyScalar(s),e.position.add(this.up),e.position.add(this.right),e.orthoSize=e.orthoSize*(1+t),this.adjustOrthoClipping(e),this._api.camera.callListeners()}adjustOrthoClipping(e){let t=this._zoomTarget.distanceTo(e.position);t-=e.orthoSize/2/getPerspectiveViewWorldSize(e.fov,1),t<0?(e.position.add(this.forward.multiplyScalar(t)),e.orthoLodPosition.copy(e.position)):e.orthoLodPosition.copy(e.position).add(this.forward.multiplyScalar(t))}applyZoom(e,t,n){this.zoomOffset.copy(this._zoomTarget).sub(e.position),e.isPerspectiveCamera?this.perspectiveZoom(e,t,n):e.isOrthographicCamera&&this.orthographicZoom(e,t)}getTouchDistance(e){const t=e.originalEvent;return PickingTool.getScreenDistance(t.touches[0],t.touches[1])}onPinchStart(e){this.setZoomTarget(e),this.previousPinchDistance=this.getTouchDistance(e)}updateTargetIfNeeded(e){performance.now()-this.previousTargetTime>200&&this._api.picker.pickForNavigation(new three.Vector2(e.x,e.y)).then((t=>{e.intersection=t,this.setZoomTarget(e)}))}onPinchMove(e){this.updateTargetIfNeeded(e);const t=this.getTouchDistance(e),n=this.previousPinchDistance-t;return this.applyZoom(this._camera,n*this._pinchSpeed,e.intersection),this.previousPinchDistance=t,e}}class Pan extends PickingTool.SinglePointerTool{constructor(e){super(),this._api=e,this.moveCallback=(()=>{const e=new three.Vector3,t=new three.Vector3;return n=>{const i=n.screenX-this.previousEvent.screenX,r=n.screenY-this.previousEvent.screenY;return e.copy(Vector3Const.forward),t.copy(Vector3Const.right),e.applyQuaternion(this._api.camera.quaternion),t.applyQuaternion(this._api.camera.quaternion),t.multiplyScalar(-i*this._speed),e.multiplyScalar(r*this._speed),this._api.camera.position.add(t).add(e),this._api.camera.callListeners(),this.previousEvent=n,n}})(),this.mouseButton=1,this.touchCount=2,this._dragObservable=e.inputHandler.createDragObservable(this.observableOptions,(e=>this._downCallback(e)),(e=>this.moveCallback(e)),(()=>{})),this.enabled=!0}static get Name(){return"pan"}get name(){return Pan.Name}set speed(e){let t;t=e?this._api.camera.position.distanceTo(e):Zoom.getDistanceToNearestModel(this._api.camera.position,this._api.models,10,1e3);const n=2*this._api.camera.getViewWorldSize(t);this._speed=n/Math.max(this._api.container.clientWidth,this._api.container.clientHeight)}async _downCallback(e){return e.intersection=await this._api.picker.pickForNavigation(new three.Vector2(e.x,e.y)),this.speed=e.intersection?e.intersection.point:null,this.previousEvent=e,e}set enabled(e){this._dragHandle&&(this._dragHandle.unsubscribe(),this._dragHandle=null),e&&(this._dragHandle=this._dragObservable.subscribe())}get enabled(){return!!this._dragHandle}}class AbstractOrbit extends PickingTool.SinglePointerTool{constructor(e,t){super(),this.inputs=e,this.EPS=.02,this._offset=new three.Vector3,this.updateOriginalCamera=(()=>{this._originalUp=new three.Vector3;const e=new three.Vector3;return()=>{this._originalDirection=this._camera.getWorldDirection(new three.Vector3),this._originalPosition=this._camera.position.clone(),this._originalUp.copy(Vector3Const.forward),e.copy(Vector3Const.right),this._originalUp.applyQuaternion(this._camera.quaternion),e.applyQuaternion(this._camera.quaternion);const t=(new three.Vector3).copy(this._rotationPoint).sub(this._originalPosition),n=this._originalDirection;this._offset.set(t.dot(e),t.dot(n),t.dot(this._originalUp))}})(),this.mouseButton=0,this.touchCount=1,this._camera=t,this.dragObservable=e.createDragObservable(this.observableOptions,(e=>this.downCallback(e)),(e=>this.moveCallback(e)),(e=>this.upCallback(e)))}set enabled(e){this._dragHandle&&(this._dragHandle.unsubscribe(),this._dragHandle=null),e&&(this._dragHandle=this.dragObservable.subscribe())}get enabled(){return!!this._dragHandle}async downCallback(e){return this._startPoint=new three.Vector2(e.screenX,e.screenY),this._rotationPoint=void 0,e}async moveCallback(e){if(this.calculatingRotationPoint)return;this._rotationPoint||(this.calculatingRotationPoint=!0,await this.calculateRotationPoint(e),this.calculatingRotationPoint=!1);const t=new three.Vector2(e.screenX,e.screenY).sub(this._startPoint),n=PickingTool.DirectionToSpherical(this._originalDirection,this._originalUp);return this.translateCamera(t,n),this._camera.callListeners(),e}calculateRotationPoint(e){this.updateOriginalCamera()}translateCamera(e,t){t.x=Math.max(this.EPS,Math.min(t.x+.007*e.y,Math.PI-this.EPS)),t.y-=.003*e.x,this._camera.rotateSpherical(this._rotationPoint,this._offset,t)}}class Orbit extends AbstractOrbit{constructor(e,t,n){super(e,t),this._worldBoundingBox=n,this.useWorldCenter=!1,this.enabled=!0}static get Name(){return"orbit"}get name(){return Orbit.Name}async calculateRotationPoint(e){this.useWorldCenter||(e.intersection=await this.inputs.picker.pickForNavigation(new three.Vector2(e.x,e.y))),!this.useWorldCenter&&e.intersection&&e.intersection.point?this._rotationPoint=e.intersection.point:this._rotationPoint=this._worldBoundingBox.value.getCenter(new three.Vector3),super.calculateRotationPoint(e)}upCallback(e){return e}}const msElapsed=e=>defer((()=>{const t=e.now();return interval(0,e).pipe(PickingTool.map((()=>e.now()-t)))})),duration=(e,t=animationFrameScheduler)=>msElapsed(t).pipe(PickingTool.map((t=>t/e)),takeWhile((e=>e<=1)),concat(PickingTool.of(1))),easeLinear=e=>e,easeInQuad=e=>e*e,easeOutQuad=e=>1-(1-e)*(1-e),easeInOutQuad=e=>e<.5?2*e*e:1-Math.pow(-2*e+2,2)/2,singleTween=(e,t,n,i)=>duration(e).pipe(PickingTool.map(t),PickingTool.map((e=>n+(i-n)*e)));class Fly extends AbstractOrbit{constructor(e,t){super(e,t),this._dir=new three.Vector3,this._fly=new three.Vector3,this._speedIncrease=1e-5,this._minSpeed=.002,this._maxSpeed=.02,this._speed=this._minSpeed,this.mouseButton=2,this.touchCount=3,this._keyObservable=PickingTool.merge(e.keyDown$,e.keyUp$).pipe(PickingTool.tap((e=>this.processKey(e)))),this._moveObservable=msElapsed(animationFrameScheduler).pipe(pairwise(),PickingTool.tap((e=>this.move(e[1]-e[0])))),this.enabled=!0}static get Name(){return"fly"}get name(){return Fly.Name}move(e){0!==this._dir.lengthSq()&&(this._speed=Math.min(this._speed+e*this._speedIncrease,this._maxSpeed),this._fly.copy(this._dir).multiplyScalar(e*this._speed),this._fly.applyQuaternion(this._camera.quaternion),this._camera.position.add(this._fly),this._camera.callListeners())}processKey(e){const t="keydown"===e.type?1:-1;switch(e.code){case"KeyW":this._dir.z+=-t;break;case"KeyS":this._dir.z+=t;break;case"KeyA":this._dir.x+=-t;break;case"KeyD":this._dir.x+=t;break;case"KeyQ":this._dir.y+=-t;break;case"KeyE":this._dir.y+=t}this._maxSpeed=e.shiftKey?.1:.02,this._speedIncrease=e.shiftKey?1e-4:5e-6,this._dir.equals(Vector3Const.zero)&&(this._speed=this._minSpeed)}async moveCallback(e){if(document.hasFocus())return super.moveCallback(e)}async pick(e){return e}calculateRotationPoint(e){this._rotationPoint=this._camera.position,super.calculateRotationPoint(e),this._keyHandle=this._keyObservable.subscribe(),this._moveHandle=this._moveObservable.subscribe()}upCallback(e){return this._dir.set(0,0,0),this._keyHandle&&this._keyHandle.unsubscribe(),this._moveHandle&&this._moveHandle.unsubscribe(),e}}class VRNavigation{constructor(e){this._speed=0,this._artificialRotationInProgress=!1,this._artificialRotation=0,this._accelerating=!1,this.BASE_SPEED=.015,this.ACC=5e-5,this.ARTIFICIAL_ROT_ANGLE=Math.PI/8,this.ACCELERATION_THRESHOLD=.75,this.INSTANT_BREAK_THRESHOLD=.05,this.update=(()=>{const e=this;let t=0,n=0;return i=>{n=i-t,t=i,e.enabled&&e.move(n)}})(),this._api=e,this._scene=e.scene,this._refOrientation=new three.Quaternion;const t=this._api.renderingManager.vr.toVRCamera(e.camera);t.getWorldQuaternion(this._refOrientation),this._refMatrix=t.matrixWorld.clone()}static get Name(){return"vrnavigation"}get name(){return VRNavigation.Name}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this._enabled?this._api.renderingManager.addAnimationFrameListener(this.update):this._api.renderingManager.removeAnimationFrameListener(this.update))}get _session(){return this._api.renderingManager.renderer.xr.getSession()}static hapticsPulse(e,t=.5,n=100){for(const i of e){if(!i.pad)continue;const e=i.pad;e&&e.hapticActuators&&e.hapticActuators.length>0&&e.hapticActuators[0]&&e.hapticActuators[0].pulse&&e.hapticActuators[0].pulse(t,n)}}move(e){if(!this._session)return;const t=this._session.inputSources;if(!t)return;const n=this._api.renderingManager.vr.cameraRig;if(!n)return;let i=0,r=0;for(const e of t){const t=e.gamepad?e.gamepad.axes:void 0;t&&(i+=t[0],r-=t[1],i+=t[2],r-=t[3])}const a=this._api.renderingManager.vr.toVRCamera(this._api.camera),o=new three.Quaternion;a.getWorldQuaternion(o);const s=new three.Vector3(0,0,-1).applyQuaternion(o);(this._speed>0&&r<this.INSTANT_BREAK_THRESHOLD||this._speed<0&&r>-this.INSTANT_BREAK_THRESHOLD)&&(this._speed=0),Math.abs(r)>this.ACCELERATION_THRESHOLD?(this._speed+=r*Math.abs(Math.pow(r,2))*this.ACC*e,this._accelerating=!0):(this._speed*=Math.pow(Math.abs(r),.01*e),this._accelerating=!1);const l=(this.BASE_SPEED*r*Math.min(r*r,.2)+this._speed)*e;n.position.add(s.clone().multiplyScalar(l));let c=0;Math.abs(r)<.25&&Math.abs(i)>.75&&(this._artificialRotationInProgress||(VRNavigation.hapticsPulse(t,.5,100),this._artificialRotationInProgress=!0,c-=Math.sign(i)*this.ARTIFICIAL_ROT_ANGLE)),Math.abs(i)<.7&&(this._artificialRotationInProgress=!1),this._artificialRotation+=c;const d=new three.Vector3;n.getWorldDirection(d),d.applyAxisAngle(new three.Vector3(0,0,1),c);const u=new three.Vector3;n.getWorldPosition(u),n.lookAt(u.clone().add(d))}}class ApiContainer{get(e){for(const t in this)if(this.hasOwnProperty(t)&&this[t]instanceof e)return this[t]}}class GamepadNavigation{constructor(e){this._speed=0,this._artificialRotationInProgress=!1,this._artificialRotation=0,this._accelerating=!1,this.BASE_SPEED=.015,this.ACC=5e-5,this.ARTIFICIAL_ROT_ANGLE=Math.PI/8,this.ACCELERATION_THRESHOLD=.75,this.INSTANT_BREAK_THRESHOLD=.05,this._camera=e.camera,this._api=e,this._scene=e.scene,this._refOrientation=new three.Quaternion;const t=this._api.renderingManager.vr.toVRCamera(this._camera);t.getWorldQuaternion(this._refOrientation),this._refMatrix=t.matrixWorld.clone(),this.observable=msElapsed(animationFrameScheduler).pipe(pairwise(),PickingTool.tap((e=>this.move(e[1]-e[0]))))}static get Name(){return"gamepad"}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this._enabled&&this.observable.subscribe())}get name(){return GamepadNavigation.Name}static hapticsPulse(e,t=.5,n=100){e instanceof Gamepad&&(e=[e]);for(const i of e)i&&i.hapticActuators&&i.hapticActuators.length>0&&i.hapticActuators[0]&&i.hapticActuators[0].pulse(t,n)}move(e){if(!this.enabled||!window.navigator||!window.navigator.getGamepads)return;const t=window.navigator.getGamepads();let n=0,i=0;for(const e of t)e&&(n+=e.axes[0],i-=e.axes[1]);const r=this._api.renderingManager.vr.toVRCamera(this._camera),a=new three.Quaternion;r.getWorldQuaternion(a);const o=new three.Vector3(0,0,-1).applyQuaternion(a);(this._speed>0&&i<this.INSTANT_BREAK_THRESHOLD||this._speed<0&&i>-this.INSTANT_BREAK_THRESHOLD)&&(this._speed=0),Math.abs(i)>this.ACCELERATION_THRESHOLD?(this._speed+=i*Math.abs(Math.pow(i,2))*this.ACC*e,this._accelerating=!0):(this._speed*=Math.pow(Math.abs(i),.01*e),this._accelerating=!1);const s=(this.BASE_SPEED*i*Math.min(i*i,.2)+this._speed)*e;this._camera.position.add(o.clone().multiplyScalar(s));let l=0;Math.abs(i)<.25&&Math.abs(n)>.75&&(this._artificialRotationInProgress||(GamepadNavigation.hapticsPulse(t,.5,100),this._artificialRotationInProgress=!0,l-=Math.sign(n)*this.ARTIFICIAL_ROT_ANGLE)),Math.abs(n)<.7&&(this._artificialRotationInProgress=!1),this._artificialRotation+=l;const c=new three.Vector3;this._camera.getWorldDirection(c),c.applyAxisAngle(new three.Vector3(0,0,1),l);const d=new three.Vector3;this._camera.getWorldPosition(d),this._camera.lookAt(d.clone().add(c))}}class ToolManager{constructor(e){this._api=e,this.tools=new ApiContainer,this._conflictingTools=[],this._camera=this._api.camera,this.addTool(new Orbit(this._api.inputHandler,e.camera,e.models.worldBoundingBox)),this.addTool(new Fly(this._api.inputHandler,e.camera)),this.addTool(new Pan(this._api)),this.addTool(new Zoom(this._api)),this.addTool(new VRNavigation(this._api)),this.addTool(new GamepadNavigation(this._api)),this.addTool(new PickingTool.SelectionTool(this._api)),this.addTool(new PickingTool.AreaSelectionTool(this._api)),this.addTool(new PickingTool.PickingTool(this._api.inputHandler,e.cursor,e.eventDispatcher)),this.activateDefaultTool(),this._startEmittingNavigationEvents(),this._subscribeToDragging()}_startEmittingNavigationEvents(){let e=!1;const t=new BehaviorSubject(this._api.camera);this._api.camera.subscribe((()=>t.next(this._api.camera))),t.pipe(PickingTool.tap((()=>{e||this._api.eventDispatcher.navigation(!0),e=!0})),PickingTool.debounceTime(100),PickingTool.tap((()=>{this._api.eventDispatcher.navigation(!1),e=!1}))).subscribe()}_subscribeToDragging(){this._api.eventDispatcher.subscribe("dragstart",(e=>this._disableConflictingTools(e))),this._api.eventDispatcher.subscribe("dragend",(()=>this._enableConflictingTools()))}_disableConflictingTools(e){for(const t in this.tools){if(!this.tools.hasOwnProperty(t))continue;const n=this.tools[t];n!==e.detail&&(n.enabled&&(n.enabled=!1,this._conflictingTools.push(n)))}}_enableConflictingTools(){for(const e of this._conflictingTools)e.enabled=!0;this._conflictingTools.length=0}addTool(e){if(this.tools.hasOwnProperty(e.name))throw new Error(`Tool ${e.name} already exists`);this.tools[e.name]=e,e.onFinished=()=>this.activateDefaultTool()}activateDefaultTool(){this.activeTool="selection"}set activeTool(e){this._activeTool&&(this._activeTool.enabled=!1),this._activeTool=this.tools[e],this._activeTool&&(this._activeTool.enabled=!0),this._api.eventDispatcher.dispatch(new CustomEvent("active-tool-changed"))}get activeTool(){return this._activeTool.name}}class VRManager{constructor(e){this.api=e,this.onEnd=()=>{this.session&&(this.api.renderingManager.removeAnimationFrameListener(this._update),this.api.settingsDispatcher.settings.orderIndependentTransparency=this.origOrderIndependentTransparency,this.session=void 0,this._removeCameraRig())},this._update=(()=>()=>this.api.camera.callListeners())()}static async isVRAvailable(){return"xr"in navigator&&(navigator.xr&&await navigator.xr.isSessionSupported("immersive-vr"))}async isAvailable(){return VRManager.isVRAvailable()}set enabled(e){e!==this.enabled&&(this.api.renderingManager.renderer.xr.enabled=e,e?navigator.xr.requestSession("immersive-vr",{optionalFeatures:["local-floor","bounded-floor"]}).then((e=>{this.session=e,e.onend=this.onEnd,this.api.renderingManager.renderer.xr.setSession(e),this.api.renderingManager.addAnimationFrameListener(this._update),this.origOrderIndependentTransparency=this.api.settingsDispatcher.settings.orderIndependentTransparency,this.api.settingsDispatcher.settings.antialias=!1,this.api.settingsDispatcher.settings.orderIndependentTransparency=!1,this.api.settingsDispatcher.settings.renderEdges=!1;const t=PickingTool.DirectionToSpherical(this.api.camera.getWorldDirection(new three.Vector3),this.api.camera.up);t.x=Math.PI/2,this.api.camera.rotateSpherical(this.api.camera.position,Vector3Const.zero,t),this.api.camera.near=.01,this.api.camera.far=1e4,this.api.camera.updateProjectionMatrix(),this._createCameraRig()})):this.session.end(),this.api.toolManager.tools.get(VRNavigation).enabled=e,this.api.toolManager.tools.get(GamepadNavigation).enabled=e)}_createCameraRig(){this.cameraRig=new three.Object3D,this.cameraRig.position.copy(this.api.camera.position),this.cameraRig.quaternion.copy(this.api.camera.quaternion),this.api.camera.position.set(0,0,0),this.api.camera.quaternion.copy(new three.Quaternion);const e=new three.Object3D;e.up=Vector3Const.up,e.add(this.api.camera),this.cameraRig.add(e)}_removeCameraRig(){this.api.camera.position.copy(this.cameraRig.position),this.api.camera.quaternion.copy(this.cameraRig.quaternion),this.api.camera.parent.remove(this.api.camera),this.cameraRig=void 0}get enabled(){return!(!this.session||!this.api.renderingManager.renderer.xr.isPresenting)}toVRCamera(e){return e.isPerspectiveCamera&&this.enabled?this.api.renderingManager.renderer.xr.getCamera(e):e}}var appleIphone=/iPhone/i,appleIpod=/iPod/i,appleTablet=/iPad/i,appleUniversal=/\biOS-universal(?:.+)Mac\b/i,androidPhone=/\bAndroid(?:.+)Mobile\b/i,androidTablet=/Android/i,amazonPhone=/(?:SD4930UR|\bSilk(?:.+)Mobile\b)/i,amazonTablet=/Silk/i,windowsPhone=/Windows Phone/i,windowsTablet=/\bWindows(?:.+)ARM\b/i,otherBlackBerry=/BlackBerry/i,otherBlackBerry10=/BB10/i,otherOpera=/Opera Mini/i,otherChrome=/\b(CriOS|Chrome)(?:.+)Mobile/i,otherFirefox=/Mobile(?:.+)Firefox\b/i,isAppleTabletOnIos13=function(e){return void 0!==e&&"MacIntel"===e.platform&&"number"==typeof e.maxTouchPoints&&e.maxTouchPoints>1&&"undefined"==typeof MSStream};function createMatch(e){return function(t){return t.test(e)}}function isMobile(e){var t={userAgent:"",platform:"",maxTouchPoints:0};e||"undefined"==typeof navigator?"string"==typeof e?t.userAgent=e:e&&e.userAgent&&(t={userAgent:e.userAgent,platform:e.platform,maxTouchPoints:e.maxTouchPoints||0}):t={userAgent:navigator.userAgent,platform:navigator.platform,maxTouchPoints:navigator.maxTouchPoints||0};var n=t.userAgent,i=n.split("[FBAN");void 0!==i[1]&&(n=i[0]),void 0!==(i=n.split("Twitter"))[1]&&(n=i[0]);var r=createMatch(n),a={apple:{phone:r(appleIphone)&&!r(windowsPhone),ipod:r(appleIpod),tablet:!r(appleIphone)&&(r(appleTablet)||isAppleTabletOnIos13(t))&&!r(windowsPhone),universal:r(appleUniversal),device:(r(appleIphone)||r(appleIpod)||r(appleTablet)||r(appleUniversal)||isAppleTabletOnIos13(t))&&!r(windowsPhone)},amazon:{phone:r(amazonPhone),tablet:!r(amazonPhone)&&r(amazonTablet),device:r(amazonPhone)||r(amazonTablet)},android:{phone:!r(windowsPhone)&&r(amazonPhone)||!r(windowsPhone)&&r(androidPhone),tablet:!r(windowsPhone)&&!r(amazonPhone)&&!r(androidPhone)&&(r(amazonTablet)||r(androidTablet)),device:!r(windowsPhone)&&(r(amazonPhone)||r(amazonTablet)||r(androidPhone)||r(androidTablet))||r(/\bokhttp\b/i)},windows:{phone:r(windowsPhone),tablet:r(windowsTablet),device:r(windowsPhone)||r(windowsTablet)},other:{blackberry:r(otherBlackBerry),blackberry10:r(otherBlackBerry10),opera:r(otherOpera),firefox:r(otherFirefox),chrome:r(otherChrome),device:r(otherBlackBerry)||r(otherBlackBerry10)||r(otherOpera)||r(otherFirefox)||r(otherChrome)},any:!1,phone:!1,tablet:!1};return a.any=a.apple.device||a.android.device||a.windows.device||a.other.device,a.phone=a.apple.phone||a.android.phone||a.windows.phone,a.tablet=a.apple.tablet||a.android.tablet||a.windows.tablet,a}function WebGLAnimation(){let e=null,t=!1,n=null,i=null;function r(t,a){n(t,a),i=e.requestAnimationFrame(r)}return{start:function(){!0!==t&&null!==n&&(i=e.requestAnimationFrame(r),t=!0)},stop:function(){e.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function WebXRController(){this._targetRay=null,this._grip=null,this._hand=null}function WebXRManager(e,t){const n=this;let i=null,r=1,a=null,o="local-floor",s=null;const l=[],c=new Map,d=new PerspectiveCamera_js.PerspectiveCamera;d.layers.enable(1),d.viewport=new Vector4_js.Vector4;const u=new PerspectiveCamera_js.PerspectiveCamera;u.layers.enable(2),u.viewport=new Vector4_js.Vector4;const h=[d,u],p=new ArrayCamera_js.ArrayCamera;p.layers.enable(1),p.layers.enable(2);let f=null,m=null;function g(e){const t=c.get(e.inputSource);t&&t.dispatchEvent({type:e.type,data:e.inputSource})}function _(){c.forEach((function(e,t){e.disconnect(t)})),c.clear(),f=null,m=null,e.setFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),b.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function v(e){const t=i.inputSources;for(let e=0;e<l.length;e++)c.set(t[e],l[e]);for(let t=0;t<e.removed.length;t++){const n=e.removed[t],i=c.get(n);i&&(i.dispatchEvent({type:"disconnected",data:n}),c.delete(n))}for(let t=0;t<e.added.length;t++){const n=e.added[t],i=c.get(n);i&&i.dispatchEvent({type:"connected",data:n})}}this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=l[e];return void 0===t&&(t=new WebXRController,l[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=l[e];return void 0===t&&(t=new WebXRController,l[e]=t),t.getGripSpace()},this.getHand=function(e){let t=l[e];return void 0===t&&(t=new WebXRController,l[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){r=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){o=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return a},this.getSession=function(){return i},this.setSession=async function(e){if(i=e,null!==i){i.addEventListener("select",g),i.addEventListener("selectstart",g),i.addEventListener("selectend",g),i.addEventListener("squeeze",g),i.addEventListener("squeezestart",g),i.addEventListener("squeezeend",g),i.addEventListener("end",_),i.addEventListener("inputsourceschange",v);const e=t.getContextAttributes();!0!==e.xrCompatible&&await t.makeXRCompatible();const s={antialias:e.antialias,alpha:e.alpha,depth:e.depth,stencil:e.stencil,framebufferScaleFactor:r},l=new XRWebGLLayer(i,t,s);i.updateRenderState({baseLayer:l}),a=await i.requestReferenceSpace(o),b.setContext(i),b.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};const x=new Vector3_js.Vector3,T=new Vector3_js.Vector3;function A(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.getCamera=function(e){p.near=u.near=d.near=e.near,p.far=u.far=d.far=e.far,f===p.near&&m===p.far||(i.updateRenderState({depthNear:p.near,depthFar:p.far}),f=p.near,m=p.far);const t=e.parent,n=p.cameras;A(p,t);for(let e=0;e<n.length;e++)A(n[e],t);e.matrixWorld.copy(p.matrixWorld),e.matrix.copy(p.matrix),e.matrix.decompose(e.position,e.quaternion,e.scale);const r=e.children;for(let e=0,t=r.length;e<t;e++)r[e].updateMatrixWorld(!0);return 2===n.length?function(e,t,n){x.setFromMatrixPosition(t.matrixWorld),T.setFromMatrixPosition(n.matrixWorld);const i=x.distanceTo(T),r=t.projectionMatrix.elements,a=n.projectionMatrix.elements,o=r[14]/(r[10]-1),s=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],d=(r[8]-1)/r[0],u=(a[8]+1)/a[0],h=o*d,p=o*u,f=i/(-d+u),m=f*-d;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(m),e.translateZ(f),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert();const g=o+f,_=s+f,v=h-m,A=p+(i-m),S=l*s/_*g,b=c*s/_*g;e.projectionMatrix.makePerspective(v,A,S,b,g,_)}(p,d,u):p.projectionMatrix.copy(d.projectionMatrix),p};let S=null;const b=new WebGLAnimation;b.setAnimationLoop((function(t,n){if(s=n.getViewerPose(a),null!==s){const t=s.views,n=i.renderState.baseLayer;e.setFramebuffer(n.framebuffer);let r=!1;t.length!==p.cameras.length&&(p.cameras.length=0,r=!0);for(let e=0;e<t.length;e++){const i=t[e],a=n.getViewport(i),o=h[e];o.matrix.fromArray(i.transform.matrix),o.projectionMatrix.fromArray(i.projectionMatrix),o.viewport.set(a.x,a.y,a.width,a.height),0===e&&p.matrix.copy(o.matrix),!0===r&&p.cameras.push(o)}}const r=i.inputSources;for(let e=0;e<l.length;e++){const t=l[e],i=r[e];t.update(i,n,a)}S&&S(t,n)})),this.setAnimationLoop=function(e){S=e},this.dispose=function(){}}Object.assign(WebXRController.prototype,{constructor:WebXRController,getHandSpace:function(){return null===this._hand&&(this._hand=new Group_js.Group,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand},getTargetRaySpace:function(){return null===this._targetRay&&(this._targetRay=new Group_js.Group,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1),this._targetRay},getGripSpace:function(){return null===this._grip&&(this._grip=new Group_js.Group,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1),this._grip},dispatchEvent:function(e){return null!==this._targetRay&&this._targetRay.dispatchEvent(e),null!==this._grip&&this._grip.dispatchEvent(e),null!==this._hand&&this._hand.dispatchEvent(e),this},disconnect:function(e){return this.dispatchEvent({type:"disconnected",data:e}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this},update:function(e,t,n){let i=null,r=null,a=null;const o=this._targetRay,s=this._grip,l=this._hand;if(e&&"visible-blurred"!==t.session.visibilityState)if(l&&e.hand){a=!0;for(const i of e.hand.values()){const e=t.getJointPose(i,n);if(void 0===l.joints[i.jointName]){const e=new Group_js.Group;e.matrixAutoUpdate=!1,e.visible=!1,l.joints[i.jointName]=e,l.add(e)}const r=l.joints[i.jointName];null!==e&&(r.matrix.fromArray(e.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=e.radius),r.visible=null!==e}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],o=i.position.distanceTo(r.position),s=.02,c=.005;l.inputState.pinching&&o>s+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&o<=s-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else null!==o&&(i=t.getPose(e.targetRaySpace,n),null!==i&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale))),null!==s&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),null!==r&&(s.matrix.fromArray(r.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale)));return null!==o&&(o.visible=null!==i),null!==s&&(s.visible=null!==r),null!==l&&(l.visible=null!==a),this}}),Object.assign(WebXRManager.prototype,EventDispatcher_js.EventDispatcher.prototype);const CullFaceNone=0,CullFaceBack=1,CullFaceFront=2,PCFShadowMap=1,VSMShadowMap=3,FrontSide=0,BackSide=1,DoubleSide=2,NoBlending=0,NormalBlending=1,AdditiveBlending=2,SubtractiveBlending=3,MultiplyBlending=4,CustomBlending=5,AddEquation=100,SubtractEquation=101,ReverseSubtractEquation=102,MinEquation=103,MaxEquation=104,ZeroFactor=200,OneFactor=201,SrcColorFactor=202,OneMinusSrcColorFactor=203,SrcAlphaFactor=204,OneMinusSrcAlphaFactor=205,DstAlphaFactor=206,OneMinusDstAlphaFactor=207,DstColorFactor=208,OneMinusDstColorFactor=209,SrcAlphaSaturateFactor=210,NeverDepth=0,AlwaysDepth=1,LessDepth=2,LessEqualDepth=3,EqualDepth=4,GreaterEqualDepth=5,GreaterDepth=6,NotEqualDepth=7,CubeReflectionMapping=301,CubeRefractionMapping=302,EquirectangularReflectionMapping=303,EquirectangularRefractionMapping=304,CubeUVReflectionMapping=306,NearestFilter=1003,LinearFilter=1006,LinearMipmapLinearFilter=1008,UnsignedByteType=1009,ByteType=1010,ShortType=1011,UnsignedShortType=1012,IntType=1013,UnsignedIntType=1014,FloatType=1015,HalfFloatType=1016,UnsignedShort4444Type=1017,UnsignedShort5551Type=1018,UnsignedShort565Type=1019,UnsignedInt248Type=1020,AlphaFormat=1021,RGBFormat=1022,RGBAFormat=1023,LuminanceFormat=1024,LuminanceAlphaFormat=1025,DepthFormat=1026,DepthStencilFormat=1027,RedFormat=1028,RedIntegerFormat=1029,RGFormat=1030,RGIntegerFormat=1031,RGBIntegerFormat=1032,RGBAIntegerFormat=1033,RGB_S3TC_DXT1_Format=33776,RGBA_S3TC_DXT1_Format=33777,RGBA_S3TC_DXT3_Format=33778,RGBA_S3TC_DXT5_Format=33779,RGB_PVRTC_4BPPV1_Format=35840,RGB_PVRTC_2BPPV1_Format=35841,RGBA_PVRTC_4BPPV1_Format=35842,RGBA_PVRTC_2BPPV1_Format=35843,RGB_ETC1_Format=36196,RGB_ETC2_Format=37492,RGBA_ETC2_EAC_Format=37496,RGBA_ASTC_4x4_Format=37808,RGBA_ASTC_5x4_Format=37809,RGBA_ASTC_5x5_Format=37810,RGBA_ASTC_6x5_Format=37811,RGBA_ASTC_6x6_Format=37812,RGBA_ASTC_8x5_Format=37813,RGBA_ASTC_8x6_Format=37814,RGBA_ASTC_8x8_Format=37815,RGBA_ASTC_10x5_Format=37816,RGBA_ASTC_10x6_Format=37817,RGBA_ASTC_10x8_Format=37818,RGBA_ASTC_10x10_Format=37819,RGBA_ASTC_12x10_Format=37820,RGBA_ASTC_12x12_Format=37821,RGBA_BPTC_Format=36492,SRGB8_ALPHA8_ASTC_4x4_Format=37840,SRGB8_ALPHA8_ASTC_5x4_Format=37841,SRGB8_ALPHA8_ASTC_5x5_Format=37842,SRGB8_ALPHA8_ASTC_6x5_Format=37843,SRGB8_ALPHA8_ASTC_6x6_Format=37844,SRGB8_ALPHA8_ASTC_8x5_Format=37845,SRGB8_ALPHA8_ASTC_8x6_Format=37846,SRGB8_ALPHA8_ASTC_8x8_Format=37847,SRGB8_ALPHA8_ASTC_10x5_Format=37848,SRGB8_ALPHA8_ASTC_10x6_Format=37849,SRGB8_ALPHA8_ASTC_10x8_Format=37850,SRGB8_ALPHA8_ASTC_10x10_Format=37851,SRGB8_ALPHA8_ASTC_12x10_Format=37852,SRGB8_ALPHA8_ASTC_12x12_Format=37853,RGBADepthPacking=3201;function WebGLUtils(e,t,n){const i=n.isWebGL2;return{convert:function(n){let r;if(n===UnsignedByteType)return e.UNSIGNED_BYTE;if(n===UnsignedShort4444Type)return e.UNSIGNED_SHORT_4_4_4_4;if(n===UnsignedShort5551Type)return e.UNSIGNED_SHORT_5_5_5_1;if(n===UnsignedShort565Type)return e.UNSIGNED_SHORT_5_6_5;if(n===ByteType)return e.BYTE;if(n===ShortType)return e.SHORT;if(n===UnsignedShortType)return e.UNSIGNED_SHORT;if(n===IntType)return e.INT;if(n===UnsignedIntType)return e.UNSIGNED_INT;if(n===FloatType)return e.FLOAT;if(n===HalfFloatType)return i?e.HALF_FLOAT:(r=t.get("OES_texture_half_float"),null!==r?r.HALF_FLOAT_OES:null);if(n===AlphaFormat)return e.ALPHA;if(n===RGBFormat)return e.RGB;if(n===RGBAFormat)return e.RGBA;if(n===LuminanceFormat)return e.LUMINANCE;if(n===LuminanceAlphaFormat)return e.LUMINANCE_ALPHA;if(n===DepthFormat)return e.DEPTH_COMPONENT;if(n===DepthStencilFormat)return e.DEPTH_STENCIL;if(n===RedFormat)return e.RED;if(n===RedIntegerFormat)return e.RED_INTEGER;if(n===RGFormat)return e.RG;if(n===RGIntegerFormat)return e.RG_INTEGER;if(n===RGBIntegerFormat)return e.RGB_INTEGER;if(n===RGBAIntegerFormat)return e.RGBA_INTEGER;if(n===RGB_S3TC_DXT1_Format||n===RGBA_S3TC_DXT1_Format||n===RGBA_S3TC_DXT3_Format||n===RGBA_S3TC_DXT5_Format){if(r=t.get("WEBGL_compressed_texture_s3tc"),null===r)return null;if(n===RGB_S3TC_DXT1_Format)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===RGBA_S3TC_DXT1_Format)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===RGBA_S3TC_DXT3_Format)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===RGBA_S3TC_DXT5_Format)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(n===RGB_PVRTC_4BPPV1_Format||n===RGB_PVRTC_2BPPV1_Format||n===RGBA_PVRTC_4BPPV1_Format||n===RGBA_PVRTC_2BPPV1_Format){if(r=t.get("WEBGL_compressed_texture_pvrtc"),null===r)return null;if(n===RGB_PVRTC_4BPPV1_Format)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===RGB_PVRTC_2BPPV1_Format)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===RGBA_PVRTC_4BPPV1_Format)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===RGBA_PVRTC_2BPPV1_Format)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===RGB_ETC1_Format)return r=t.get("WEBGL_compressed_texture_etc1"),null!==r?r.COMPRESSED_RGB_ETC1_WEBGL:null;if((n===RGB_ETC2_Format||n===RGBA_ETC2_EAC_Format)&&(r=t.get("WEBGL_compressed_texture_etc"),null!==r)){if(n===RGB_ETC2_Format)return r.COMPRESSED_RGB8_ETC2;if(n===RGBA_ETC2_EAC_Format)return r.COMPRESSED_RGBA8_ETC2_EAC}return n===RGBA_ASTC_4x4_Format||n===RGBA_ASTC_5x4_Format||n===RGBA_ASTC_5x5_Format||n===RGBA_ASTC_6x5_Format||n===RGBA_ASTC_6x6_Format||n===RGBA_ASTC_8x5_Format||n===RGBA_ASTC_8x6_Format||n===RGBA_ASTC_8x8_Format||n===RGBA_ASTC_10x5_Format||n===RGBA_ASTC_10x6_Format||n===RGBA_ASTC_10x8_Format||n===RGBA_ASTC_10x10_Format||n===RGBA_ASTC_12x10_Format||n===RGBA_ASTC_12x12_Format||n===SRGB8_ALPHA8_ASTC_4x4_Format||n===SRGB8_ALPHA8_ASTC_5x4_Format||n===SRGB8_ALPHA8_ASTC_5x5_Format||n===SRGB8_ALPHA8_ASTC_6x5_Format||n===SRGB8_ALPHA8_ASTC_6x6_Format||n===SRGB8_ALPHA8_ASTC_8x5_Format||n===SRGB8_ALPHA8_ASTC_8x6_Format||n===SRGB8_ALPHA8_ASTC_8x8_Format||n===SRGB8_ALPHA8_ASTC_10x5_Format||n===SRGB8_ALPHA8_ASTC_10x6_Format||n===SRGB8_ALPHA8_ASTC_10x8_Format||n===SRGB8_ALPHA8_ASTC_10x10_Format||n===SRGB8_ALPHA8_ASTC_12x10_Format||n===SRGB8_ALPHA8_ASTC_12x12_Format?(r=t.get("WEBGL_compressed_texture_astc"),null!==r?n:null):n===RGBA_BPTC_Format?(r=t.get("EXT_texture_compression_bptc"),null!==r?n:null):n===UnsignedInt248Type?i?e.UNSIGNED_INT_24_8:(r=t.get("WEBGL_depth_texture"),null!==r?r.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}function WebGLAttributes(e,t){const n=t.isWebGL2,i=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),i.get(e)},remove:function(t){t.isInterleavedBufferAttribute&&(t=t.data);const n=i.get(t);n&&(e.deleteBuffer(n.buffer),i.delete(t))},update:function(t,r){if(t.isGLBufferAttribute){const e=i.get(t);return void((!e||e.version<t.version)&&i.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version}))}t.isInterleavedBufferAttribute&&(t=t.data);const a=i.get(t);void 0===a?i.set(t,function(t,i){const r=t.array,a=t.usage,o=e.createBuffer();e.bindBuffer(i,o),e.bufferData(i,r,a),t.onUploadCallback();let s=e.FLOAT;return r instanceof Float32Array?s=e.FLOAT:r instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):r instanceof Uint16Array?t.isFloat16BufferAttribute?n?s=e.HALF_FLOAT:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):s=e.UNSIGNED_SHORT:r instanceof Int16Array?s=e.SHORT:r instanceof Uint32Array?s=e.UNSIGNED_INT:r instanceof Int32Array?s=e.INT:r instanceof Int8Array?s=e.BYTE:r instanceof Uint8Array&&(s=e.UNSIGNED_BYTE),{buffer:o,type:s,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version}}(t,r)):a.version<t.version&&(!function(t,i,r){const a=i.array,o=i.updateRange;e.bindBuffer(r,t),-1===o.count?e.bufferSubData(r,0,a):(n?e.bufferSubData(r,o.offset*a.BYTES_PER_ELEMENT,a,o.offset,o.count):e.bufferSubData(r,o.offset*a.BYTES_PER_ELEMENT,a.subarray(o.offset,o.offset+o.count)),o.count=-1)}(a.buffer,t,r),a.version=t.version)}}}const UniformsLib={common:{diffuse:{value:new Color_js.Color(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Matrix3_js.Matrix3},uv2Transform:{value:new Matrix3_js.Matrix3},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2_js.Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Color_js.Color(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color_js.Color(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3_js.Matrix3}},sprite:{diffuse:{value:new Color_js.Color(15658734)},opacity:{value:1},center:{value:new Vector2_js.Vector2(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3_js.Matrix3}}};function UniformsCache(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new Vector3_js.Vector3,color:new Color_js.Color};break;case"SpotLight":n={position:new Vector3_js.Vector3,direction:new Vector3_js.Vector3,color:new Color_js.Color,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new Vector3_js.Vector3,color:new Color_js.Color,distance:0,decay:0};break;case"HemisphereLight":n={direction:new Vector3_js.Vector3,skyColor:new Color_js.Color,groundColor:new Color_js.Color};break;case"RectAreaLight":n={color:new Color_js.Color,position:new Vector3_js.Vector3,halfWidth:new Vector3_js.Vector3,halfHeight:new Vector3_js.Vector3}}return e[t.id]=n,n}}}function ShadowUniformsCache(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2_js.Vector2};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2_js.Vector2,shadowCameraNear:1,shadowCameraFar:1e3}}return e[t.id]=n,n}}}let nextVersion=0;function shadowCastingLightsFirst(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function WebGLLights(e,t){const n=new UniformsCache,i=ShadowUniformsCache(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let e=0;e<9;e++)r.probe.push(new Vector3_js.Vector3);const a=new Vector3_js.Vector3,o=new Matrix4_js.Matrix4,s=new Matrix4_js.Matrix4;return{setup:function(a){let o=0,s=0,l=0;for(let e=0;e<9;e++)r.probe[e].set(0,0,0);let c=0,d=0,u=0,h=0,p=0,f=0,m=0,g=0;a.sort(shadowCastingLightsFirst);for(let e=0,t=a.length;e<t;e++){const t=a[e],_=t.color,v=t.intensity,x=t.distance,T=t.shadow&&t.shadow.map?t.shadow.map.texture:null;if(t.isAmbientLight)o+=_.r*v,s+=_.g*v,l+=_.b*v;else if(t.isLightProbe)for(let e=0;e<9;e++)r.probe[e].addScaledVector(t.sh.coefficients[e],v);else if(t.isDirectionalLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity),t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,r.directionalShadow[c]=n,r.directionalShadowMap[c]=T,r.directionalShadowMatrix[c]=t.shadow.matrix,f++}r.directional[c]=e,c++}else if(t.isSpotLight){const e=n.get(t);if(e.position.setFromMatrixPosition(t.matrixWorld),e.color.copy(_).multiplyScalar(v),e.distance=x,e.coneCos=Math.cos(t.angle),e.penumbraCos=Math.cos(t.angle*(1-t.penumbra)),e.decay=t.decay,t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,r.spotShadow[u]=n,r.spotShadowMap[u]=T,r.spotShadowMatrix[u]=t.shadow.matrix,g++}r.spot[u]=e,u++}else if(t.isRectAreaLight){const e=n.get(t);e.color.copy(_).multiplyScalar(v),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),r.rectArea[h]=e,h++}else if(t.isPointLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity),e.distance=t.distance,e.decay=t.decay,t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,n.shadowCameraNear=e.camera.near,n.shadowCameraFar=e.camera.far,r.pointShadow[d]=n,r.pointShadowMap[d]=T,r.pointShadowMatrix[d]=t.shadow.matrix,m++}r.point[d]=e,d++}else if(t.isHemisphereLight){const e=n.get(t);e.skyColor.copy(t.color).multiplyScalar(v),e.groundColor.copy(t.groundColor).multiplyScalar(v),r.hemi[p]=e,p++}}h>0&&(t.isWebGL2||!0===e.has("OES_texture_float_linear")?(r.rectAreaLTC1=UniformsLib.LTC_FLOAT_1,r.rectAreaLTC2=UniformsLib.LTC_FLOAT_2):!0===e.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=UniformsLib.LTC_HALF_1,r.rectAreaLTC2=UniformsLib.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=s,r.ambient[2]=l;const _=r.hash;_.directionalLength===c&&_.pointLength===d&&_.spotLength===u&&_.rectAreaLength===h&&_.hemiLength===p&&_.numDirectionalShadows===f&&_.numPointShadows===m&&_.numSpotShadows===g||(r.directional.length=c,r.spot.length=u,r.rectArea.length=h,r.point.length=d,r.hemi.length=p,r.directionalShadow.length=f,r.directionalShadowMap.length=f,r.pointShadow.length=m,r.pointShadowMap.length=m,r.spotShadow.length=g,r.spotShadowMap.length=g,r.directionalShadowMatrix.length=f,r.pointShadowMatrix.length=m,r.spotShadowMatrix.length=g,_.directionalLength=c,_.pointLength=d,_.spotLength=u,_.rectAreaLength=h,_.hemiLength=p,_.numDirectionalShadows=f,_.numPointShadows=m,_.numSpotShadows=g,r.version=nextVersion++)},setupView:function(e,t){let n=0,i=0,l=0,c=0,d=0;const u=t.matrixWorldInverse;for(let t=0,h=e.length;t<h;t++){const h=e[t];if(h.isDirectionalLight){const e=r.directional[n];e.direction.setFromMatrixPosition(h.matrixWorld),a.setFromMatrixPosition(h.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(u),n++}else if(h.isSpotLight){const e=r.spot[l];e.position.setFromMatrixPosition(h.matrixWorld),e.position.applyMatrix4(u),e.direction.setFromMatrixPosition(h.matrixWorld),a.setFromMatrixPosition(h.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(u),l++}else if(h.isRectAreaLight){const e=r.rectArea[c];e.position.setFromMatrixPosition(h.matrixWorld),e.position.applyMatrix4(u),s.identity(),o.copy(h.matrixWorld),o.premultiply(u),s.extractRotation(o),e.halfWidth.set(.5*h.width,0,0),e.halfHeight.set(0,.5*h.height,0),e.halfWidth.applyMatrix4(s),e.halfHeight.applyMatrix4(s),c++}else if(h.isPointLight){const e=r.point[i];e.position.setFromMatrixPosition(h.matrixWorld),e.position.applyMatrix4(u),i++}else if(h.isHemisphereLight){const e=r.hemi[d];e.direction.setFromMatrixPosition(h.matrixWorld),e.direction.transformDirection(u),e.direction.normalize(),d++}}},state:r}}function WebGLRenderState(e,t){const n=new WebGLLights(e,t),i=[],r=[];return{init:function(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function(){n.setup(i)},setupLightsView:function(e){n.setupView(i,e)},pushLight:function(e){i.push(e)},pushShadow:function(e){r.push(e)}}}function WebGLRenderStates(e,t){let n=new WeakMap;return{get:function(i,r=0){let a;return!1===n.has(i)?(a=new WebGLRenderState(e,t),n.set(i,[]),n.get(i).push(a)):r>=n.get(i).length?(a=new WebGLRenderState(e,t),n.get(i).push(a)):a=n.get(i)[r],a},dispose:function(){n=new WeakMap}}}const emptyTexture=new Texture_js.Texture,emptyTexture2dArray=new DataTexture2DArray_js.DataTexture2DArray,emptyTexture3d=new DataTexture3D_js.DataTexture3D,emptyCubeTexture=new CubeTexture_js.CubeTexture,arrayCacheF32=[],arrayCacheI32=[],mat4array=new Float32Array(16),mat3array=new Float32Array(9),mat2array=new Float32Array(4);function flatten(e,t,n){const i=e[0];if(i<=0||i>0)return e;const r=t*n;let a=arrayCacheF32[r];if(void 0===a&&(a=new Float32Array(r),arrayCacheF32[r]=a),0!==t){i.toArray(a,0);for(let i=1,r=0;i!==t;++i)r+=n,e[i].toArray(a,r)}return a}function arraysEqual(e,t){if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}function copyArray(e,t){for(let n=0,i=t.length;n<i;n++)e[n]=t[n]}function allocTexUnits(e,t){let n=arrayCacheI32[t];void 0===n&&(n=new Int32Array(t),arrayCacheI32[t]=n);for(let i=0;i!==t;++i)n[i]=e.allocateTextureUnit();return n}function setValueV1f(e,t){const n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function setValueV2f(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(arraysEqual(n,t))return;e.uniform2fv(this.addr,t),copyArray(n,t)}}function setValueV3f(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(arraysEqual(n,t))return;e.uniform3fv(this.addr,t),copyArray(n,t)}}function setValueV4f(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(arraysEqual(n,t))return;e.uniform4fv(this.addr,t),copyArray(n,t)}}function setValueM2(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(arraysEqual(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),copyArray(n,t)}else{if(arraysEqual(n,i))return;mat2array.set(i),e.uniformMatrix2fv(this.addr,!1,mat2array),copyArray(n,i)}}function setValueM3(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(arraysEqual(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),copyArray(n,t)}else{if(arraysEqual(n,i))return;mat3array.set(i),e.uniformMatrix3fv(this.addr,!1,mat3array),copyArray(n,i)}}function setValueM4(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(arraysEqual(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),copyArray(n,t)}else{if(arraysEqual(n,i))return;mat4array.set(i),e.uniformMatrix4fv(this.addr,!1,mat4array),copyArray(n,i)}}function setValueT1(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.safeSetTexture2D(t||emptyTexture,r)}function setValueT2DArray1(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(t||emptyTexture2dArray,r)}function setValueT3D1(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(t||emptyTexture3d,r)}function setValueT6(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.safeSetTextureCube(t||emptyCubeTexture,r)}function setValueV1i(e,t){const n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function setValueV2i(e,t){const n=this.cache;arraysEqual(n,t)||(e.uniform2iv(this.addr,t),copyArray(n,t))}function setValueV3i(e,t){const n=this.cache;arraysEqual(n,t)||(e.uniform3iv(this.addr,t),copyArray(n,t))}function setValueV4i(e,t){const n=this.cache;arraysEqual(n,t)||(e.uniform4iv(this.addr,t),copyArray(n,t))}function setValueV1ui(e,t){const n=this.cache;n[0]!==t&&(e.uniform1ui(this.addr,t),n[0]=t)}function getSingularSetter(e){switch(e){case 5126:return setValueV1f;case 35664:return setValueV2f;case 35665:return setValueV3f;case 35666:return setValueV4f;case 35674:return setValueM2;case 35675:return setValueM3;case 35676:return setValueM4;case 5124:case 35670:return setValueV1i;case 35667:case 35671:return setValueV2i;case 35668:case 35672:return setValueV3i;case 35669:case 35673:return setValueV4i;case 5125:return setValueV1ui;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1;case 35679:case 36299:case 36307:return setValueT3D1;case 35680:case 36300:case 36308:case 36293:return setValueT6;case 36289:case 36303:case 36311:case 36292:return setValueT2DArray1}}function setValueV1fArray(e,t){e.uniform1fv(this.addr,t)}function setValueV1iArray(e,t){e.uniform1iv(this.addr,t)}function setValueV2iArray(e,t){e.uniform2iv(this.addr,t)}function setValueV3iArray(e,t){e.uniform3iv(this.addr,t)}function setValueV4iArray(e,t){e.uniform4iv(this.addr,t)}function setValueV2fArray(e,t){const n=flatten(t,this.size,2);e.uniform2fv(this.addr,n)}function setValueV3fArray(e,t){const n=flatten(t,this.size,3);e.uniform3fv(this.addr,n)}function setValueV4fArray(e,t){const n=flatten(t,this.size,4);e.uniform4fv(this.addr,n)}function setValueM2Array(e,t){const n=flatten(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function setValueM3Array(e,t){const n=flatten(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function setValueM4Array(e,t){const n=flatten(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function setValueT1Array(e,t,n){const i=t.length,r=allocTexUnits(n,i);e.uniform1iv(this.addr,r);for(let e=0;e!==i;++e)n.safeSetTexture2D(t[e]||emptyTexture,r[e])}function setValueT6Array(e,t,n){const i=t.length,r=allocTexUnits(n,i);e.uniform1iv(this.addr,r);for(let e=0;e!==i;++e)n.safeSetTextureCube(t[e]||emptyCubeTexture,r[e])}function getPureArraySetter(e){switch(e){case 5126:return setValueV1fArray;case 35664:return setValueV2fArray;case 35665:return setValueV3fArray;case 35666:return setValueV4fArray;case 35674:return setValueM2Array;case 35675:return setValueM3Array;case 35676:return setValueM4Array;case 5124:case 35670:return setValueV1iArray;case 35667:case 35671:return setValueV2iArray;case 35668:case 35672:return setValueV3iArray;case 35669:case 35673:return setValueV4iArray;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1Array;case 35680:case 36300:case 36308:case 36293:return setValueT6Array}}function SingleUniform(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=getSingularSetter(t.type)}function PureArrayUniform(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=getPureArraySetter(t.type)}function StructuredUniform(e){this.id=e,this.seq=[],this.map={}}PureArrayUniform.prototype.updateCache=function(e){const t=this.cache;e instanceof Float32Array&&t.length!==e.length&&(this.cache=new Float32Array(e.length)),copyArray(t,e)},StructuredUniform.prototype.setValue=function(e,t,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const a=i[r];a.setValue(e,t[a.id],n)}};const RePathPart=/(\w+)(\])?(\[|\.)?/g;function addUniform(e,t){e.seq.push(t),e.map[t.id]=t}function parseUniform(e,t,n){const i=e.name,r=i.length;for(RePathPart.lastIndex=0;;){const a=RePathPart.exec(i),o=RePathPart.lastIndex;let s=a[1];const l="]"===a[2],c=a[3];if(l&&(s|=0),void 0===c||"["===c&&o+2===r){addUniform(n,void 0===c?new SingleUniform(s,e,t):new PureArrayUniform(s,e,t));break}{let e=n.map[s];void 0===e&&(e=new StructuredUniform(s),addUniform(n,e)),n=e}}}function WebGLUniforms(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=e.getActiveUniform(t,i);parseUniform(n,e.getUniformLocation(t,n.name),this)}}function WebGLInfo(e){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(n,i,r){switch(t.calls++,i){case e.TRIANGLES:t.triangles+=r*(n/3);break;case e.LINES:t.lines+=r*(n/2);break;case e.LINE_STRIP:t.lines+=r*(n-1);break;case e.LINE_LOOP:t.lines+=r*n;break;case e.POINTS:t.points+=r*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function WebGLState(e,t,n){const i=n.isWebGL2;const r=new function(){let t=!1;const n=new Vector4_js.Vector4;let i=null;const r=new Vector4_js.Vector4(0,0,0,0);return{setMask:function(n){i===n||t||(e.colorMask(n,n,n,n),i=n)},setLocked:function(e){t=e},setClear:function(t,i,a,o,s){!0===s&&(t*=o,i*=o,a*=o),n.set(t,i,a,o),!1===r.equals(n)&&(e.clearColor(t,i,a,o),r.copy(n))},reset:function(){t=!1,i=null,r.set(-1,0,0,0)}}},a=new function(){let t=!1,n=null,i=null,r=null;return{setTest:function(t){t?N(e.DEPTH_TEST):D(e.DEPTH_TEST)},setMask:function(i){n===i||t||(e.depthMask(i),n=i)},setFunc:function(t){if(i!==t){if(t)switch(t){case NeverDepth:e.depthFunc(e.NEVER);break;case AlwaysDepth:e.depthFunc(e.ALWAYS);break;case LessDepth:e.depthFunc(e.LESS);break;case LessEqualDepth:e.depthFunc(e.LEQUAL);break;case EqualDepth:e.depthFunc(e.EQUAL);break;case GreaterEqualDepth:e.depthFunc(e.GEQUAL);break;case GreaterDepth:e.depthFunc(e.GREATER);break;case NotEqualDepth:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}else e.depthFunc(e.LEQUAL);i=t}},setLocked:function(e){t=e},setClear:function(t){r!==t&&(e.clearDepth(t),r=t)},reset:function(){t=!1,n=null,i=null,r=null}}},o=new function(){let t=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,c=null;return{setTest:function(n){t||(n?N(e.STENCIL_TEST):D(e.STENCIL_TEST))},setMask:function(i){n===i||t||(e.stencilMask(i),n=i)},setFunc:function(t,n,o){i===t&&r===n&&a===o||(e.stencilFunc(t,n,o),i=t,r=n,a=o)},setOp:function(t,n,i){o===t&&s===n&&l===i||(e.stencilOp(t,n,i),o=t,s=n,l=i)},setLocked:function(e){t=e},setClear:function(t){c!==t&&(e.clearStencil(t),c=t)},reset:function(){t=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,c=null}}};let s={},l=null,c=null,d=null,u=null,h=null,p=null,f=null,m=null,g=null,_=!1,v=null,x=null,T=null,A=null,S=null;const b=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let E=!1,L=0;const M=e.getParameter(e.VERSION);-1!==M.indexOf("WebGL")?(L=parseFloat(/^WebGL (\d)/.exec(M)[1]),E=L>=1):-1!==M.indexOf("OpenGL ES")&&(L=parseFloat(/^OpenGL ES (\d)/.exec(M)[1]),E=L>=2);let P=null,y={};const w=new Vector4_js.Vector4,F=new Vector4_js.Vector4;function R(t,n,i){const r=new Uint8Array(4),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let t=0;t<i;t++)e.texImage2D(n+t,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,r);return a}const C={};function N(t){!0!==s[t]&&(e.enable(t),s[t]=!0)}function D(t){!1!==s[t]&&(e.disable(t),s[t]=!1)}C[e.TEXTURE_2D]=R(e.TEXTURE_2D,e.TEXTURE_2D,1),C[e.TEXTURE_CUBE_MAP]=R(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),r.setClear(0,0,0,1),a.setClear(1),o.setClear(0),N(e.DEPTH_TEST),a.setFunc(LessEqualDepth),B(!1),G(CullFaceBack),N(e.CULL_FACE),O(NoBlending);const I={[AddEquation]:e.FUNC_ADD,[SubtractEquation]:e.FUNC_SUBTRACT,[ReverseSubtractEquation]:e.FUNC_REVERSE_SUBTRACT};if(i)I[MinEquation]=e.MIN,I[MaxEquation]=e.MAX;else{const e=t.get("EXT_blend_minmax");null!==e&&(I[MinEquation]=e.MIN_EXT,I[MaxEquation]=e.MAX_EXT)}const U={[ZeroFactor]:e.ZERO,[OneFactor]:e.ONE,[SrcColorFactor]:e.SRC_COLOR,[SrcAlphaFactor]:e.SRC_ALPHA,[SrcAlphaSaturateFactor]:e.SRC_ALPHA_SATURATE,[DstColorFactor]:e.DST_COLOR,[DstAlphaFactor]:e.DST_ALPHA,[OneMinusSrcColorFactor]:e.ONE_MINUS_SRC_COLOR,[OneMinusSrcAlphaFactor]:e.ONE_MINUS_SRC_ALPHA,[OneMinusDstColorFactor]:e.ONE_MINUS_DST_COLOR,[OneMinusDstAlphaFactor]:e.ONE_MINUS_DST_ALPHA};function O(t,n,i,r,a,o,s,l){if(t!==NoBlending){if(c||(N(e.BLEND),c=!0),t===CustomBlending)a=a||n,o=o||i,s=s||r,n===u&&a===f||(e.blendEquationSeparate(I[n],I[a]),u=n,f=a),i===h&&r===p&&o===m&&s===g||(e.blendFuncSeparate(U[i],U[r],U[o],U[s]),h=i,p=r,m=o,g=s),d=t,_=null;else if(t!==d||l!==_){if(u===AddEquation&&f===AddEquation||(e.blendEquation(e.FUNC_ADD),u=AddEquation,f=AddEquation),l)switch(t){case NormalBlending:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:e.blendFunc(e.ONE,e.ONE);break;case SubtractiveBlending:e.blendFuncSeparate(e.ZERO,e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ONE_MINUS_SRC_ALPHA);break;case MultiplyBlending:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case NormalBlending:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case SubtractiveBlending:e.blendFunc(e.ZERO,e.ONE_MINUS_SRC_COLOR);break;case MultiplyBlending:e.blendFunc(e.ZERO,e.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}h=null,p=null,m=null,g=null,d=t,_=l}}else c&&(D(e.BLEND),c=!1)}function B(t){v!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),v=t)}function G(t){t!==CullFaceNone?(N(e.CULL_FACE),t!==x&&(t===CullFaceBack?e.cullFace(e.BACK):t===CullFaceFront?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):D(e.CULL_FACE),x=t}function V(t,n,i){t?(N(e.POLYGON_OFFSET_FILL),A===n&&S===i||(e.polygonOffset(n,i),A=n,S=i)):D(e.POLYGON_OFFSET_FILL)}function k(t){void 0===t&&(t=e.TEXTURE0+b-1),P!==t&&(e.activeTexture(t),P=t)}return{buffers:{color:r,depth:a,stencil:o},enable:N,disable:D,useProgram:function(t){return l!==t&&(e.useProgram(t),l=t,!0)},setBlending:O,setMaterial:function(t,n){t.side===DoubleSide?D(e.CULL_FACE):N(e.CULL_FACE);let i=t.side===BackSide;n&&(i=!i),B(i),t.blending===NormalBlending&&!1===t.transparent?O(NoBlending):O(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),r.setMask(t.colorWrite);const s=t.stencilWrite;o.setTest(s),s&&(o.setMask(t.stencilWriteMask),o.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),o.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),V(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)},setFlipSided:B,setCullFace:G,setLineWidth:function(t){t!==T&&(E&&e.lineWidth(t),T=t)},setPolygonOffset:V,setScissorTest:function(t){t?N(e.SCISSOR_TEST):D(e.SCISSOR_TEST)},activeTexture:k,bindTexture:function(t,n){null===P&&k();let i=y[P];void 0===i&&(i={type:void 0,texture:void 0},y[P]=i),i.type===t&&i.texture===n||(e.bindTexture(t,n||C[t]),i.type=t,i.texture=n)},unbindTexture:function(){const t=y[P];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===w.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),w.copy(t))},viewport:function(t){!1===F.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),F.copy(t))},reset:function(){s={},P=null,y={},l=null,c=null,d=null,u=null,h=null,p=null,f=null,m=null,g=null,_=!1,v=null,x=null,T=null,A=null,S=null,r.reset(),a.reset(),o.reset()}}}function WebGLObjects(e,t,n,i){let r=new WeakMap;function a(e){const t=e.target;t.removeEventListener("dispose",a),n.remove(t.instanceMatrix),null!==t.instanceColor&&n.remove(t.instanceColor)}return{update:function(o){const s=i.render.frame,l=o.geometry,c=t.get(o,l);return r.get(c)!==s&&(t.update(c),r.set(c,s)),o.isInstancedMesh&&(!1===o.hasEventListener("dispose",a)&&o.addEventListener("dispose",a),n.update(o.instanceMatrix,e.ARRAY_BUFFER),null!==o.instanceColor&&n.update(o.instanceColor,e.ARRAY_BUFFER)),c},dispose:function(){r=new WeakMap}}}function WebGLClipping(e){const t=this;let n=null,i=0,r=!1,a=!1;const o=new Plane_js.Plane,s=new Matrix3_js.Matrix3,l={value:null,needsUpdate:!1};function c(){l.value!==n&&(l.value=n,l.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function d(e,n,i,r){const a=null!==e?e.length:0;let c=null;if(0!==a){if(c=l.value,!0!==r||null===c){const t=i+4*a,r=n.matrixWorldInverse;s.getNormalMatrix(r),(null===c||c.length<t)&&(c=new Float32Array(t));for(let t=0,n=i;t!==a;++t,n+=4)o.copy(e[t]).applyMatrix4(r,s),o.normal.toArray(c,n),c[n+3]=o.constant}l.value=c,l.needsUpdate=!0}return t.numPlanes=a,t.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t,a){const o=0!==e.length||t||0!==i||r;return r=t,n=d(e,a,0),i=e.length,o},this.beginShadows=function(){a=!0,d(null)},this.endShadows=function(){a=!1,c()},this.setState=function(t,o,s){const u=t.clippingPlanes,h=t.clipIntersection,p=t.clipShadows,f=e.get(t);if(!r||null===u||0===u.length||a&&!p)a?d(null):c();else{const e=a?0:i,t=4*e;let r=f.clippingState||null;l.value=r,r=d(u,o,t,s);for(let e=0;e!==t;++e)r[e]=n[e];f.clippingState=r,this.numIntersection=h?this.numPlanes:0,this.numPlanes+=e}}}function cloneUniforms(e){const t={};for(const n in e){t[n]={};for(const i in e[n]){const r=e[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture)?t[n][i]=r.clone():Array.isArray(r)?t[n][i]=r.slice():t[n][i]=r}}return t}function mergeUniforms(e){const t={};for(let n=0;n<e.length;n++){const i=cloneUniforms(e[n]);for(const e in i)t[e]=i[e]}return t}WebGLUniforms.prototype.setValue=function(e,t,n,i){const r=this.map[t];void 0!==r&&r.setValue(e,n,i)},WebGLUniforms.prototype.setOptional=function(e,t,n){const i=t[n];void 0!==i&&this.setValue(e,n,i)},WebGLUniforms.upload=function(e,t,n,i){for(let r=0,a=t.length;r!==a;++r){const a=t[r],o=n[a.id];!1!==o.needsUpdate&&a.setValue(e,o.value,i)}},WebGLUniforms.seqWithValue=function(e,t){const n=[];for(let i=0,r=e.length;i!==r;++i){const r=e[i];r.id in t&&n.push(r)}return n};class WebGLRenderTarget extends EventDispatcher_js.EventDispatcher{constructor(e,t,n){super(),Object.defineProperty(this,"isWebGLRenderTarget",{value:!0}),this.width=e,this.height=t,this.scissor=new Vector4_js.Vector4(0,0,e,t),this.scissorTest=!1,this.viewport=new Vector4_js.Vector4(0,0,e,t),n=n||{},this.texture=new Texture_js.Texture(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.image={},this.texture.image.width=e,this.texture.image.height=t,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:LinearFilter,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}setSize(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.texture.image.width=e,this.texture.image.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return(new this.constructor).copy(this)}copy(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}class WebGLCubeRenderTarget extends WebGLRenderTarget{constructor(e,t,n){Number.isInteger(t)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),t=n),super(e,e,t),Object.defineProperty(this,"isWebGLCubeRenderTarget",{value:!0}),t=t||{},this.texture=new CubeTexture_js.CubeTexture(void 0,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.format=RGBAFormat,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},i=new BoxGeometry_js.BoxGeometry(5,5,5),r=new ShaderMaterial_js.ShaderMaterial({name:"CubemapFromEquirect",uniforms:cloneUniforms(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:BackSide,blending:NoBlending});r.uniforms.tEquirect.value=t;const a=new Mesh_js.Mesh(i,r),o=t.minFilter;t.minFilter===LinearMipmapLinearFilter&&(t.minFilter=LinearFilter);return new CubeCamera_js.CubeCamera(1,10,this).update(e,a),t.minFilter=o,a.geometry.dispose(),a.material.dispose(),this}clear(e,t,n,i){const r=e.getRenderTarget();for(let r=0;r<6;r++)e.setRenderTarget(this,r),e.clear(t,n,i);e.setRenderTarget(r)}}function WebGLCubeMaps(e){let t=new WeakMap;function n(e,t){return t===EquirectangularReflectionMapping?e.mapping=CubeReflectionMapping:t===EquirectangularRefractionMapping&&(e.mapping=CubeRefractionMapping),e}function i(e){const n=e.target;n.removeEventListener("dispose",i);const r=t.get(n);void 0!==r&&(t.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const a=r.mapping;if(a===EquirectangularReflectionMapping||a===EquirectangularRefractionMapping){if(t.has(r)){return n(t.get(r).texture,r.mapping)}{const a=r.image;if(a&&a.height>0){const o=e.getRenderList(),s=e.getRenderTarget(),l=new WebGLCubeRenderTarget(a.height/2);return l.fromEquirectangularTexture(e,r),t.set(r,l),e.setRenderTarget(s),e.setRenderList(o),r.addEventListener("dispose",i),n(l.texture,r.mapping)}return null}}}return r},dispose:function(){t=new WeakMap}}}function numericalSort(e,t){return e[0]-t[0]}function absNumericalSort(e,t){return Math.abs(t[1])-Math.abs(e[1])}function WebGLMorphtargets(e){const t={},n=new Float32Array(8),i=[];for(let e=0;e<8;e++)i[e]=[e,0];return{update:function(r,a,o,s){const l=r.morphTargetInfluences,c=void 0===l?0:l.length;let d=t[a.id];if(void 0===d){d=[];for(let e=0;e<c;e++)d[e]=[e,0];t[a.id]=d}for(let e=0;e<c;e++){const t=d[e];t[0]=e,t[1]=l[e]}d.sort(absNumericalSort);for(let e=0;e<8;e++)e<c&&d[e][1]?(i[e][0]=d[e][0],i[e][1]=d[e][1]):(i[e][0]=Number.MAX_SAFE_INTEGER,i[e][1]=0);i.sort(numericalSort);const u=o.morphTargets&&a.morphAttributes.position,h=o.morphNormals&&a.morphAttributes.normal;let p=0;for(let e=0;e<8;e++){const t=i[e],r=t[0],o=t[1];r!==Number.MAX_SAFE_INTEGER&&o?(u&&a.getAttribute("morphTarget"+e)!==u[r]&&a.setAttribute("morphTarget"+e,u[r]),h&&a.getAttribute("morphNormal"+e)!==h[r]&&a.setAttribute("morphNormal"+e,h[r]),n[e]=o,p+=o):(u&&!0===a.hasAttribute("morphTarget"+e)&&a.deleteAttribute("morphTarget"+e),h&&!0===a.hasAttribute("morphNormal"+e)&&a.deleteAttribute("morphNormal"+e),n[e]=0)}const f=a.morphTargetsRelative?1:1-p;s.getUniforms().setValue(e,"morphTargetBaseInfluence",f),s.getUniforms().setValue(e,"morphTargetInfluences",n)}}}function WebGLMaterials(e){function t(t,n){t.opacity.value=n.opacity,n.color&&t.diffuse.value.copy(n.color),n.emissive&&t.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(t.map.value=n.map),n.alphaMap&&(t.alphaMap.value=n.alphaMap),n.specularMap&&(t.specularMap.value=n.specularMap);const i=e.get(n).envMap;if(i){t.envMap.value=i,t.flipEnvMap.value=i.isCubeTexture&&i._needsFlipEnvMap?-1:1,t.reflectivity.value=n.reflectivity,t.refractionRatio.value=n.refractionRatio;const r=e.get(i).__maxMipLevel;void 0!==r&&(t.maxMipLevel.value=r)}let r,a;n.lightMap&&(t.lightMap.value=n.lightMap,t.lightMapIntensity.value=n.lightMapIntensity),n.aoMap&&(t.aoMap.value=n.aoMap,t.aoMapIntensity.value=n.aoMapIntensity),n.map?r=n.map:n.specularMap?r=n.specularMap:n.displacementMap?r=n.displacementMap:n.normalMap?r=n.normalMap:n.bumpMap?r=n.bumpMap:n.roughnessMap?r=n.roughnessMap:n.metalnessMap?r=n.metalnessMap:n.alphaMap?r=n.alphaMap:n.emissiveMap?r=n.emissiveMap:n.clearcoatMap?r=n.clearcoatMap:n.clearcoatNormalMap?r=n.clearcoatNormalMap:n.clearcoatRoughnessMap&&(r=n.clearcoatRoughnessMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix)),n.aoMap?a=n.aoMap:n.lightMap&&(a=n.lightMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),t.uv2Transform.value.copy(a.matrix))}function n(t,n){t.roughness.value=n.roughness,t.metalness.value=n.metalness,n.roughnessMap&&(t.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(t.metalnessMap.value=n.metalnessMap),n.emissiveMap&&(t.emissiveMap.value=n.emissiveMap),n.bumpMap&&(t.bumpMap.value=n.bumpMap,t.bumpScale.value=n.bumpScale,n.side===BackSide&&(t.bumpScale.value*=-1)),n.normalMap&&(t.normalMap.value=n.normalMap,t.normalScale.value.copy(n.normalScale),n.side===BackSide&&t.normalScale.value.negate()),n.displacementMap&&(t.displacementMap.value=n.displacementMap,t.displacementScale.value=n.displacementScale,t.displacementBias.value=n.displacementBias);e.get(n).envMap&&(t.envMapIntensity.value=n.envMapIntensity)}return{refreshFogUniforms:function(e,t){e.fogColor.value.copy(t.color),t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)},refreshMaterialUniforms:function(e,i,r,a){i.isMeshBasicMaterial?t(e,i):i.isMeshLambertMaterial?(t(e,i),function(e,t){t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}(e,i)):i.isMeshToonMaterial?(t(e,i),function(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap);t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===BackSide&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===BackSide&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(e,i)):i.isMeshPhongMaterial?(t(e,i),function(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===BackSide&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===BackSide&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(e,i)):i.isMeshStandardMaterial?(t(e,i),i.isMeshPhysicalMaterial?function(e,t){n(e,t),e.reflectivity.value=t.reflectivity,e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.sheen&&e.sheen.value.copy(t.sheen);t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap);t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap);t.clearcoatNormalMap&&(e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),e.clearcoatNormalMap.value=t.clearcoatNormalMap,t.side===BackSide&&e.clearcoatNormalScale.value.negate());e.transmission.value=t.transmission,t.transmissionMap&&(e.transmissionMap.value=t.transmissionMap)}(e,i):n(e,i)):i.isMeshMatcapMaterial?(t(e,i),function(e,t){t.matcap&&(e.matcap.value=t.matcap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===BackSide&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===BackSide&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(e,i)):i.isMeshDepthMaterial?(t(e,i),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(e,i)):i.isMeshDistanceMaterial?(t(e,i),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias);e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}(e,i)):i.isMeshNormalMaterial?(t(e,i),function(e,t){t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,t.side===BackSide&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),t.side===BackSide&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(e,i)):i.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity}(e,i),i.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(e,i)):i.isPointsMaterial?function(e,t,n,i){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*n,e.scale.value=.5*i,t.map&&(e.map.value=t.map);t.alphaMap&&(e.alphaMap.value=t.alphaMap);let r;t.map?r=t.map:t.alphaMap&&(r=t.alphaMap);void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix))}(e,i,r,a):i.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map);t.alphaMap&&(e.alphaMap.value=t.alphaMap);let n;t.map?n=t.map:t.alphaMap&&(n=t.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}(e,i):i.isShadowMaterial?(e.color.value.copy(i.color),e.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)}}}var vsm_frag="\nuniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n\n#include <packing>\n\nvoid main() {\n\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\n\t// This seems totally useless but it's a crazy work around for a Adreno compiler bug\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\n\t\t#ifdef HORIZONTAL_PASS\n\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\n\t\t#else\n\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\n\t\t#endif\n\n\t}\n\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n\n}\n",vsm_vert="\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}\n";function WebGLShadowMap(e,t,n){let i=new Frustum_js.Frustum;const r=new Vector2_js.Vector2,a=new Vector2_js.Vector2,o=new Vector4_js.Vector4,s=[],l=[],c={},d={0:BackSide,1:FrontSide,2:DoubleSide},u=new ShaderMaterial_js.ShaderMaterial({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2_js.Vector2},radius:{value:4}},vertexShader:vsm_vert,fragmentShader:vsm_frag}),h=u.clone();h.defines.HORIZONTAL_PASS=1;const p=new BufferGeometry_js.BufferGeometry;p.setAttribute("position",new BufferAttribute_js.BufferAttribute(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const f=new Mesh_js.Mesh(p,u),m=this;function g(n,i){const r=t.update(f);u.uniforms.shadow_pass.value=n.map.texture,u.uniforms.resolution.value=n.mapSize,u.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(i,null,r,u,f,null),h.uniforms.shadow_pass.value=n.mapPass.texture,h.uniforms.resolution.value=n.mapSize,h.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(i,null,r,h,f,null)}function _(e,t,n){const i=e<<0|t<<1|n<<2;let r=s[i];return void 0===r&&(r=new MeshDepthMaterial_js.MeshDepthMaterial({depthPacking:RGBADepthPacking,morphTargets:e,skinning:t}),s[i]=r),r}function v(e,t,n){const i=e<<0|t<<1|n<<2;let r=l[i];return void 0===r&&(r=new MeshDistanceMaterial_js.MeshDistanceMaterial({morphTargets:e,skinning:t}),l[i]=r),r}function x(t,n,i,r,a,o,s){let l=null,u=_,h=t.customDepthMaterial;if(!0===r.isPointLight&&(u=v,h=t.customDistanceMaterial),void 0===h){let e=!1;!0===i.morphTargets&&(e=n.morphAttributes&&n.morphAttributes.position&&n.morphAttributes.position.length>0);let r=!1;!0===t.isSkinnedMesh&&(!0===i.skinning?r=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",t));l=u(e,r,!0===t.isInstancedMesh)}else l=h;if(e.localClippingEnabled&&!0===i.clipShadows&&0!==i.clippingPlanes.length){const e=l.uuid,t=i.uuid;let n=c[e];void 0===n&&(n={},c[e]=n);let r=n[t];void 0===r&&(r=l.clone(),n[t]=r),l=r}return l.visible=i.visible,l.wireframe=i.wireframe,l.side=s===VSMShadowMap?null!==i.shadowSide?i.shadowSide:i.side:null!==i.shadowSide?i.shadowSide:d[i.side],l.clipShadows=i.clipShadows,l.clippingPlanes=i.clippingPlanes,l.clipIntersection=i.clipIntersection,l.wireframeLinewidth=i.wireframeLinewidth,l.linewidth=i.linewidth,!0===r.isPointLight&&!0===l.isMeshDistanceMaterial&&(l.referencePosition.setFromMatrixPosition(r.matrixWorld),l.nearDistance=a,l.farDistance=o),l}function T(n,r,a,o,s){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&s===VSMShadowMap)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);const i=t.update(n),r=n.material;if(Array.isArray(r)){const t=i.groups;for(let l=0,c=t.length;l<c;l++){const c=t[l],d=r[c.materialIndex];if(d&&d.visible){const t=x(n,i,d,o,a.near,a.far,s);e.renderBufferDirect(a,null,i,t,n,c)}}}else if(r.visible){const t=x(n,i,r,o,a.near,a.far,s);e.renderBufferDirect(a,null,i,t,n,null)}}const l=n.children;for(let e=0,t=l.length;e<t;e++)T(l[e],r,a,o,s)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=PCFShadowMap,this.render=function(t,s,l){if(!1===m.enabled)return;if(!1===m.autoUpdate&&!1===m.needsUpdate)return;if(0===t.length)return;const c=e.getRenderTarget(),d=e.getActiveCubeFace(),u=e.getActiveMipmapLevel(),h=e.state;h.setBlending(NoBlending),h.buffers.color.setClear(1,1,1,1),h.buffers.depth.setTest(!0),h.setScissorTest(!1);for(let c=0,d=t.length;c<d;c++){const d=t[c],u=d.shadow;if(void 0===u){console.warn("THREE.WebGLShadowMap:",d,"has no shadow.");continue}if(!1===u.autoUpdate&&!1===u.needsUpdate)continue;r.copy(u.mapSize);const p=u.getFrameExtents();if(r.multiply(p),a.copy(u.mapSize),(r.x>n||r.y>n)&&(r.x>n&&(a.x=Math.floor(n/p.x),r.x=a.x*p.x,u.mapSize.x=a.x),r.y>n&&(a.y=Math.floor(n/p.y),r.y=a.y*p.y,u.mapSize.y=a.y)),null===u.map&&!u.isPointLightShadow&&this.type===VSMShadowMap){const e={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};u.map=new WebGLRenderTarget(r.x,r.y,e),u.map.texture.name=d.name+".shadowMap",u.mapPass=new WebGLRenderTarget(r.x,r.y,e),u.camera.updateProjectionMatrix()}if(null===u.map){const e={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};u.map=new WebGLRenderTarget(r.x,r.y,e),u.map.texture.name=d.name+".shadowMap",u.camera.updateProjectionMatrix()}e.setRenderTarget(u.map),e.clear();const f=u.getViewportCount();for(let e=0;e<f;e++){const t=u.getViewport(e);o.set(a.x*t.x,a.y*t.y,a.x*t.z,a.y*t.w),h.viewport(o),u.updateMatrices(d,e),i=u.getFrustum(),T(s,l,u.camera,d,this.type)}u.isPointLightShadow||this.type!==VSMShadowMap||g(u,l),u.needsUpdate=!1}m.needsUpdate=!1,e.setRenderTarget(c,d,u)}}function WebGLExtensions(e){const t={};function n(n){if(void 0!==t[n])return t[n];let i;switch(n){case"WEBGL_depth_texture":i=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=e.getExtension(n)}return t[n]=i,i}return{has:function(e){return null!==n(e)},init:function(e){e.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float")},get:function(e){const t=n(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function arrayMax(e){if(0===e.length)return-1/0;let t=e[0];for(let n=1,i=e.length;n<i;++n)e[n]>t&&(t=e[n]);return t}function WebGLGeometries(e,t,n,i){const r={},a=new WeakMap;function o(e){const s=e.target;null!==s.index&&t.remove(s.index);for(const e in s.attributes)t.remove(s.attributes[e]);s.removeEventListener("dispose",o),delete r[s.id];const l=a.get(s);l&&(t.remove(l),a.delete(s)),i.releaseStatesOfGeometry(s),!0===s.isInstancedBufferGeometry&&delete s._maxInstanceCount,n.memory.geometries--}function s(e){const n=[],i=e.index,r=e.attributes.position;let o=0;if(null!==i){const e=i.array;o=i.version;for(let t=0,i=e.length;t<i;t+=3){const i=e[t+0],r=e[t+1],a=e[t+2];n.push(i,r,r,a,a,i)}}else{const e=r.array;o=r.version;for(let t=0,i=e.length/3-1;t<i;t+=3){const e=t+0,i=t+1,r=t+2;n.push(e,i,i,r,r,e)}}const s=new(arrayMax(n)>65535?BufferAttribute_js.Uint32BufferAttribute:BufferAttribute_js.Uint16BufferAttribute)(n,1);s.version=o;const l=a.get(e);l&&t.remove(l),a.set(e,s)}return{get:function(e,t){return!0===r[t.id]||(t.addEventListener("dispose",o),r[t.id]=!0,n.memory.geometries++),t},update:function(n){const i=n.attributes;for(const n in i)t.update(i[n],e.ARRAY_BUFFER);const r=n.morphAttributes;for(const n in r){const i=r[n];for(let n=0,r=i.length;n<r;n++)t.update(i[n],e.ARRAY_BUFFER)}},getWireframeAttribute:function(e){const t=a.get(e);if(t){const n=e.index;null!==n&&t.version<n.version&&s(e)}else s(e);return a.get(e)}}}function WebGLProperties(){let e=new WeakMap;return{get:function(t){let n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t)},update:function(t,n,i){e.get(t)[n]=i},dispose:function(){e=new WeakMap}}}function painterSortStable(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function reversePainterSortStable(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function WebGLRenderList(e){const t=[];let n=0;const i=[],r=[],a={id:-1};function o(i,r,o,s,l,c){let d=t[n];const u=e.get(o);return void 0===d?(d={id:i.id,object:i,geometry:r,material:o,program:u.program||a,groupOrder:s,renderOrder:i.renderOrder,z:l,group:c},t[n]=d):(d.id=i.id,d.object=i,d.geometry=r,d.material=o,d.program=u.program||a,d.groupOrder=s,d.renderOrder=i.renderOrder,d.z=l,d.group=c),n++,d}return{opaque:i,transparent:r,init:function(){n=0,i.length=0,r.length=0},push:function(e,t,n,a,s,l){const c=o(e,t,n,a,s,l);(!0===n.transparent?r:i).push(c)},unshift:function(e,t,n,a,s,l){const c=o(e,t,n,a,s,l);(!0===n.transparent?r:i).unshift(c)},finish:function(){for(let e=n,i=t.length;e<i;e++){const n=t[e];if(null===n.id)break;n.id=null,n.object=null,n.geometry=null,n.material=null,n.program=null,n.group=null}},sort:function(e,t){i.length>1&&i.sort(e||painterSortStable),r.length>1&&r.sort(t||reversePainterSortStable)}}}function WebGLRenderLists(e){let t=new WeakMap;return{get:function(n,i){const r=t.get(n);let a;return void 0===r?(a=new WebGLRenderList(e),t.set(n,new WeakMap),t.get(n).set(i,a)):(a=r.get(i),void 0===a&&(a=new WebGLRenderList(e),r.set(i,a))),a},dispose:function(){t=new WeakMap}}}function WebGLCapabilities(e,t,n){let i;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const a="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext;let o=void 0!==n.precision?n.precision:"highp";const s=r(o);s!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",s,"instead."),o=s);const l=!0===n.logarithmicDepthBuffer,c=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),d=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_TEXTURE_SIZE),h=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),p=e.getParameter(e.MAX_VERTEX_ATTRIBS),f=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),m=e.getParameter(e.MAX_VARYING_VECTORS),g=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),_=d>0,v=a||!!t.get("OES_texture_float");return{isWebGL2:a,getMaxAnisotropy:function(){if(void 0!==i)return i;const n=t.get("EXT_texture_filter_anisotropic");return i=null!==n?e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0,i},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:l,maxTextures:c,maxVertexTextures:d,maxTextureSize:u,maxCubemapSize:h,maxAttributes:p,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:g,vertexTextures:_,floatFragmentTextures:v,floatVertexTextures:_&&v,maxSamples:a?e.getParameter(e.MAX_SAMPLES):0}}function WebGLBufferRenderer(e,t,n,i){const r=i.isWebGL2;let a;this.setMode=function(e){a=e},this.render=function(t,i){e.drawArrays(a,t,i),n.update(i,a,1)},this.renderInstances=function(i,o,s){if(0===s)return;let l,c;if(r)l=e,c="drawArraysInstanced";else if(l=t.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](a,i,o,s),n.update(o,a,s)}}function WebGLIndexedBufferRenderer(e,t,n,i){const r=i.isWebGL2;let a,o,s;this.setMode=function(e){a=e},this.setIndex=function(e){o=e.type,s=e.bytesPerElement},this.render=function(t,i){e.drawElements(a,i,o,t*s),n.update(i,a,1)},this.renderInstances=function(i,l,c){if(0===c)return;let d,u;if(r)d=e,u="drawElementsInstanced";else if(d=t.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",null===d)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");d[u](a,l,o,i*s,c),n.update(l,a,c)}}var alphamap_fragment="\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n",alphamap_pars_fragment="\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",alphatest_fragment="\n#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n",aomap_fragment="\n#ifdef USE_AOMAP\n\n\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\n\t#endif\n\n#endif\n",aomap_pars_fragment="\n#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif\n",begin_vertex="\nvec3 transformed = vec3( position );\n",beginnormal_vertex="\nvec3 objectNormal = vec3( normal );\n\n#ifdef USE_TANGENT\n\n\tvec3 objectTangent = vec3( tangent.xyz );\n\n#endif\n",bsdfs='\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via \'environmentBRDF\' from "Physically Based Shading on Mobile"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\nvec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tvec4 r = roughness * c0 + c1;\n\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n\n}\n\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t// page 32, equation 26: E[window1]\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t// this is intended to be used on spot and point lights who are represented as luminous intensity\n\t// but who must be converted to luminous irradiance for surface lighting calculation\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\n\tif( cutoffDistance > 0.0 ) {\n\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\n\t}\n\n\treturn distanceFalloff;\n\n#else\n\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n\t}\n\n\treturn 1.0;\n\n#endif\n\n}\n\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\n\treturn RECIPROCAL_PI * diffuseColor;\n\n} // validated\n\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\n\t// Original approximation by Christophe Schlick \'94\n\t// float fresnel = pow( 1.0 - dotLH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH \'13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\n} // validated\n\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\n\t// See F_Schlick\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\n\treturn Fr * fresnel + F0;\n\n}\n\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney’s reparameterization\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\t// geometry term (normalized) = G(l)⋅G(v) / 4(n⋅l)(n⋅v)\n\t// also see #12151\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\n\treturn 1.0 / ( gl * gv );\n\n} // validated\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\tfloat a2 = pow2( alpha );\n\n\t// dotNL and dotNV are explicitly swapped. This is not a mistake.\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\n\treturn 0.5 / max( gv + gl, EPSILON );\n\n}\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney’s reparameterization\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\n\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\n}\n\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\n\tfloat alpha = pow2( roughness ); // UE4\'s roughness\n\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\tfloat D = D_GGX( alpha, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n// Rect Area Light\n\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n// code: https://github.com/selfshadow/ltc_code/\n\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\tfloat dotNV = saturate( dot( N, V ) );\n\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\treturn uv;\n\n}\n\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\n\t// An approximation of the form factor of a horizon-clipped rectangle.\n\n\tfloat l = length( f );\n\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n\n}\n\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\n\tfloat x = dot( v1, v2 );\n\n\tfloat y = abs( x );\n\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\n\treturn cross( v1, v2 ) * theta_sintheta;\n\n}\n\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\n\t// construct orthonormal basis around N\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\n\n\t// compute transform\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\n\t// transform rect\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\n\t// project rect onto sphere\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\n\t// calculate vector form factor\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\n\t// adjust for horizon clipping\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\n/*\n\t// alternate method of adjusting for horizon clipping (see referece)\n\t// refactoring required\n\tfloat len = length( vectorFormFactor );\n\tfloat z = vectorFormFactor.z / len;\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\t// tabulated horizon-clipped sphere, apparently...\n\tvec2 uv = vec2( z * 0.5 + 0.5, len );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\tfloat scale = texture2D( ltc_2, uv ).w;\n\n\tfloat result = len * scale;\n*/\n\n\treturn vec3( result );\n\n}\n\n// End Rect Area Light\n\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\n\treturn specularColor * brdf.x + brdf.y;\n\n} // validated\n\n// Fdez-Agüera\'s "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"\n// Approximates multiscattering in order to preserve energy.\n// http://www.jcgt.org/published/0008/01/03/\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619; // 1/21\n\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n\n}\n\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\n\n\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\n\t//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\t//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\n\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n\n#if defined( USE_SHEEN )\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs#L94\nfloat D_Charlie(float roughness, float NoH) {\n\t// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF"\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs#L136\nfloat V_Neubelt(float NoV, float NoL) {\n\t// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\n\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n\n}\n\n#endif\n',bumpmap_pars_fragment="\n#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n\t// http://api.unrealengine.com/attachments/Engine/Rendering/LightingAndShadows/BumpMappingWithoutTangentSpace/mm_sfgrad_bump.pdf\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n",clipping_planes_fragment="\n#if NUM_CLIPPING_PLANES > 0\n\n\tvec4 plane;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\n\t\tbool clipped = true;\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t\tif ( clipped ) discard;\n\n\t#endif\n\n#endif\n",clipping_planes_pars_fragment="\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n\n#endif\n",clipping_planes_pars_vertex="\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n#endif\n",clipping_planes_vertex="\n#if NUM_CLIPPING_PLANES > 0\n\n\tvClipPosition = - mvPosition.xyz;\n\n#endif\n",color_fragment="\n#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif\n",color_pars_fragment="\n#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n",color_pars_vertex="\n#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\n\tvarying vec3 vColor;\n\n#endif\n",color_vertex="\n#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\n\tvColor = vec3( 1.0 );\n\n#endif\n\n#ifdef USE_COLOR\n\n\tvColor.xyz *= color.xyz;\n\n#endif\n\n#ifdef USE_INSTANCING_COLOR\n\n\tvColor.xyz *= instanceColor.xyz;\n\n#endif\n",common="\n#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n\n#ifndef saturate\n// <tonemapping_pars_fragment> may have defined saturate() already\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\n\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\n\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\n\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\n\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n}\n\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t// dir can be either a direction vector or a normal vector\n\t// upper-left 3x3 of matrix is assumed to be orthogonal\n\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n\n}\n\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\n\treturn - distance * planeNormal + point;\n\n}\n\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n\n}\n\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n\n}\n\nmat3 transposeMat3( const in mat3 m ) {\n\n\tmat3 tmp;\n\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\n\treturn tmp;\n\n}\n\n// https://en.wikipedia.org/wiki/Relative_luminance\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\n\treturn dot( weights, color.rgb );\n\n}\n\nbool isPerspectiveMatrix( mat4 m ) {\n\n\treturn m[ 2 ][ 3 ] == - 1.0;\n\n}\n\nvec2 equirectUv( in vec3 dir ) {\n\n\t// dir is assumed to be unit length\n\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\treturn vec2( u, v );\n\n}\n",cube_uv_reflection_fragment="\n#ifdef ENVMAP_TYPE_CUBE_UV\n\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\n\t// These shader functions convert between the UV coordinates of a single face of\n\t// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n\t// sampling a textureCube (not generally normalized ).\n\n\tfloat getFace( vec3 direction ) {\n\n\t\tvec3 absDirection = abs( direction );\n\n\t\tfloat face = - 1.0;\n\n\t\tif ( absDirection.x > absDirection.z ) {\n\n\t\t\tif ( absDirection.x > absDirection.y )\n\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t} else {\n\n\t\t\tif ( absDirection.z > absDirection.y )\n\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t}\n\n\t\treturn face;\n\n\t}\n\n\t// RH coordinate system; PMREM face-indexing convention\n\tvec2 getUV( vec3 direction, float face ) {\n\n\t\tvec2 uv;\n\n\t\tif ( face == 0.0 ) {\n\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x ); // pos x\n\n\t\t} else if ( face == 1.0 ) {\n\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y ); // pos y\n\n\t\t} else if ( face == 2.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z ); // pos z\n\n\t\t} else if ( face == 3.0 ) {\n\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x ); // neg x\n\n\t\t} else if ( face == 4.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y ); // neg y\n\n\t\t} else {\n\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z ); // neg z\n\n\t\t}\n\n\t\treturn 0.5 * ( uv + 1.0 );\n\n\t}\n\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\n\t\tfloat face = getFace( direction );\n\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\n\t\tfloat faceSize = exp2( mipInt );\n\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\n\t\tvec2 f = fract( uv );\n\n\t\tuv += 0.5 - f;\n\n\t\tif ( face > 2.0 ) {\n\n\t\t\tuv.y += faceSize;\n\n\t\t\tface -= 3.0;\n\n\t\t}\n\n\t\tuv.x += face * faceSize;\n\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\n\t\t}\n\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\n\t\tuv *= texelSize;\n\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tuv.x += texelSize;\n\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tuv.y += texelSize;\n\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tuv.x -= texelSize;\n\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tvec3 tm = mix( tl, tr, f.x );\n\n\t\tvec3 bm = mix( bl, br, f.x );\n\n\t\treturn mix( tm, bm, f.y );\n\n\t}\n\n\t// These defines must match with PMREMGenerator\n\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\n\tfloat roughnessToMip( float roughness ) {\n\n\t\tfloat mip = 0.0;\n\n\t\tif ( roughness >= r1 ) {\n\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\n\t\t} else if ( roughness >= r4 ) {\n\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\n\t\t} else if ( roughness >= r5 ) {\n\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\n\t\t} else if ( roughness >= r6 ) {\n\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\n\t\t} else {\n\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness ); // 1.16 = 1.79^0.25\n\t\t}\n\n\t\treturn mip;\n\n\t}\n\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\n\t\tfloat mipF = fract( mip );\n\n\t\tfloat mipInt = floor( mip );\n\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\n\t\tif ( mipF == 0.0 ) {\n\n\t\t\treturn vec4( color0, 1.0 );\n\n\t\t} else {\n\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\n\t\t}\n\n\t}\n\n#endif\n",defaultnormal_vertex="\nvec3 transformedNormal = objectNormal;\n\n#ifdef USE_INSTANCING\n\n\t// this is in lieu of a per-instance normal-matrix\n\t// shear transforms in the instance matrix are not supported\n\n\tmat3 m = mat3( instanceMatrix );\n\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\n\ttransformedNormal = m * transformedNormal;\n\n#endif\n\ntransformedNormal = normalMatrix * transformedNormal;\n\n#ifdef FLIP_SIDED\n\n\ttransformedNormal = - transformedNormal;\n\n#endif\n\n#ifdef USE_TANGENT\n\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#ifdef FLIP_SIDED\n\n\t\ttransformedTangent = - transformedTangent;\n\n\t#endif\n\n#endif\n",displacementmap_pars_vertex="\n#ifdef USE_DISPLACEMENTMAP\n\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n\n#endif\n",displacementmap_vertex="\n#ifdef USE_DISPLACEMENTMAP\n\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n\n#endif\n",emissivemap_fragment="\n#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n\n#endif\n",emissivemap_pars_fragment="\n#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n",encodings_fragment="\ngl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment="\n// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\n\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\n\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\n\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\n\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\n\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\n\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\n\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n\t// return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\n\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\n\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\t// NOTE: The implementation with min causes the shader to not compile on\n\t// a common Alcatel A502DL in Chrome 78/Android 8.1. Some research suggests \n\t// that the chipset is Mediatek MT6739 w/ IMG PowerVR GE8100 GPU.\n\t// D = min( floor( D ) / 255.0, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\n\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\n\n// M matrix, for encoding\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\n\n// Inverse M matrix, for decoding\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}\n",envmap_fragment="\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvec3 cameraToFrag;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\n\t\t}\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\n\t#else\n\n\t\tvec4 envColor = vec4( 0.0 );\n\n\t#endif\n\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\n\t\tenvColor = envMapTexelToLinear( envColor );\n\n\t#endif\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n",envmap_common_pars_fragment="\n#ifdef USE_ENVMAP\n\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif\n",envmap_pars_fragment="\n#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n\n#endif\n",envmap_pars_vertex="\n#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\n\t#endif\n\n#endif\n",envmap_vertex="\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvWorldPosition = worldPosition.xyz;\n\n\t#else\n\n\t\tvec3 cameraToVertex;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t\t}\n\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",fog_vertex="\n#ifdef USE_FOG\n\n\tfogDepth = - mvPosition.z;\n\n#endif\n",fog_pars_vertex="\n#ifdef USE_FOG\n\n\tvarying float fogDepth;\n\n#endif\n",fog_fragment="\n#ifdef USE_FOG\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\n\t#endif\n\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif\n",fog_pars_fragment="\n#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\n\t#endif\n\n#endif\n",gradientmap_pars_fragment="\n\n#ifdef USE_GRADIENTMAP\n\n\tuniform sampler2D gradientMap;\n\n#endif\n\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\n\t// dotNL will be from -1.0 to 1.0\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\n\t#ifdef USE_GRADIENTMAP\n\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\n\t#else\n\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\n\t#endif\n\n}\n",lightmap_fragment="\n#ifdef USE_LIGHTMAP\n\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\n\n#endif\n",lightmap_pars_fragment="\n#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif\n",lights_lambert_vertex="\nvec3 diffuse = vec3( 1.0 );\n\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\n\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\n\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\n\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\n\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n\n#ifdef DOUBLE_SIDED\n\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n\n#endif\n\n#if NUM_POINT_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_SPOT_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n/*\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\t// TODO (abelnation): implement\n\n\t}\n\n#endif\n*/\n\n#if NUM_DIR_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_HEMI_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n",lights_pars_begin="\nuniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\n\n// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\n\t// normal is assumed to have unit length\n\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\n\t// band 0\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\n\t// band 1\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\n\t// band 2\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\n\treturn result;\n\n}\n\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\n\treturn irradiance;\n\n}\n\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\n\tvec3 irradiance = ambientLightColor;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI;\n\n\t#endif\n\n\treturn irradiance;\n\n}\n\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\n\t}\n\n#endif\n\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\n\t}\n\n#endif\n\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\n\t\tif ( angleCos > spotLight.coneCos ) {\n\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\n\t\t} else {\n\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\n\t\t}\n\t}\n\n#endif\n\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\n\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\n\t// BRDF approximation Texture is 64x64\n\tuniform sampler2D ltc_1; // RGBA Float\n\tuniform sampler2D ltc_2; // RGBA Float\n\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n\n#endif\n\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tirradiance *= PI;\n\n\t\t#endif\n\n\t\treturn irradiance;\n\n\t}\n\n#endif\n",envmap_physical_pars_fragment="\n#if defined( USE_ENVMAP )\n\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\n\tvec3 getLightProbeIndirectIrradiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in int maxMIPLevel ) {\n\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\n\t\t\t// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\n\t\t\t// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\n\t\t\t#else\n\n\t\t\t\t// force the bias high to get the last LOD level as it is the most blurred.\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\n\t\t#else\n\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\n\t\t#endif\n\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\n\t}\n\n\t// Trowbridge-Reitz distribution to Mip level, following the logic of http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\n\t\t// clamp to allowable LOD ranges.\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\n\t}\n\n\tvec3 getLightProbeIndirectRadiance( /*const in SpecularLightProbe specularLightProbe,*/ const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\n\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\n\t\t#endif\n\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\n\t\t\t#else\n\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\n\t\t#endif\n\n\t\treturn envMapColor.rgb * envMapIntensity;\n\n\t}\n\n#endif\n",lights_toon_fragment="\nToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\n",lights_toon_pars_fragment="\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n\nstruct ToonMaterial {\n\n\tvec3 diffuseColor;\n\n};\n\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n\n#define Material_LightProbeLOD( material )\t(0)\n",lights_phong_fragment="\nBlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment="\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n\nstruct BlinnPhongMaterial {\n\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n\n};\n\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n\n}\n\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n\n#define Material_LightProbeLOD( material )\t(0)\n",lights_physical_fragment="\nPhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\n\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\n\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.\nmaterial.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n\n#ifdef REFLECTIVITY\n\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\n#else\n\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n\n#endif\n\n#ifdef CLEARCOAT\n\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\n\t#ifdef USE_CLEARCOATMAP\n\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\n\t#endif\n\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\n\t#endif\n\n\tmaterial.clearcoat = saturate( material.clearcoat ); // Burley clearcoat model\n\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n\n#endif\n\n#ifdef USE_SHEEN\n\n\tmaterial.sheenColor = sheen;\n\n#endif\n",lights_physical_pars_fragment="\nstruct PhysicalMaterial {\n\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n\n};\n\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\n\n// Clear coat directional hemishperical reflectance (this approximation should be improved)\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n\n}\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction\n\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\n\t}\n\n#endif\n\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\n\tvec3 irradiance = dotNL * directLight.color;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\t#ifdef CLEARCOAT\n\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tccIrradiance *= PI; // punctual light\n\n\t\t#endif\n\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\n\t#else\n\n\t\tfloat clearcoatDHR = 0.0;\n\n\t#endif\n\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\n\t#ifdef CLEARCOAT\n\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\n\t#else\n\n\t\tfloat clearcoatDHR = 0.0;\n\n\t#endif\n\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\n\t// Both indirect specular and indirect diffuse light accumulate here\n\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n\n}\n",lights_fragment_begin="\n/**\n * This is a template that can be used to light a material, it uses pluggable\n * RenderEquations (RE)for specific lighting scenarios.\n *\n * Instructions for use:\n * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\n * - If you have defined an RE_IndirectSpecular, you need to also provide a Material_LightProbeLOD. <---- ???\n * - Create a material parameter that is to be passed as the third parameter to your lighting functions.\n *\n * TODO:\n * - Add area light support.\n * - Add sphere light support.\n * - Add diffuse light probe (irradiance cubemap) support.\n */\n\nGeometricContext geometry;\n\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\n#ifdef CLEARCOAT\n\n\tgeometry.clearcoatNormal = clearcoatNormal;\n\n#endif\n\nIncidentLight directLight;\n\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n\tRectAreaLight rectAreaLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if defined( RE_IndirectDiffuse )\n\n\tvec3 iblIrradiance = vec3( 0.0 );\n\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t#endif\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n\n#endif\n",lights_fragment_maps="\n#if defined( RE_IndirectDiffuse )\n\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tlightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\n\n\t\t#endif\n\n\t\tirradiance += lightMapIrradiance;\n\n\t#endif\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( /*lightProbe,*/ geometry, maxMipLevel );\n\n\t#endif\n\n#endif\n\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\n\tradiance += getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\n\t#ifdef CLEARCOAT\n\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\n\t#endif\n\n#endif\n",lights_fragment_end="\n#if defined( RE_IndirectDiffuse )\n\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n\n#endif\n",logdepthbuf_fragment="\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\t// Doing a strict comparison with == 1.0 can cause noise artifacts\n\t// on some platforms. See issue #17623.\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n\n#endif\n",logdepthbuf_pars_fragment="\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n\n#endif\n",logdepthbuf_pars_vertex="\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\n\t#else\n\n\t\tuniform float logDepthBufFC;\n\n\t#endif\n\n#endif\n",logdepthbuf_vertex="\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\n\t#else\n\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\n\t\t\tgl_Position.z *= gl_Position.w;\n\n\t\t}\n\n\t#endif\n\n#endif\n",map_fragment="\n#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n\n#endif\n",map_pars_fragment="\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n",map_particle_fragment="\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\n#endif\n\n#ifdef USE_MAP\n\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n\n#endif\n",map_particle_pars_fragment="\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\tuniform mat3 uvTransform;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",metalnessmap_fragment="\nfloat metalnessFactor = metalness;\n\n#ifdef USE_METALNESSMAP\n\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\n\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tmetalnessFactor *= texelMetalness.b;\n\n#endif\n",metalnessmap_pars_fragment="\n#ifdef USE_METALNESSMAP\n\n\tuniform sampler2D metalnessMap;\n\n#endif\n",morphnormal_vertex="\n#ifdef USE_MORPHNORMALS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\n#endif\n",morphtarget_pars_vertex="\n#ifdef USE_MORPHTARGETS\n\n\tuniform float morphTargetBaseInfluence;\n\n\t#ifndef USE_MORPHNORMALS\n\n\t\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\t\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif\n",morphtarget_vertex="\n#ifdef USE_MORPHTARGETS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n#endif\n",normal_fragment_begin="\n#ifdef FLAT_SHADED\n\n\t// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\n\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#else\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t#endif\n\n\t#ifdef USE_TANGENT\n\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t\t#endif\n\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n\n// non perturbed normal for clearcoat among others\n\nvec3 geometryNormal = normal;\n\n",normal_fragment_maps="\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n\t#ifdef FLIP_SIDED\n\n\t\tnormal = - normal;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t#endif\n\n\tnormal = normalize( normalMatrix * normal );\n\n#elif defined( TANGENTSPACE_NORMALMAP )\n\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\n\t#ifdef USE_TANGENT\n\n\t\tnormal = normalize( vTBN * mapN );\n\n\t#else\n\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\n\t#endif\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n",normalmap_pars_fragment="\n#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n#endif\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n\tuniform mat3 normalMatrix;\n\n#endif\n\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\n\t// Per-Pixel Tangent Space Normal Mapping\n\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\n\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tmat3 tsn = mat3( S, T, N );\n\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n",clearcoat_normal_fragment_begin="\n#ifdef CLEARCOAT\n\n\tvec3 clearcoatNormal = geometryNormal;\n\n#endif\n",clearcoat_normal_fragment_maps="\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\n\t#ifdef USE_TANGENT\n\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\n\t#else\n\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\n\t#endif\n\n#endif\n",clearcoat_pars_fragment="\n\n#ifdef USE_CLEARCOATMAP\n\n\tuniform sampler2D clearcoatMap;\n\n#endif\n\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\tuniform sampler2D clearcoatRoughnessMap;\n\n#endif\n\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n\n#endif\n",packing="\nvec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\n\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\n\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\n\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\n\nconst float ShiftRight8 = 1. / 256.;\n\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\n\treturn r * PackUpscale;\n}\n\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\n\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\n\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\n\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\n\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",premultiplied_alpha_fragment="\n#ifdef PREMULTIPLIED_ALPHA\n\n\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\n\tgl_FragColor.rgb *= gl_FragColor.a;\n\n#endif\n",project_vertex="\nvec4 mvPosition = vec4( transformed, 1.0 );\n\n#ifdef USE_INSTANCING\n\n\tmvPosition = instanceMatrix * mvPosition;\n\n#endif\n\nmvPosition = modelViewMatrix * mvPosition;\n\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment="\n#ifdef DITHERING\n\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n\n#endif\n",dithering_pars_fragment="\n#ifdef DITHERING\n\n\t// based on https://www.shadertoy.com/view/MslGR8\n\tvec3 dithering( vec3 color ) {\n\t\t//Calculate grid position\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\n\t\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\n\t\t//modify shift acording to grid position.\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\n\t\t//shift the color by dither_shift\n\t\treturn color + dither_shift_RGB;\n\t}\n\n#endif\n",roughnessmap_fragment="\nfloat roughnessFactor = roughness;\n\n#ifdef USE_ROUGHNESSMAP\n\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\n\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\troughnessFactor *= texelRoughness.g;\n\n#endif\n",roughnessmap_pars_fragment="\n#ifdef USE_ROUGHNESSMAP\n\n\tuniform sampler2D roughnessMap;\n\n#endif\n",shadowmap_pars_fragment="\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): create uniforms for area light shadows\n\n\t#endif\n\t*/\n\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\n\t}\n\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\n\t}\n\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\n\t\tfloat occlusion = 1.0;\n\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\n\t\tfloat hard_shadow = step( compare , distribution.x ); // Hard Shadow\n\n\t\tif (hard_shadow != 1.0 ) {\n\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality\n\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed\n\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\n\t\t}\n\t\treturn occlusion;\n\n\t}\n\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\n\t\tfloat shadow = 1.0;\n\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\n\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#else // no percentage-closer filtering:\n\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#endif\n\n\t\t}\n\n\t\treturn shadow;\n\n\t}\n\n\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\n\t// vector suitable for 2D texture mapping. This code uses the following layout for the\n\t// 2D texture:\n\t//\n\t// xzXZ\n\t//  y Y\n\t//\n\t// Y - Positive y direction\n\t// y - Negative y direction\n\t// X - Positive x direction\n\t// x - Negative x direction\n\t// Z - Positive z direction\n\t// z - Negative z direction\n\t//\n\t// Source and test bed:\n\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\n\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\t\t// Number of texels to avoid at the edge of each square\n\n\t\tvec3 absV = abs( v );\n\n\t\t// Intersect unit cube\n\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\n\t\t// Apply scale to avoid seams\n\n\t\t// two texels less per square (one texel will do for NEAREST)\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\t\t// Unwrap\n\n\t\t// space: -1 ... 1 range for each square\n\t\t//\n\t\t// #X##\t\tdim    := ( 4 , 2 )\n\t\t//  # #\t\tcenter := ( 1 , 1 )\n\n\t\tvec2 planar = v.xy;\n\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\tif ( absV.z >= almostOne ) {\n\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t} else if ( absV.x >= almostOne ) {\n\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t} else if ( absV.y >= almostOne ) {\n\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t}\n\n\t\t// Transform to UV space\n\n\t\t// scale := 0.5 / dim\n\t\t// translate := ( center + 0.5 ) / dim\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t}\n\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\n\t\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\n\t\t// the vector from the light to the world-space position of the fragment.\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\n\t\t// dp = normalized distance from light to fragment position\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\n\t\tdp += shadowBias;\n\n\t\t// bd3D = base direction 3D\n\t\tvec3 bd3D = normalize( lightToPosition );\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#else // no percentage-closer filtering\n\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\n\t\t#endif\n\n\t}\n\n#endif\n",shadowmap_pars_vertex="\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): uniforms for area light shadows\n\n\t#endif\n\t*/\n\n#endif\n",shadowmap_vertex="\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\t// Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\n\t#endif\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update vAreaShadowCoord with area light info\n\n\t#endif\n\t*/\n\n#endif\n",shadowmask_pars_fragment="\nfloat getShadowMask() {\n\n\tfloat shadow = 1.0;\n\n\t#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\tDirectionalLightShadow directionalLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\tSpotLightShadow spotLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\tPointLightShadow pointLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update shadow for Area light\n\n\t#endif\n\t*/\n\n\t#endif\n\n\treturn shadow;\n\n}\n",skinbase_vertex="\n#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif\n",skinning_pars_vertex="\n#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n",skinning_vertex="\n#ifdef USE_SKINNING\n\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n\n#endif\n",skinnormal_vertex="\n#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n\t#ifdef USE_TANGENT\n\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#endif\n\n#endif\n",specularmap_fragment="\nfloat specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif\n",specularmap_pars_fragment="\n#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif\n",tonemapping_fragment="\n#if defined( TONE_MAPPING )\n\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n\n#endif\n",tonemapping_pars_fragment="\n#ifndef saturate\n// <common> may have defined saturate() already\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n\nuniform float toneMappingExposure;\n\n// exposure only\nvec3 LinearToneMapping( vec3 color ) {\n\n\treturn toneMappingExposure * color;\n\n}\n\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\nvec3 ReinhardToneMapping( vec3 color ) {\n\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n\n}\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n\n}\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nvec3 RRTAndODTFit( vec3 v ) {\n\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n\n}\n\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\n\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\n\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\n\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\n\tcolor *= toneMappingExposure / 0.6;\n\n\tcolor = ACESInputMat * color;\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( color );\n\n\tcolor = ACESOutputMat * color;\n\n\t// Clamp to [0, 1]\n\treturn saturate( color );\n\n}\n\nvec3 CustomToneMapping( vec3 color ) { return color; }\n",transmissionmap_fragment="\n#ifdef USE_TRANSMISSIONMAP\n\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n\n#endif\n",transmissionmap_pars_fragment="\n#ifdef USE_TRANSMISSIONMAP\n\n\tuniform sampler2D transmissionMap;\n\n#endif\n",uv_pars_fragment="\n#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\n\tvarying vec2 vUv;\n\n#endif\n",uv_pars_vertex="\n#ifdef USE_UV\n\n\t#ifdef UVS_VERTEX_ONLY\n\n\t\tvec2 vUv;\n\n\t#else\n\n\t\tvarying vec2 vUv;\n\n\t#endif\n\n\tuniform mat3 uvTransform;\n\n#endif\n",uv_vertex="\n#ifdef USE_UV\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n#endif\n",uv2_pars_fragment="\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvarying vec2 vUv2;\n\n#endif\n",uv2_pars_vertex="\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\n\tuniform mat3 uv2Transform;\n\n#endif\n",uv2_vertex="\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n\n#endif\n",worldpos_vertex="\n#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\n\t#ifdef USE_INSTANCING\n\n\t\tworldPosition = instanceMatrix * worldPosition;\n\n\t#endif\n\n\tworldPosition = modelMatrix * worldPosition;\n\n#endif\n",background_frag="\nuniform sampler2D t2D;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\tvec4 texColor = texture2D( t2D, vUv );\n\n\tgl_FragColor = mapTexelToLinear( texColor );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",background_vert="\nvarying vec2 vUv;\nuniform mat3 uvTransform;\n\nvoid main() {\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n\n}\n",cube_frag="\n#include <envmap_common_pars_fragment>\nuniform float opacity;\n\nvarying vec3 vWorldDirection;\n\n#include <cube_uv_reflection_fragment>\n\nvoid main() {\n\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",cube_vert="\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n}\n",depth_frag="\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",depth_vert="\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",distanceRGBA_frag="\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",distanceRGBA_vert="\n#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",equirect_frag="\nuniform sampler2D tEquirect;\n\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvec3 direction = normalize( vWorldDirection );\n\n\tvec2 sampleUV = equirectUv( direction );\n\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\n\tgl_FragColor = mapTexelToLinear( texColor );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",equirect_vert="\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n}\n",linedashed_frag="\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\n\toutgoingLight = diffuseColor.rgb; // simple shader\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",linedashed_vert="\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",meshbasic_frag="\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshbasic_vert="\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_ENVMAP\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshlambert_frag="\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\n\t#endif\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshlambert_vert="\n#define LAMBERT\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshmatcap_frag="\n#define MATCAP\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\n\n\t#ifdef USE_MATCAP\n\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\n\t#else\n\n\t\tvec4 matcapColor = vec4( 1.0 );\n\n\t#endif\n\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshmatcap_vert="\n#define MATCAP\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\t\tvNormal = normalize( transformedNormal );\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n}\n",meshtoon_frag="\n#define TOON\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshtoon_vert="\n#define TOON\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshphong_frag="\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshphong_vert="\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshphysical_frag="\n#define STANDARD\n\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t// this is a stub for the transmission model\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshphysical_vert="\n#define STANDARD\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",normal_frag="\n#define NORMAL\n\nuniform float opacity;\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\n}\n",normal_vert="\n#define NORMAL\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvViewPosition = - mvPosition.xyz;\n\n#endif\n\n}\n",points_frag="\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",points_vert="\nuniform float size;\nuniform float scale;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\n\tgl_PointSize = size;\n\n\t#ifdef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\n\t#endif\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n\n}\n",shadow_frag="\nuniform vec3 color;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n\nvoid main() {\n\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",shadow_vert="\n#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n\nvoid main() {\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",sprite_frag="\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",sprite_vert="\nuniform float rotation;\nuniform vec2 center;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\t#ifndef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\n\t#endif\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\n\tmvPosition.xy += rotatedPosition;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n";const ShaderChunk={alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_common_pars_fragment:envmap_common_pars_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars_begin:lights_pars_begin,lights_toon_fragment:lights_toon_fragment,lights_toon_pars_fragment:lights_toon_pars_fragment,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normalmap_pars_fragment:normalmap_pars_fragment,clearcoat_normal_fragment_begin:clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps:clearcoat_normal_fragment_maps,clearcoat_pars_fragment:clearcoat_pars_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,transmissionmap_fragment:transmissionmap_fragment,transmissionmap_pars_fragment:transmissionmap_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,background_frag:background_frag,background_vert:background_vert,cube_frag:cube_frag,cube_vert:cube_vert,depth_frag:depth_frag,depth_vert:depth_vert,distanceRGBA_frag:distanceRGBA_frag,distanceRGBA_vert:distanceRGBA_vert,equirect_frag:equirect_frag,equirect_vert:equirect_vert,linedashed_frag:linedashed_frag,linedashed_vert:linedashed_vert,meshbasic_frag:meshbasic_frag,meshbasic_vert:meshbasic_vert,meshlambert_frag:meshlambert_frag,meshlambert_vert:meshlambert_vert,meshmatcap_frag:meshmatcap_frag,meshmatcap_vert:meshmatcap_vert,meshtoon_frag:meshtoon_frag,meshtoon_vert:meshtoon_vert,meshphong_frag:meshphong_frag,meshphong_vert:meshphong_vert,meshphysical_frag:meshphysical_frag,meshphysical_vert:meshphysical_vert,normal_frag:normal_frag,normal_vert:normal_vert,points_frag:points_frag,points_vert:points_vert,shadow_frag:shadow_frag,shadow_vert:shadow_vert,sprite_frag:sprite_frag,sprite_vert:sprite_vert},ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color_js.Color(0)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color_js.Color(0)},specular:{value:new Color_js.Color(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color_js.Color(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color_js.Color(0)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.normal_vert,fragmentShader:ShaderChunk.normal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3_js.Matrix3},t2D:{value:null}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},cube:{uniforms:mergeUniforms([UniformsLib.envmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3_js.Vector3},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color_js.Color(0)},opacity:{value:1}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};function WebGLBackground(e,t,n,i,r){const a=new Color_js.Color(0);let o,s,l=0,c=null,d=0,u=null;function h(e,t){n.buffers.color.setClear(e.r,e.g,e.b,t,r)}return{getClearColor:function(){return a},setClearColor:function(e,t=1){a.set(e),l=t,h(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(e){l=e,h(a,l)},render:function(n,r,p,f){let m=!0===r.isScene?r.background:null;m&&m.isTexture&&(m=t.get(m));const g=e.xr,_=g.getSession&&g.getSession();_&&"additive"===_.environmentBlendMode&&(m=null),null===m?h(a,l):m&&m.isColor&&(h(m,1),f=!0),(e.autoClear||f)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),m&&(m.isCubeTexture||m.isWebGLCubeRenderTarget||m.mapping===CubeUVReflectionMapping)?(void 0===s&&(s=new Mesh_js.Mesh(new BoxGeometry_js.BoxGeometry(1,1,1),new ShaderMaterial_js.ShaderMaterial({name:"BackgroundCubeMaterial",uniforms:cloneUniforms(ShaderLib.cube.uniforms),vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:!1,depthWrite:!1,fog:!1})),s.geometry.deleteAttribute("normal"),s.geometry.deleteAttribute("uv"),s.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(s.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(s)),m.isWebGLCubeRenderTarget&&(m=m.texture),s.material.uniforms.envMap.value=m,s.material.uniforms.flipEnvMap.value=m.isCubeTexture&&m._needsFlipEnvMap?-1:1,c===m&&d===m.version&&u===e.toneMapping||(s.material.needsUpdate=!0,c=m,d=m.version,u=e.toneMapping),n.unshift(s,s.geometry,s.material,0,0,null)):m&&m.isTexture&&(void 0===o&&(o=new Mesh_js.Mesh(new PlaneGeometry_js.PlaneGeometry(2,2),new ShaderMaterial_js.ShaderMaterial({name:"BackgroundMaterial",uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),Object.defineProperty(o.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(o)),o.material.uniforms.t2D.value=m,!0===m.matrixAutoUpdate&&m.updateMatrix(),o.material.uniforms.uvTransform.value.copy(m.matrix),c===m&&d===m.version&&u===e.toneMapping||(o.material.needsUpdate=!0,c=m,d=m.version,u=e.toneMapping),n.unshift(o,o.geometry,o.material,0,0,null))}}}function WebGLShader(e,t,n){const i=e.createShader(t);return e.shaderSource(i,n),e.compileShader(i),i}ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Vector2_js.Vector2(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Color_js.Color(0)},transmission:{value:0},transmissionMap:{value:null}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};let programIdCount=0;function addLineNumbers(e){const t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}function getEncodingComponents(e){switch(e){case three.LinearEncoding:return["Linear","( value )"];case three.sRGBEncoding:return["sRGB","( value )"];case three.RGBEEncoding:return["RGBE","( value )"];case three.RGBM7Encoding:return["RGBM","( value, 7.0 )"];case three.RGBM16Encoding:return["RGBM","( value, 16.0 )"];case three.RGBDEncoding:return["RGBD","( value, 256.0 )"];case three.GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case three.LogLuvEncoding:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",e),["Linear","( value )"]}}function getShaderErrors(e,t,n){const i=e.getShaderParameter(t,e.COMPILE_STATUS),r=e.getShaderInfoLog(t).trim();if(i&&""===r)return"";return"THREE.WebGLShader: gl.getShaderInfoLog() "+n+"\n"+r+addLineNumbers(e.getShaderSource(t))}function getTexelDecodingFunction(e,t){const n=getEncodingComponents(t);return"vec4 "+e+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function getTexelEncodingFunction(e,t){const n=getEncodingComponents(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function getToneMappingFunction(e,t){let n;switch(t){case three.LinearToneMapping:n="Linear";break;case three.ReinhardToneMapping:n="Reinhard";break;case three.CineonToneMapping:n="OptimizedCineon";break;case three.ACESFilmicToneMapping:n="ACESFilmic";break;case CustomToneMapping:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function generateExtensions(e){return[e.extensionDerivatives||e.envMapCubeUV||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading||"physical"===e.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(filterEmptyLine).join("\n")}function generateDefines(e){const t=[];for(const n in e){const i=e[n];!1!==i&&t.push("#define "+n+" "+i)}return t.join("\n")}function fetchAttributeLocations(e,t){const n={},i=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const i=e.getActiveAttrib(t,r).name;n[i]=e.getAttribLocation(t,i)}return n}function filterEmptyLine(e){return""!==e}function replaceLightNums(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function replaceClippingPlaneNums(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(e){return e.replace(includePattern,includeReplacer)}function includeReplacer(e,t){const n=three.ShaderChunk[t];if(void 0===n)throw new Error("Can not resolve #include <"+t+">");return resolveIncludes(n)}const deprecatedUnrollLoopPattern=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(e){return e.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer)}function deprecatedLoopReplacer(e,t,n,i){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),loopReplacer(e,t,n,i)}function loopReplacer(e,t,n,i){let r="";for(let e=parseInt(t);e<parseInt(n);e++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return r}function generatePrecision(e){let t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function generateShadowMapTypeDefine(e){let t="SHADOWMAP_TYPE_BASIC";return e.shadowMapType===three.PCFShadowMap?t="SHADOWMAP_TYPE_PCF":e.shadowMapType===three.PCFSoftShadowMap?t="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===three.VSMShadowMap&&(t="SHADOWMAP_TYPE_VSM"),t}function generateEnvMapTypeDefine(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case three.CubeReflectionMapping:case three.CubeRefractionMapping:t="ENVMAP_TYPE_CUBE";break;case three.CubeUVReflectionMapping:case three.CubeUVRefractionMapping:t="ENVMAP_TYPE_CUBE_UV"}return t}function generateEnvMapModeDefine(e){let t="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(e.envMapMode){case three.CubeRefractionMapping:case three.CubeUVRefractionMapping:t="ENVMAP_MODE_REFRACTION"}return t}function generateEnvMapBlendingDefine(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case three.MultiplyOperation:t="ENVMAP_BLENDING_MULTIPLY";break;case three.MixOperation:t="ENVMAP_BLENDING_MIX";break;case three.AddOperation:t="ENVMAP_BLENDING_ADD"}return t}function WebGLProgram(e,t,n,i){const r=e.getContext(),a=n.defines;let o=n.vertexShader,s=n.fragmentShader;const l=generateShadowMapTypeDefine(n),c=generateEnvMapTypeDefine(n),d=generateEnvMapModeDefine(n),u=generateEnvMapBlendingDefine(n),h=e.gammaFactor>0?e.gammaFactor:1,p=n.isWebGL2?"":generateExtensions(n),f=generateDefines(a),m=r.createProgram();let g,_,v=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(g=[f].filter(filterEmptyLine).join("\n"),g.length>0&&(g+="\n"),_=[p,f].filter(filterEmptyLine).join("\n"),_.length>0&&(_+="\n")):(g=[generatePrecision(n),"#define SHADER_NAME "+n.shaderName,f,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+h,"#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+d:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n"),_=[p,generatePrecision(n),"#define SHADER_NAME "+n.shaderName,f,n.alphaTest?"#define ALPHATEST "+n.alphaTest+(n.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+h,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+d:"",n.envMap?"#define "+u:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.sheen?"#define USE_SHEEN":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==three.NoToneMapping?"#define TONE_MAPPING":"",n.toneMapping!==three.NoToneMapping?three.ShaderChunk.tonemapping_pars_fragment:"",n.toneMapping!==three.NoToneMapping?getToneMappingFunction("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",three.ShaderChunk.encodings_pars_fragment,n.map?getTexelDecodingFunction("mapTexelToLinear",n.mapEncoding):"",n.matcap?getTexelDecodingFunction("matcapTexelToLinear",n.matcapEncoding):"",n.envMap?getTexelDecodingFunction("envMapTexelToLinear",n.envMapEncoding):"",n.emissiveMap?getTexelDecodingFunction("emissiveMapTexelToLinear",n.emissiveMapEncoding):"",n.lightMap?getTexelDecodingFunction("lightMapTexelToLinear",n.lightMapEncoding):"",getTexelEncodingFunction("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(filterEmptyLine).join("\n")),o=resolveIncludes(o),o=replaceLightNums(o,n),o=replaceClippingPlaneNums(o,n),s=resolveIncludes(s),s=replaceLightNums(s,n),s=replaceClippingPlaneNums(s,n),o=unrollLoops(o),s=unrollLoops(s),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(v="#version 300 es\n",g=["#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g,_=["#define varying in",n.glslVersion===three.GLSL3?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===three.GLSL3?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const x=v+g+o,T=v+_+s,A=WebGLShader(r,r.VERTEX_SHADER,x),S=WebGLShader(r,r.FRAGMENT_SHADER,T);if(r.attachShader(m,A),r.attachShader(m,S),void 0!==n.index0AttributeName?r.bindAttribLocation(m,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(m,0,"position"),r.linkProgram(m),e.debug.checkShaderErrors){const e=r.getProgramInfoLog(m).trim(),t=r.getShaderInfoLog(A).trim(),n=r.getShaderInfoLog(S).trim();let i=!0,a=!0;if(!1===r.getProgramParameter(m,r.LINK_STATUS)){i=!1;const t=getShaderErrors(r,A,"vertex"),n=getShaderErrors(r,S,"fragment");console.error("THREE.WebGLProgram: shader error: ",r.getError(),"gl.VALIDATE_STATUS",r.getProgramParameter(m,r.VALIDATE_STATUS),"gl.getProgramInfoLog",e,t,n)}else""!==e?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",e):""!==t&&""!==n||(a=!1);a&&(this.diagnostics={runnable:i,programLog:e,vertexShader:{log:t,prefix:g},fragmentShader:{log:n,prefix:_}})}let b,E;return r.deleteShader(A),r.deleteShader(S),this.getUniforms=function(){return void 0===b&&(b=new WebGLUniforms(r,m)),b},this.getAttributes=function(){return void 0===E&&(E=fetchAttributeLocations(r,m)),E},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(m),this.program=void 0},this.name=n.shaderName,this.id=programIdCount++,this.cacheKey=t,this.usedTimes=1,this.program=m,this.vertexShader=A,this.fragmentShader=S,this}function WebGLPrograms(e,t,n,i,r,a){const o=[],s=i.isWebGL2,l=i.logarithmicDepthBuffer,c=i.floatVertexTextures,d=i.maxVertexUniforms,u=i.vertexTextures;let h=i.precision;const p={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},f=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmissionMap"];function m(e){let t;return e&&e.isTexture?t=e.encoding:e&&e.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),t=e.texture.encoding):t=three.LinearEncoding,t}return{getParameters:function(r,o,f,g,_){const v=g.fog,x=r.isMeshStandardMaterial?g.environment:null,T=t.get(r.envMap||x),A=p[r.type],S=_.isSkinnedMesh?function(e){const t=e.skeleton.bones;if(c)return 1024;{const e=d,n=Math.floor((e-20)/4),i=Math.min(n,t.length);return i<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+i+"."),0):i}}(_):0;let b,E;if(null!==r.precision&&(h=i.getMaxPrecision(r.precision),h!==r.precision&&console.warn("THREE.WebGLProgram.getParameters:",r.precision,"not supported, using",h,"instead.")),A){const e=three.ShaderLib[A];b=e.vertexShader,E=e.fragmentShader}else b=r.vertexShader,E=r.fragmentShader;const L=e.getRenderTarget();return{isWebGL2:s,shaderID:A,shaderName:r.type,vertexShader:b,fragmentShader:E,defines:r.defines,isRawShaderMaterial:!0===r.isRawShaderMaterial,glslVersion:r.glslVersion,precision:h,instancing:!0===_.isInstancedMesh,instancingColor:!0===_.isInstancedMesh&&null!==_.instanceColor,supportsVertexTextures:u,outputEncoding:null!==L?m(L.texture):e.outputEncoding,map:!!r.map,mapEncoding:m(r.map),matcap:!!r.matcap,matcapEncoding:m(r.matcap),envMap:!!T,envMapMode:T&&T.mapping,envMapEncoding:m(T),envMapCubeUV:!!T&&(T.mapping===three.CubeUVReflectionMapping||T.mapping===three.CubeUVRefractionMapping),lightMap:!!r.lightMap,lightMapEncoding:m(r.lightMap),aoMap:!!r.aoMap,emissiveMap:!!r.emissiveMap,emissiveMapEncoding:m(r.emissiveMap),bumpMap:!!r.bumpMap,normalMap:!!r.normalMap,objectSpaceNormalMap:r.normalMapType===three.ObjectSpaceNormalMap,tangentSpaceNormalMap:r.normalMapType===three.TangentSpaceNormalMap,clearcoatMap:!!r.clearcoatMap,clearcoatRoughnessMap:!!r.clearcoatRoughnessMap,clearcoatNormalMap:!!r.clearcoatNormalMap,displacementMap:!!r.displacementMap,roughnessMap:!!r.roughnessMap,metalnessMap:!!r.metalnessMap,specularMap:!!r.specularMap,alphaMap:!!r.alphaMap,gradientMap:!!r.gradientMap,sheen:!!r.sheen,transmissionMap:!!r.transmissionMap,combine:r.combine,vertexTangents:r.normalMap&&r.vertexTangents,vertexColors:r.vertexColors,vertexUvs:!!(r.map||r.bumpMap||r.normalMap||r.specularMap||r.alphaMap||r.emissiveMap||r.roughnessMap||r.metalnessMap||r.clearcoatMap||r.clearcoatRoughnessMap||r.clearcoatNormalMap||r.displacementMap||r.transmissionMap),uvsVertexOnly:!(r.map||r.bumpMap||r.normalMap||r.specularMap||r.alphaMap||r.emissiveMap||r.roughnessMap||r.metalnessMap||r.clearcoatNormalMap||r.transmissionMap||!r.displacementMap),fog:!!v,useFog:r.fog,fogExp2:v&&v.isFogExp2,flatShading:r.flatShading,sizeAttenuation:r.sizeAttenuation,logarithmicDepthBuffer:l,skinning:r.skinning&&S>0,maxBones:S,useVertexTexture:c,morphTargets:r.morphTargets,morphNormals:r.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:r.dithering,shadowMapEnabled:e.shadowMap.enabled&&f.length>0,shadowMapType:e.shadowMap.type,toneMapping:r.toneMapped?e.toneMapping:three.NoToneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:r.premultipliedAlpha,alphaTest:r.alphaTest,doubleSided:r.side===three.DoubleSide,flipSided:r.side===three.BackSide,depthPacking:void 0!==r.depthPacking&&r.depthPacking,index0AttributeName:r.index0AttributeName,extensionDerivatives:r.extensions&&r.extensions.derivatives,extensionFragDepth:r.extensions&&r.extensions.fragDepth,extensionDrawBuffers:r.extensions&&r.extensions.drawBuffers,extensionShaderTextureLOD:r.extensions&&r.extensions.shaderTextureLOD,rendererExtensionFragDepth:s||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:s||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:s||n.has("EXT_shader_texture_lod"),customProgramCacheKey:r.customProgramCacheKey()}},getProgramCacheKey:function(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.fragmentShader),n.push(t.vertexShader)),void 0!==t.defines)for(const e in t.defines)n.push(e),n.push(t.defines[e]);if(!1===t.isRawShaderMaterial){for(let e=0;e<f.length;e++)n.push(t[f[e]]);n.push(e.outputEncoding),n.push(e.gammaFactor)}return n.push(t.customProgramCacheKey),n.join()},getUniforms:function(e){const t=p[e.type];let n;if(t){const e=three.ShaderLib[t];n=three.UniformsUtils.clone(e.uniforms)}else n=e.uniforms;return n},acquireProgram:function(t,n){let i;for(let e=0,t=o.length;e<t;e++){const t=o[e];if(t.cacheKey===n){i=t,++i.usedTimes;break}}return void 0===i&&(i=new WebGLProgram(e,n,t,r),o.push(i)),i},releaseProgram:function(e){if(0==--e.usedTimes){const t=o.indexOf(e);o[t]=o[o.length-1],o.pop(),e.destroy()}},programs:o}}function WebGLTextures(e,t,n,i,r,a,o){const s=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,d=r.maxTextureSize,u=r.maxSamples,h=new WeakMap;let p,f=!1;try{f="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(e){}function m(e,t){return f?new OffscreenCanvas(e,t):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function g(e,t,n,i){let r=1;if((e.width>i||e.height>i)&&(r=i/Math.max(e.width,e.height)),r<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){const i=t?three.MathUtils.floorPowerOfTwo:Math.floor,a=i(r*e.width),o=i(r*e.height);void 0===p&&(p=m(a,o));const s=n?m(a,o):p;s.width=a,s.height=o;return s.getContext("2d").drawImage(e,0,0,a,o),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+a+"x"+o+")."),s}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+")."),e}return e}function _(e){return three.MathUtils.isPowerOfTwo(e.width)&&three.MathUtils.isPowerOfTwo(e.height)}function v(e,t){return e.generateMipmaps&&t&&e.minFilter!==three.NearestFilter&&e.minFilter!==three.LinearFilter}function x(t,n,r,a){e.generateMipmap(t);i.get(n).__maxMipLevel=Math.log(Math.max(r,a))*Math.LOG2E}function T(n,i,r){if(!1===s)return i;if(null!==n){if(void 0!==e[n])return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let a=i;return i===e.RED&&(r===e.FLOAT&&(a=e.R32F),r===e.HALF_FLOAT&&(a=e.R16F),r===e.UNSIGNED_BYTE&&(a=e.R8)),i===e.RGB&&(r===e.FLOAT&&(a=e.RGB32F),r===e.HALF_FLOAT&&(a=e.RGB16F),r===e.UNSIGNED_BYTE&&(a=e.RGB8)),i===e.RGBA&&(r===e.FLOAT&&(a=e.RGBA32F),r===e.HALF_FLOAT&&(a=e.RGBA16F),r===e.UNSIGNED_BYTE&&(a=e.RGBA8)),a!==e.R16F&&a!==e.R32F&&a!==e.RGBA16F&&a!==e.RGBA32F||t.get("EXT_color_buffer_float"),a}function A(t){return t===three.NearestFilter||t===three.NearestMipmapNearestFilter||t===three.NearestMipmapLinearFilter?e.NEAREST:e.LINEAR}function S(t){const n=t.target;n.removeEventListener("dispose",S),function(t){const n=i.get(t);if(void 0===n.__webglInit)return;e.deleteTexture(n.__webglTexture),i.remove(t)}(n),n.isVideoTexture&&h.delete(n),o.memory.textures--}function b(t){const n=t.target;n.removeEventListener("dispose",b),function(t){const n=i.get(t),r=i.get(t.texture);if(!t)return;void 0!==r.__webglTexture&&e.deleteTexture(r.__webglTexture);t.depthTexture&&t.depthTexture.dispose();if(t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++)e.deleteFramebuffer(n.__webglFramebuffer[t]),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[t]);else e.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&e.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer&&e.deleteRenderbuffer(n.__webglColorRenderbuffer),n.__webglDepthRenderbuffer&&e.deleteRenderbuffer(n.__webglDepthRenderbuffer);if(t.isMultiRenderTarget){const n=t.textures;for(let t=0,r=n.length;t<r;t++){const r=i.get(n[t]);r.__webglTexture&&(e.deleteTexture(r.__webglTexture),o.memory.textures--),i.remove(n[t])}}i.remove(t.texture),i.remove(t)}(n),o.memory.textures--}let E=0;function L(t,r){const a=i.get(t);if(t.isVideoTexture&&function(e){const t=o.render.frame;h.get(e)!==t&&(h.set(e,t),e.update())}(t),t.version>0&&a.__version!==t.version){const e=t.image;if(void 0===e)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==e.complete)return void R(a,t,r);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_2D,a.__webglTexture)}function M(t,r){const o=i.get(t);t.version>0&&o.__version!==t.version?function(t,i,r){if(6!==i.image.length)return;F(t,i),n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,i.unpackAlignment);const o=i&&(i.isCompressedTexture||i.image[0].isCompressedTexture),l=i.image[0]&&i.image[0].isDataTexture,d=[];for(let e=0;e<6;e++)d[e]=o||l?l?i.image[e].image:i.image[e]:g(i.image[e],!1,!0,c);const u=d[0],h=_(u)||s,p=a.convert(i.format),f=a.convert(i.type),m=T(i.internalFormat,p,f);let A;if(w(e.TEXTURE_CUBE_MAP,i,h),o){for(let t=0;t<6;t++){A=d[t].mipmaps;for(let r=0;r<A.length;r++){const a=A[r];i.format!==three.RGBAFormat&&i.format!==three.RGBFormat?null!==p?n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,m,a.width,a.height,0,a.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,m,a.width,a.height,0,p,f,a.data)}}t.__maxMipLevel=A.length-1}else{A=i.mipmaps;for(let t=0;t<6;t++)if(l){n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,m,d[t].width,d[t].height,0,p,f,d[t].data);for(let i=0;i<A.length;i++){const r=A[i].image[t].image;n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,m,r.width,r.height,0,p,f,r.data)}}else{n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,m,p,f,d[t]);for(let i=0;i<A.length;i++){const r=A[i];n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,m,p,f,r.image[t])}}t.__maxMipLevel=A.length}v(i,h)&&x(e.TEXTURE_CUBE_MAP,i,u.width,u.height);t.__version=i.version,i.onUpdate&&i.onUpdate(i)}(o,t,r):(n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_CUBE_MAP,o.__webglTexture))}const P={[three.RepeatWrapping]:e.REPEAT,[three.ClampToEdgeWrapping]:e.CLAMP_TO_EDGE,[three.MirroredRepeatWrapping]:e.MIRRORED_REPEAT},y={[three.NearestFilter]:e.NEAREST,[three.NearestMipmapNearestFilter]:e.NEAREST_MIPMAP_NEAREST,[three.NearestMipmapLinearFilter]:e.NEAREST_MIPMAP_LINEAR,[three.LinearFilter]:e.LINEAR,[three.LinearMipmapNearestFilter]:e.LINEAR_MIPMAP_NEAREST,[three.LinearMipmapLinearFilter]:e.LINEAR_MIPMAP_LINEAR};function w(n,a,o){o?(e.texParameteri(n,e.TEXTURE_WRAP_S,P[a.wrapS]),e.texParameteri(n,e.TEXTURE_WRAP_T,P[a.wrapT]),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,P[a.wrapR]),e.texParameteri(n,e.TEXTURE_MAG_FILTER,y[a.magFilter]),e.texParameteri(n,e.TEXTURE_MIN_FILTER,y[a.minFilter])):(e.texParameteri(n,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(n,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,e.CLAMP_TO_EDGE),a.wrapS===three.ClampToEdgeWrapping&&a.wrapT===three.ClampToEdgeWrapping||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(n,e.TEXTURE_MAG_FILTER,A(a.magFilter)),e.texParameteri(n,e.TEXTURE_MIN_FILTER,A(a.minFilter)),a.minFilter!==three.NearestFilter&&a.minFilter!==three.LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));const l=t.get("EXT_texture_filter_anisotropic");if(l){if(a.type===three.FloatType&&null===t.get("OES_texture_float_linear"))return;if(a.type===three.HalfFloatType&&null===(s||t.get("OES_texture_half_float_linear")))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(e.texParameterf(n,l.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function F(t,n){void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",S),t.__webglTexture=e.createTexture(),o.memory.textures++)}function R(t,i,r){let o=e.TEXTURE_2D;i.isDataTexture2DArray&&(o=e.TEXTURE_2D_ARRAY),i.isDataTexture3D&&(o=e.TEXTURE_3D),F(t,i),n.activeTexture(e.TEXTURE0+r),n.bindTexture(o,t.__webglTexture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,i.unpackAlignment);const l=function(e){return!s&&(e.wrapS!==three.ClampToEdgeWrapping||e.wrapT!==three.ClampToEdgeWrapping||e.minFilter!==three.NearestFilter&&e.minFilter!==three.LinearFilter)}(i)&&!1===_(i.image),c=g(i.image,l,!1,d),u=_(c)||s,h=a.convert(i.format);let p,f=a.convert(i.type),m=T(i.internalFormat,h,f);w(o,i,u);const A=i.mipmaps;if(i.isDepthTexture)m=e.DEPTH_COMPONENT,s?m=i.type===three.FloatType?e.DEPTH_COMPONENT32F:i.type===three.UnsignedIntType?e.DEPTH_COMPONENT24:i.type===three.UnsignedInt248Type?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT16:i.type===three.FloatType&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),i.format===three.DepthFormat&&m===e.DEPTH_COMPONENT&&i.type!==three.UnsignedShortType&&i.type!==three.UnsignedIntType&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),i.type=three.UnsignedShortType,f=a.convert(i.type)),i.format===three.DepthStencilFormat&&m===e.DEPTH_COMPONENT&&(m=e.DEPTH_STENCIL,i.type!==three.UnsignedInt248Type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),i.type=three.UnsignedInt248Type,f=a.convert(i.type))),n.texImage2D(e.TEXTURE_2D,0,m,c.width,c.height,0,h,f,null);else if(i.isDataTexture)if(A.length>0&&u){for(let t=0,i=A.length;t<i;t++)p=A[t],n.texImage2D(e.TEXTURE_2D,t,m,p.width,p.height,0,h,f,p.data);i.generateMipmaps=!1,t.__maxMipLevel=A.length-1}else n.texImage2D(e.TEXTURE_2D,0,m,c.width,c.height,0,h,f,c.data),t.__maxMipLevel=0;else if(i.isCompressedTexture){for(let t=0,r=A.length;t<r;t++)p=A[t],i.format!==three.RGBAFormat&&i.format!==three.RGBFormat?null!==h?n.compressedTexImage2D(e.TEXTURE_2D,t,m,p.width,p.height,0,p.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(e.TEXTURE_2D,t,m,p.width,p.height,0,h,f,p.data);t.__maxMipLevel=A.length-1}else if(i.isDataTexture2DArray)n.texImage3D(e.TEXTURE_2D_ARRAY,0,m,c.width,c.height,c.depth,0,h,f,c.data),t.__maxMipLevel=0;else if(i.isDataTexture3D)n.texImage3D(e.TEXTURE_3D,0,m,c.width,c.height,c.depth,0,h,f,c.data),t.__maxMipLevel=0;else if(A.length>0&&u){for(let t=0,i=A.length;t<i;t++)p=A[t],n.texImage2D(e.TEXTURE_2D,t,m,h,f,p);i.generateMipmaps=!1,t.__maxMipLevel=A.length-1}else n.texImage2D(e.TEXTURE_2D,0,m,h,f,c),t.__maxMipLevel=0;v(i,u)&&x(o,i,c.width,c.height),t.__version=i.version,i.onUpdate&&i.onUpdate(i)}function C(t,r,o,s,l){const c=a.convert(o.format),d=a.convert(o.type),u=T(o.internalFormat,c,d);n.texImage2D(l,0,u,r.width,r.height,0,c,d,null),e.bindFramebuffer(e.FRAMEBUFFER,t),e.framebufferTexture2D(e.FRAMEBUFFER,s,l,i.get(o).__webglTexture,0),e.bindFramebuffer(e.FRAMEBUFFER,null)}function N(t,n,i){if(e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer&&!n.stencilBuffer){let r=e.DEPTH_COMPONENT16;if(i){const t=n.depthTexture;t&&t.isDepthTexture&&(t.type===three.FloatType?r=e.DEPTH_COMPONENT32F:t.type===three.UnsignedIntType&&(r=e.DEPTH_COMPONENT24));const i=I(n);e.renderbufferStorageMultisample(e.RENDERBUFFER,i,r,n.width,n.height)}else e.renderbufferStorage(e.RENDERBUFFER,r,n.width,n.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)}else if(n.depthBuffer&&n.stencilBuffer){if(i){const t=I(n);e.renderbufferStorageMultisample(e.RENDERBUFFER,t,e.DEPTH24_STENCIL8,n.width,n.height)}else e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,n.width,n.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)}else{const t=a.convert(n.texture.format),r=a.convert(n.texture.type),o=T(n.texture.internalFormat,t,r);if(i){const t=I(n);e.renderbufferStorageMultisample(e.RENDERBUFFER,t,o,n.width,n.height)}else e.renderbufferStorage(e.RENDERBUFFER,o,n.width,n.height)}e.bindRenderbuffer(e.RENDERBUFFER,null)}function D(t){const n=i.get(t),r=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,n){if(n&&n.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(e.FRAMEBUFFER,t),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),L(n.depthTexture,0);const r=i.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===three.DepthFormat)e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,r,0);else{if(n.depthTexture.format!==three.DepthStencilFormat)throw new Error("Unknown depthTexture format");e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,r,0)}}(n.__webglFramebuffer,t)}else if(r){n.__webglDepthbuffer=[];for(let i=0;i<6;i++)e.bindFramebuffer(e.FRAMEBUFFER,n.__webglFramebuffer[i]),n.__webglDepthbuffer[i]=e.createRenderbuffer(),N(n.__webglDepthbuffer[i],t,!1)}else e.bindFramebuffer(e.FRAMEBUFFER,n.__webglFramebuffer),n.__webglDepthbuffer=e.createRenderbuffer(),N(n.__webglDepthbuffer,t,!1);e.bindFramebuffer(e.FRAMEBUFFER,null)}function I(e){return s&&e.isWebGLMultisampleRenderTarget?Math.min(u,e.samples):0}let U=!1,O=!1;this.allocateTextureUnit=function(){const e=E;return e>=l&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+l),E+=1,e},this.resetTextureUnits=function(){E=0},this.setTexture2D=L,this.setTexture2DArray=function(t,r){const a=i.get(t);t.version>0&&a.__version!==t.version?R(a,t,r):(n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_2D_ARRAY,a.__webglTexture))},this.setTexture3D=function(t,r){const a=i.get(t);t.version>0&&a.__version!==t.version?R(a,t,r):(n.activeTexture(e.TEXTURE0+r),n.bindTexture(e.TEXTURE_3D,a.__webglTexture))},this.setTextureCube=M,this.setupRenderTarget=function(l){const c=i.get(l),d=i.get(l.texture);l.addEventListener("dispose",b),d.__webglTexture=e.createTexture(),o.memory.textures++;const u=!0===l.isWebGLCubeRenderTarget,h=!0===l.isMultiRenderTarget,p=!0===l.isWebGLMultisampleRenderTarget,f=_(l)||s;if(!s||l.texture.format!==three.RGBFormat||l.texture.type!==three.FloatType&&l.texture.type!==three.HalfFloatType||(l.texture.format=three.RGBAFormat,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),u){c.__webglFramebuffer=[];for(let t=0;t<6;t++)c.__webglFramebuffer[t]=e.createFramebuffer()}else if(c.__webglFramebuffer=e.createFramebuffer(),h)if(r.isWebGL2||t.get("WEBGL_draw_buffers"))for(let t=0,n=l.textures.length;t<n;t++){const n=i.get(l.textures[t]);void 0===n.__webglTexture&&(n.__webglTexture=e.createTexture(),o.memory.textures++)}else console.warn("THREE.WebGLRenderer: MultiRenderTarget can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(p)if(s){c.__webglMultisampledFramebuffer=e.createFramebuffer(),c.__webglColorRenderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,c.__webglColorRenderbuffer);const t=a.convert(l.texture.format),n=a.convert(l.texture.type),i=T(l.texture.internalFormat,t,n),r=I(l);e.renderbufferStorageMultisample(e.RENDERBUFFER,r,i,l.width,l.height),e.bindFramebuffer(e.FRAMEBUFFER,c.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,c.__webglColorRenderbuffer),e.bindRenderbuffer(e.RENDERBUFFER,null),l.depthBuffer&&(c.__webglDepthRenderbuffer=e.createRenderbuffer(),N(c.__webglDepthRenderbuffer,l,!0)),e.bindFramebuffer(e.FRAMEBUFFER,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(u){n.bindTexture(e.TEXTURE_CUBE_MAP,d.__webglTexture),w(e.TEXTURE_CUBE_MAP,l.texture,f);for(let t=0;t<6;t++)C(c.__webglFramebuffer[t],l,l.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+t);v(l.texture,f)&&x(e.TEXTURE_CUBE_MAP,l.texture,l.width,l.height),n.bindTexture(e.TEXTURE_CUBE_MAP,null)}else if(h){const t=l.textures;for(let r=0,a=t.length;r<a;r++){const a=t[r],o=i.get(a);n.bindTexture(e.TEXTURE_2D,o.__webglTexture),w(e.TEXTURE_2D,a,f),C(c.__webglFramebuffer,l,a,e.COLOR_ATTACHMENT0+r,e.TEXTURE_2D),v(l.texture,f)&&x(e.TEXTURE_2D,a,l.width,l.height)}n.bindTexture(e.TEXTURE_2D,null)}else n.bindTexture(e.TEXTURE_2D,d.__webglTexture),w(e.TEXTURE_2D,l.texture,f),C(c.__webglFramebuffer,l,l.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D),v(l.texture,f)&&x(e.TEXTURE_2D,l.texture,l.width,l.height),n.bindTexture(e.TEXTURE_2D,null);l.depthBuffer&&D(l)},this.updateRenderTargetMipmap=function(t){const r=t.texture;if(v(r,_(t)||s)){const a=t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,o=i.get(r).__webglTexture;n.bindTexture(a,o),x(a,r,t.width,t.height),n.bindTexture(a,null)}},this.updateMultisampleRenderTarget=function(t){if(t.isWebGLMultisampleRenderTarget)if(s){const n=i.get(t);e.bindFramebuffer(e.READ_FRAMEBUFFER,n.__webglMultisampledFramebuffer),e.bindFramebuffer(e.DRAW_FRAMEBUFFER,n.__webglFramebuffer);const r=t.width,a=t.height;let o=e.COLOR_BUFFER_BIT;t.depthBuffer&&(o|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&(o|=e.STENCIL_BUFFER_BIT),e.blitFramebuffer(0,0,r,a,0,0,r,a,o,e.NEAREST),e.bindFramebuffer(e.FRAMEBUFFER,n.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(e,t){e&&e.isWebGLRenderTarget&&(!1===U&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),U=!0),e=e.texture),L(e,t)},this.safeSetTextureCube=function(e,t){e&&e.isWebGLCubeRenderTarget&&(!1===O&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),O=!0),e=e.texture),M(e,t)}}class MultiRenderTarget extends three.WebGLRenderTarget{constructor(e,t,n){super(e?e[0].image.width:void 0,e?e[0].image.height:void 0),this.textures=e,this.isMultiRenderTarget=!0,e&&(this.texture=e[0]),this.depthBuffer=t,this.stencilBuffer=n}copy(e){super.copy(e),this.textures=[this.texture];for(let t=1,n=e.textures.length;t<n;t++)this.textures[t]=e.textures[t].clone();return this}setSize(e,t){if(this.width!==e||this.height!==t){this.width=e,this.height=t;for(let n=0,i=this.textures.length;n<i;n++)this.textures[n].image.width=e,this.textures[n].image.height=t;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}}function WebGLBindingStates(e,t,n,i){const r=e.getParameter(e.MAX_VERTEX_ATTRIBS),a=i.isWebGL2?null:t.get("OES_vertex_array_object"),o=i.isWebGL2||null!==a,s={},l=h(null);let c=l;function d(t){return i.isWebGL2?e.bindVertexArray(t):a.bindVertexArrayOES(t)}function u(t){return i.isWebGL2?e.deleteVertexArray(t):a.deleteVertexArrayOES(t)}function h(e){const t=[],n=[],i=[];for(let e=0;e<r;e++)t[e]=0,n[e]=0,i[e]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:i,object:e,attributes:{},index:null}}function p(){const e=c.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function f(e){m(e,0)}function m(n,r){const a=c.newAttributes,o=c.enabledAttributes,s=c.attributeDivisors;if(a[n]=1,0===o[n]&&(e.enableVertexAttribArray(n),o[n]=1),s[n]!==r){(i.isWebGL2?e:t.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),s[n]=r}}function g(){const t=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==t[i]&&(e.disableVertexAttribArray(i),n[i]=0)}function _(t,n,r,a,o,s){!0!==i.isWebGL2||r!==e.INT&&r!==e.UNSIGNED_INT?e.vertexAttribPointer(t,n,r,a,o,s):e.vertexAttribIPointer(t,n,r,o,s)}function v(){x(),c!==l&&(c=l,d(c.object))}function x(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,u,v,x){let T=!1;if(o){const t=function(t,n,r){const o=!0===r.wireframe;let l=s[t.id];void 0===l&&(l={},s[t.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let d=c[o];void 0===d&&(d=h(i.isWebGL2?e.createVertexArray():a.createVertexArrayOES()),c[o]=d);return d}(v,u,l);c!==t&&(c=t,d(c.object)),T=function(e,t){const n=c.attributes,i=e.attributes;let r=0;for(const e in i){const t=n[e],a=i[e];if(void 0===t)return!0;if(t.attribute!==a)return!0;if(t.data!==a.data)return!0;r++}return c.attributesNum!==r||c.index!==t}(v,x),T&&function(e,t){const n={},i=e.attributes;let r=0;for(const e in i){const t=i[e],a={};a.attribute=t,t.data&&(a.data=t.data),n[e]=a,r++}c.attributes=n,c.attributesNum=r,c.index=t}(v,x)}else{const e=!0===l.wireframe;c.geometry===v.id&&c.program===u.id&&c.wireframe===e||(c.geometry=v.id,c.program=u.id,c.wireframe=e,T=!0)}!0===r.isInstancedMesh&&(T=!0),null!==x&&n.update(x,e.ELEMENT_ARRAY_BUFFER),T&&(!function(r,a,o,s){if(!1===i.isWebGL2&&(r.isInstancedMesh||s.isInstancedBufferGeometry)&&null===t.get("ANGLE_instanced_arrays"))return;p();const l=s.attributes,c=o.getAttributes(),d=a.defaultAttributeValues;for(const t in c){const i=c[t];if(i>=0){const a=l[t];if(void 0!==a){const t=a.normalized,r=a.itemSize,o=n.get(a);if(void 0===o)continue;const l=o.buffer,c=o.type,d=o.bytesPerElement;if(a.isInterleavedBufferAttribute){const n=a.data,o=n.stride,u=a.offset;n&&n.isInstancedInterleavedBuffer?(m(i,n.meshPerAttribute),void 0===s._maxInstanceCount&&(s._maxInstanceCount=n.meshPerAttribute*n.count)):f(i),e.bindBuffer(e.ARRAY_BUFFER,l),_(i,r,c,t,o*d,u*d)}else{if(a.isInstancedBufferAttribute){const e=a.meshPerAttribute;16===r?(m(i+0,e),m(i+1,e),m(i+2,e),m(i+3,e)):m(i,e),void 0===s._maxInstanceCount&&(s._maxInstanceCount=a.meshPerAttribute*a.count)}else f(i);e.bindBuffer(e.ARRAY_BUFFER,l),16===r?(e.vertexAttribPointer(i+0,4,c,!1,64,0),e.vertexAttribPointer(i+1,4,c,!1,64,16),e.vertexAttribPointer(i+2,4,c,!1,64,32),e.vertexAttribPointer(i+3,4,c,!1,64,48)):e.vertexAttribPointer(i,r,c,t,0,0)}}else if("instanceMatrix"===t){const t=n.get(r.instanceMatrix);if(void 0===t)continue;const a=t.buffer,o=t.type;m(i+0,1),m(i+1,1),m(i+2,1),m(i+3,1),e.bindBuffer(e.ARRAY_BUFFER,a),e.vertexAttribPointer(i+0,4,o,!1,64,0),e.vertexAttribPointer(i+1,4,o,!1,64,16),e.vertexAttribPointer(i+2,4,o,!1,64,32),e.vertexAttribPointer(i+3,4,o,!1,64,48)}else if("instanceColor"===t){const t=n.get(r.instanceColor);if(void 0===t)continue;const a=t.buffer,o=t.type;m(i,1),e.bindBuffer(e.ARRAY_BUFFER,a),e.vertexAttribPointer(i,3,o,!1,12,0)}else if(void 0!==d){const n=d[t];if(void 0!==n)switch(n.length){case 2:e.vertexAttrib2fv(i,n);break;case 3:e.vertexAttrib3fv(i,n);break;case 4:e.vertexAttrib4fv(i,n);break;default:e.vertexAttrib1fv(i,n)}}}}g()}(r,l,u,v),null!==x&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.get(x).buffer))},reset:v,resetDefaultState:x,dispose:function(){v();for(const e in s){const t=s[e];for(const e in t){const n=t[e];for(const e in n)u(n[e].object),delete n[e];delete t[e]}delete s[e]}},releaseStatesOfGeometry:function(e){if(void 0===s[e.id])return;const t=s[e.id];for(const e in t){const n=t[e];for(const e in n)u(n[e].object),delete n[e];delete t[e]}delete s[e.id]},releaseStatesOfProgram:function(e){for(const t in s){const n=s[t];if(void 0===n[e.id])continue;const i=n[e.id];for(const e in i)u(i[e].object),delete i[e];delete n[e.id]}},initAttributes:p,enableAttribute:f,disableUnusedAttributes:g}}function createCanvasElement(){const e=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return e.style.display="block",e}function WebGLRenderer(e){const t=void 0!==(e=e||{}).canvas?e.canvas:createCanvasElement(),n=void 0!==e.context?e.context:null,i=void 0!==e.alpha&&e.alpha,r=void 0===e.depth||e.depth,a=void 0===e.stencil||e.stencil,o=void 0!==e.antialias&&e.antialias,s=void 0===e.premultipliedAlpha||e.premultipliedAlpha,l=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,c=void 0!==e.powerPreference?e.powerPreference:"default",d=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat;let u=null,h=null;const p=[];this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=three.LinearEncoding,this.physicallyCorrectLights=!1,this.toneMapping=three.NoToneMapping,this.toneMappingExposure=1,this.maxMorphTargets=8,this.maxMorphNormals=4;const f=this;let m=!1,g=null,_=0,v=0,x=null,T=null,A=-1,S=null;const b=new three.Vector4,E=new three.Vector4;let L=null,M=t.width,P=t.height,y=1,w=null,F=null;const R=new three.Vector4(0,0,M,P),C=new three.Vector4(0,0,M,P);let N=!1,D=[];const I=new three.Frustum;let U=!1,O=!1;const B=new three.Matrix4,G=new three.Vector3,V={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function k(){return null===x?y:1}let H,W,X,z,j,Y,Q,q,Z,K,$,J,ee,te,ne,ie,re,ae,oe,se,le,ce=n;function de(e,n){for(let i=0;i<e.length;i++){const r=e[i],a=t.getContext(r,n);if(null!==a)return a}return null}try{const e={alpha:i,depth:r,stencil:a,antialias:o,premultipliedAlpha:s,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:d};if(t.addEventListener("webglcontextlost",fe,!1),t.addEventListener("webglcontextrestored",me,!1),null===ce){const t=["webgl2","webgl","experimental-webgl"];if(!0===f.isWebGL1Renderer&&t.shift(),ce=de(t,e),null===ce)throw de(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===ce.getShaderPrecisionFormat&&(ce.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function ue(){H=new WebGLExtensions(ce),W=new WebGLCapabilities(ce,H,e),H.init(W),se=new WebGLUtils(ce,H,W),X=new WebGLState(ce,H,W),X.scissor(E.copy(C).multiplyScalar(y).floor()),X.viewport(b.copy(R).multiplyScalar(y).floor()),z=new WebGLInfo(ce),j=new WebGLProperties,Y=new WebGLTextures(ce,H,X,j,W,se,z),Q=new WebGLCubeMaps(f),q=new WebGLAttributes(ce,W),le=new WebGLBindingStates(ce,H,q,W),Z=new WebGLGeometries(ce,q,z,le),K=new WebGLObjects(ce,Z,q,z),re=new WebGLMorphtargets(ce),ne=new WebGLClipping(j),$=new WebGLPrograms(f,Q,H,W,le,ne),J=new WebGLMaterials(j),ee=new WebGLRenderLists(j),te=new WebGLRenderStates(H,W),ie=new WebGLBackground(f,Q,X,K,s),ae=new WebGLBufferRenderer(ce,H,z,W),oe=new WebGLIndexedBufferRenderer(ce,H,z,W),z.programs=$.programs,f.capabilities=W,f.extensions=H,f.properties=j,f.renderLists=ee,f.state=X,f.info=z}ue();const he=new WebXRManager(f,ce);this.xr=he;const pe=new WebGLShadowMap(f,K,W.maxTextureSize);function fe(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),m=!0}function me(){console.log("THREE.WebGLRenderer: Context Restored."),m=!1,ue()}function ge(e){const t=e.target;t.removeEventListener("dispose",ge),function(e){_e(e),j.remove(e)}(t)}function _e(e){const t=j.get(e).program;void 0!==t&&$.releaseProgram(t)}this.shadowMap=pe,this.getContext=function(){return ce},this.getContextAttributes=function(){return ce.getContextAttributes()},this.forceContextLoss=function(){const e=H.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){const e=H.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return y},this.setPixelRatio=function(e){void 0!==e&&(y=e,this.setSize(M,P,!1))},this.getSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),e=new Vector2),e.set(M,P)},this.setSize=function(e,n,i){he.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(M=e,P=n,t.width=Math.floor(e*y),t.height=Math.floor(n*y),!1!==i&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),e=new Vector2),e.set(M*y,P*y).floor()},this.setDrawingBufferSize=function(e,n,i){M=e,P=n,y=i,t.width=Math.floor(e*i),t.height=Math.floor(n*i),this.setViewport(0,0,e,n)},this.getCurrentViewport=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),e=new three.Vector4),e.copy(b)},this.getViewport=function(e){return e.copy(R)},this.setViewport=function(e,t,n,i){e.isVector4?R.set(e.x,e.y,e.z,e.w):R.set(e,t,n,i),X.viewport(b.copy(R).multiplyScalar(y).floor())},this.getScissor=function(e){return e.copy(C)},this.setScissor=function(e,t,n,i){e.isVector4?C.set(e.x,e.y,e.z,e.w):C.set(e,t,n,i),X.scissor(E.copy(C).multiplyScalar(y).floor())},this.getScissorTest=function(){return N},this.setScissorTest=function(e){X.setScissorTest(N=e)},this.setOpaqueSort=function(e){w=e},this.setTransparentSort=function(e){F=e},this.getClearColor=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getClearColor() now requires a Color as an argument"),e=new Color),e.copy(ie.getClearColor())},this.setClearColor=function(){ie.setClearColor.apply(ie,arguments)},this.getClearAlpha=function(){return ie.getClearAlpha()},this.setClearAlpha=function(){ie.setClearAlpha.apply(ie,arguments)},this.clear=function(e,t,n){let i=0;(void 0===e||e)&&(i|=ce.COLOR_BUFFER_BIT),(void 0===t||t)&&(i|=ce.DEPTH_BUFFER_BIT),(void 0===n||n)&&(i|=ce.STENCIL_BUFFER_BIT),ce.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",fe,!1),t.removeEventListener("webglcontextrestored",me,!1),ee.dispose(),te.dispose(),j.dispose(),Q.dispose(),K.dispose(),le.dispose(),he.dispose(),xe.stop()},this.renderBufferImmediate=function(e,t){le.initAttributes();const n=j.get(e);e.hasPositions&&!n.position&&(n.position=ce.createBuffer()),e.hasNormals&&!n.normal&&(n.normal=ce.createBuffer()),e.hasUvs&&!n.uv&&(n.uv=ce.createBuffer()),e.hasColors&&!n.color&&(n.color=ce.createBuffer());const i=t.getAttributes();e.hasPositions&&(ce.bindBuffer(ce.ARRAY_BUFFER,n.position),ce.bufferData(ce.ARRAY_BUFFER,e.positionArray,ce.DYNAMIC_DRAW),le.enableAttribute(i.position),ce.vertexAttribPointer(i.position,3,ce.FLOAT,!1,0,0)),e.hasNormals&&(ce.bindBuffer(ce.ARRAY_BUFFER,n.normal),ce.bufferData(ce.ARRAY_BUFFER,e.normalArray,ce.DYNAMIC_DRAW),le.enableAttribute(i.normal),ce.vertexAttribPointer(i.normal,3,ce.FLOAT,!1,0,0)),e.hasUvs&&(ce.bindBuffer(ce.ARRAY_BUFFER,n.uv),ce.bufferData(ce.ARRAY_BUFFER,e.uvArray,ce.DYNAMIC_DRAW),le.enableAttribute(i.uv),ce.vertexAttribPointer(i.uv,2,ce.FLOAT,!1,0,0)),e.hasColors&&(ce.bindBuffer(ce.ARRAY_BUFFER,n.color),ce.bufferData(ce.ARRAY_BUFFER,e.colorArray,ce.DYNAMIC_DRAW),le.enableAttribute(i.color),ce.vertexAttribPointer(i.color,3,ce.FLOAT,!1,0,0)),le.disableUnusedAttributes(),ce.drawArrays(ce.TRIANGLES,0,e.count),e.count=0},this.renderBufferDirect=function(e,t,n,i,r,a){null===t&&(t=V);const o=r.isMesh&&r.matrixWorld.determinant()<0,s=Ee(e,t,i,r);X.setMaterial(i,o);let l=n.index;const c=n.attributes.position;if(null===l){if(void 0===c||0===c.count)return}else if(0===l.count)return;let d,u=1;!0===i.wireframe&&(l=Z.getWireframeAttribute(n),u=2),(i.morphTargets||i.morphNormals)&&re.update(r,n,i,s),le.setup(r,i,s,n,l);let h=ae;null!==l&&(d=q.get(l),h=oe,h.setIndex(d));const p=null!==l?l.count:c.count,f=n.drawRange.start*u,m=n.drawRange.count*u,g=null!==a?a.start*u:0,_=null!==a?a.count*u:1/0,v=Math.max(f,g),x=Math.min(p,f+m,g+_)-1,T=Math.max(0,x-v+1);if(0!==T){if(r.isMesh)!0===i.wireframe?(X.setLineWidth(i.wireframeLinewidth*k()),h.setMode(ce.LINES)):h.setMode(ce.TRIANGLES);else if(r.isLine){let e=i.linewidth;void 0===e&&(e=1),X.setLineWidth(e*k()),r.isLineSegments?h.setMode(ce.LINES):r.isLineLoop?h.setMode(ce.LINE_LOOP):h.setMode(ce.LINE_STRIP)}else r.isPoints?h.setMode(ce.POINTS):r.isSprite&&h.setMode(ce.TRIANGLES);if(r.isInstancedMesh)h.renderInstances(v,T,r.count);else if(n.isInstancedBufferGeometry){const e=Math.min(n.instanceCount,n._maxInstanceCount);h.renderInstances(v,T,e)}else h.render(v,T)}},this.compile=function(e,t){h=te.get(e),h.init(),e.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&(h.pushLight(e),e.castShadow&&h.pushShadow(e))})),h.setupLights();const n=new WeakMap;e.traverse((function(t){const i=t.material;if(i)if(Array.isArray(i))for(let r=0;r<i.length;r++){const a=i[r];!1===n.has(a)&&(be(a,e,t),n.set(a))}else!1===n.has(i)&&(be(i,e,t),n.set(i))}))};let ve=null;const xe=new WebGLAnimation;function Te(e,t,n,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)n=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)h.pushLight(e),e.castShadow&&h.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||I.intersectsSprite(e)){i&&G.setFromMatrixPosition(e.matrixWorld).applyMatrix4(B);const t=K.update(e),r=e.material;r.visible&&u.push(e,t,r,n,G.z,null)}}else if(e.isImmediateRenderObject)i&&G.setFromMatrixPosition(e.matrixWorld).applyMatrix4(B),u.push(e,null,e.material,n,G.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.frame!==z.render.frame&&(e.skeleton.update(),e.skeleton.frame=z.render.frame),!e.frustumCulled||I.intersectsObject(e))){i&&G.setFromMatrixPosition(e.matrixWorld).applyMatrix4(B);const t=K.update(e),r=e.material;if(Array.isArray(r)){const i=t.groups;for(let a=0,o=i.length;a<o;a++){const o=i[a],s=r[o.materialIndex];s&&s.visible&&u.push(e,t,s,n,G.z,o)}}else r.visible&&u.push(e,t,r,n,G.z,null)}const r=e.children;for(let e=0,a=r.length;e<a;e++)Te(r[e],t,n,i)}function Ae(e,t,n){const i=!0===t.isScene?t.overrideMaterial:null;for(let r=0,a=e.length;r<a;r++){const a=e[r],o=a.object,s=a.geometry,l=null===i?a.material:i,c=a.group;if(n.isArrayCamera){const e=n.cameras;for(let n=0,i=e.length;n<i;n++){const i=e[n];o.layers.test(i.layers)&&(X.viewport(b.copy(i.viewport)),h.setupLightsView(i),Se(o,t,i,s,l,c))}}else Se(o,t,n,s,l,c)}}function Se(e,t,n,i,r,a){if(e.onBeforeRender(f,t,n,i,r,a),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),e.isImmediateRenderObject){const i=Ee(n,t,r,e);X.setMaterial(r),le.reset(),function(e,t){e.render((function(e){f.renderBufferImmediate(e,t)}))}(e,i)}else f.renderBufferDirect(n,t,i,r,e,a);e.onAfterRender(f,t,n,i,r,a)}function be(e,t,n){!0!==t.isScene&&(t=V);const i=j.get(e),r=h.state.lights,a=h.state.shadowsArray,o=r.state.version,s=$.getParameters(e,r.state,a,t,n),l=$.getProgramCacheKey(s);let c=i.program,d=!0;if(i.environment=e.isMeshStandardMaterial?t.environment:null,i.fog=t.fog,i.envMap=Q.get(e.envMap||i.environment),void 0===c)e.addEventListener("dispose",ge);else if(c.cacheKey!==l)_e(e);else if(i.lightsStateVersion!==o)d=!1;else{if(void 0!==s.shaderID)return;d=!1}d&&(s.uniforms=$.getUniforms(e),e.onBeforeCompile(s,f),c=$.acquireProgram(s,l),i.program=c,i.uniforms=s.uniforms,i.outputEncoding=s.outputEncoding);const u=i.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(i.numClippingPlanes=ne.numPlanes,i.numIntersection=ne.numIntersection,u.clippingPlanes=ne.uniform),i.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),i.lightsStateVersion=o,i.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotShadowMatrix.value=r.state.spotShadowMatrix,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix);const p=i.program.getUniforms(),m=WebGLUniforms.seqWithValue(p.seq,u);i.uniformsList=m}function Ee(e,t,n,i){!0!==t.isScene&&(t=V),Y.resetTextureUnits();const r=t.fog,a=n.isMeshStandardMaterial?t.environment:null,o=null===x?f.outputEncoding:x.texture.encoding,s=Q.get(n.envMap||a),l=j.get(n),c=h.state.lights;if(!0===U&&(!0===O||e!==S)){const t=e===S&&n.id===A;ne.setState(n,e,t)}n.version===l.__version?n.fog&&l.fog!==r||l.environment!==a||l.needsLights&&l.lightsStateVersion!==c.state.version?be(n,t,i):void 0===l.numClippingPlanes||l.numClippingPlanes===ne.numPlanes&&l.numIntersection===ne.numIntersection?(l.outputEncoding!==o||l.envMap!==s)&&be(n,t,i):be(n,t,i):(be(n,t,i),l.__version=n.version);let d=!1,u=!1,p=!1;const m=l.program,g=m.getUniforms(),_=l.uniforms;if(X.useProgram(m.program)&&(d=!0,u=!0,p=!0),n.id!==A&&(A=n.id,u=!0),d||S!==e){if(g.setValue(ce,"projectionMatrix",e.projectionMatrix),W.logarithmicDepthBuffer&&g.setValue(ce,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),S!==e&&(S=e,u=!0,p=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const t=g.map.cameraPosition;void 0!==t&&t.setValue(ce,G.setFromMatrixPosition(e.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&g.setValue(ce,"isOrthographic",!0===e.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||n.skinning)&&g.setValue(ce,"viewMatrix",e.matrixWorldInverse)}if(n.skinning){g.setOptional(ce,i,"bindMatrix"),g.setOptional(ce,i,"bindMatrixInverse");const e=i.skeleton;if(e){const t=e.bones;if(W.floatVertexTextures){if(null===e.boneTexture){let n=Math.sqrt(4*t.length);n=MathUtils.ceilPowerOfTwo(n),n=Math.max(n,4);const i=new Float32Array(n*n*4);i.set(e.boneMatrices);const r=new DataTexture(i,n,n,three.RGBAFormat,three.FloatType);e.boneMatrices=i,e.boneTexture=r,e.boneTextureSize=n}g.setValue(ce,"boneTexture",e.boneTexture,Y),g.setValue(ce,"boneTextureSize",e.boneTextureSize)}else g.setOptional(ce,e,"boneMatrices")}}var v,T;return(u||l.receiveShadow!==i.receiveShadow)&&(l.receiveShadow=i.receiveShadow,g.setValue(ce,"receiveShadow",i.receiveShadow)),u&&(g.setValue(ce,"toneMappingExposure",f.toneMappingExposure),l.needsLights&&(T=p,(v=_).ambientLightColor.needsUpdate=T,v.lightProbe.needsUpdate=T,v.directionalLights.needsUpdate=T,v.directionalLightShadows.needsUpdate=T,v.pointLights.needsUpdate=T,v.pointLightShadows.needsUpdate=T,v.spotLights.needsUpdate=T,v.spotLightShadows.needsUpdate=T,v.rectAreaLights.needsUpdate=T,v.hemisphereLights.needsUpdate=T),r&&n.fog&&J.refreshFogUniforms(_,r),J.refreshMaterialUniforms(_,n,y,P),WebGLUniforms.upload(ce,l.uniformsList,_,Y)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(WebGLUniforms.upload(ce,l.uniformsList,_,Y),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&g.setValue(ce,"center",i.center),g.setValue(ce,"modelViewMatrix",i.modelViewMatrix),g.setValue(ce,"normalMatrix",i.normalMatrix),g.setValue(ce,"modelMatrix",i.matrixWorld),m}xe.setAnimationLoop((function(e){he.isPresenting||ve&&ve(e)})),"undefined"!=typeof window&&xe.setContext(window),this.setAnimationLoop=function(e){ve=e,he.setAnimationLoop(e),null===e?xe.stop():xe.start()},this.render=function(e,t){let n,i;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),n=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),i=arguments[3]),void 0!==t&&!0!==t.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===m)return;le.resetDefaultState(),A=-1,S=null,!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),!0===he.enabled&&!0===he.isPresenting&&(t=he.getCamera(t)),!0===e.isScene&&e.onBeforeRender(f,e,t,n||x),h=te.get(e,p.length),h.init(),p.push(h),B.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),I.setFromProjectionMatrix(B),O=this.localClippingEnabled,U=ne.init(this.clippingPlanes,O,t),u=ee.get(e,t),u.init(),Te(e,t,0,f.sortObjects),u.finish(),!0===f.sortObjects&&u.sort(w,F),!0===U&&ne.beginShadows();const r=h.state.shadowsArray;pe.render(r,e,t),h.setupLights(),h.setupLightsView(t),!0===U&&ne.endShadows(),!0===this.info.autoReset&&this.info.reset(),void 0!==n&&this.setRenderTarget(n),ie.render(u,e,t,i);const a=u.opaque,o=u.transparent;a.length>0&&Ae(a,e,t),o.length>0&&Ae(o,e,t),!0===e.isScene&&e.onAfterRender(f,e,t),null!==x&&(Y.updateRenderTargetMipmap(x),Y.updateMultisampleRenderTarget(x)),X.buffers.depth.setTest(!0),X.buffers.depth.setMask(!0),X.buffers.color.setMask(!0),X.setPolygonOffset(!1),p.pop(),h=p.length>0?p[p.length-1]:null,u=null},this.setFramebuffer=function(e){g!==e&&null===x&&ce.bindFramebuffer(ce.FRAMEBUFFER,e),g=e},this.getActiveCubeFace=function(){return _},this.getActiveMipmapLevel=function(){return v},this.getRenderList=function(){return u},this.setRenderList=function(e){u=e},this.getRenderTarget=function(){return x},this.setRenderTarget=function(e,t=0,n=0){x=e,_=t,v=n,e&&void 0===j.get(e).__webglFramebuffer&&Y.setupRenderTarget(e);let i=g,r=!1;if(e){const n=j.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(i=n[t],r=!0):i=e.isWebGLMultisampleRenderTarget?j.get(e).__webglMultisampledFramebuffer:n,b.copy(e.viewport),E.copy(e.scissor),L=e.scissorTest}else b.copy(R).multiplyScalar(y).floor(),E.copy(C).multiplyScalar(y).floor(),L=N;if(T!==i&&(ce.bindFramebuffer(ce.FRAMEBUFFER,i),T=i,W.isWebGL2||H.get("WEBGL_draw_buffers"))){let t=!1;if(e instanceof MultiRenderTarget){if(D.length!==e.textures.length||D[0]!==ce.COLOR_ATTACHMENT0){for(let t=0,n=e.textures.length;t<n;t++)D[t]=ce.COLOR_ATTACHMENT0+t;D.length=e.textures.length,t=!0}}else e?1===D.length&&D[0]===ce.COLOR_ATTACHMENT0||(D[0]=ce.COLOR_ATTACHMENT0,D.length=1,t=!0):1===D.length&&D[0]===ce.BACK||(D[0]=ce.BACK,D.length=1,t=!0);t&&(W.isWebGL2?ce.drawBuffers(D):H.get("WEBGL_draw_buffers").drawBuffersWEBGL(D))}if(X.viewport(b),X.scissor(E),X.setScissorTest(L),r){const i=j.get(e.texture);ce.framebufferTexture2D(ce.FRAMEBUFFER,ce.COLOR_ATTACHMENT0,ce.TEXTURE_CUBE_MAP_POSITIVE_X+t,i.__webglTexture,n)}},this.readRenderTargetPixels=function(e,t,n,i,r,a,o){if(!e||!e.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let s=j.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==o&&(s=s[o]),s){let o=!1;s!==T&&(ce.bindFramebuffer(ce.FRAMEBUFFER,s),o=!0);try{const s=e.texture,l=s.format,c=s.type;if(l!==three.RGBAFormat&&se.convert(l)!==ce.getParameter(ce.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const d=c===three.HalfFloatType&&(H.has("EXT_color_buffer_half_float")||W.isWebGL2&&H.has("EXT_color_buffer_float"));if(!(c===three.UnsignedByteType||se.convert(c)===ce.getParameter(ce.IMPLEMENTATION_COLOR_READ_TYPE)||c===three.FloatType&&(W.isWebGL2||H.has("OES_texture_float")||H.has("WEBGL_color_buffer_float"))||d))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");ce.checkFramebufferStatus(ce.FRAMEBUFFER)===ce.FRAMEBUFFER_COMPLETE?t>=0&&t<=e.width-i&&n>=0&&n<=e.height-r&&ce.readPixels(t,n,i,r,se.convert(l),se.convert(c),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{o&&ce.bindFramebuffer(ce.FRAMEBUFFER,T)}}},this.copyFramebufferToTexture=function(e,t,n=0){const i=Math.pow(2,-n),r=Math.floor(t.image.width*i),a=Math.floor(t.image.height*i),o=se.convert(t.format);Y.setTexture2D(t,0),ce.copyTexImage2D(ce.TEXTURE_2D,n,o,e.x,e.y,r,a,0),X.unbindTexture()},this.copyTextureToTexture=function(e,t,n,i=0){const r=t.image.width,a=t.image.height,o=se.convert(n.format),s=se.convert(n.type);Y.setTexture2D(n,0),ce.pixelStorei(ce.UNPACK_FLIP_Y_WEBGL,n.flipY),ce.pixelStorei(ce.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),ce.pixelStorei(ce.UNPACK_ALIGNMENT,n.unpackAlignment),t.isDataTexture?ce.texSubImage2D(ce.TEXTURE_2D,i,e.x,e.y,r,a,o,s,t.image.data):t.isCompressedTexture?ce.compressedTexSubImage2D(ce.TEXTURE_2D,i,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,o,t.mipmaps[0].data):ce.texSubImage2D(ce.TEXTURE_2D,i,e.x,e.y,o,s,t.image),0===i&&n.generateMipmaps&&ce.generateMipmap(ce.TEXTURE_2D),X.unbindTexture()},this.initTexture=function(e){Y.setTexture2D(e,0),X.unbindTexture()},this.resetState=function(){X.reset(),le.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class EquirectangularToCubeGenerator{constructor(e,t={}){this.camera=new three.PerspectiveCamera(90,1,.1,10),this.scene=new three.Scene,this.material=this.createMaterial(e),this.boxMesh=new three.Mesh(new three.BoxBufferGeometry(1,1,1),this.material),this.scene.add(this.boxMesh),this.resolution=t.resolution||1024,this.views=[{t:[1,0,0],u:[0,-1,0]},{t:[-1,0,0],u:[0,-1,0]},{t:[0,1,0],u:[0,0,1]},{t:[0,-1,0],u:[0,0,-1]},{t:[0,0,1],u:[0,-1,0]},{t:[0,0,-1],u:[0,-1,0]}];const n={format:t.format||e.format,magFilter:e.magFilter,minFilter:e.minFilter,type:t.type||e.type,generateMipmaps:e.generateMipmaps,anisotropy:e.anisotropy,encoding:e.encoding};this.renderTarget=new three.WebGLCubeRenderTarget(this.resolution,n)}createMaterial(e){const t=new three.ShaderMaterial({uniforms:{equirectangularMap:{value:e}},vertexShader:"\n\t\t\t    varying vec3 localPosition;\n        \n                void main() {\n                    localPosition = position;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }\n            ",fragmentShader:"\n\t\t\t\t#include <common>\n                varying vec3 localPosition;\n                uniform sampler2D equirectangularMap;\n                \n                vec2 EquirectangularSampleUV(vec3 v) {\n                  \tvec2 uv = vec2(atan(v.z, v.x), asin(v.y));\n                  \tuv *= vec2(0.1591, 0.3183); // inverse atan\n                  \tuv += 0.5;\n                  \treturn uv;\n                }\n                \n                void main() {\n                  \tvec2 uv = EquirectangularSampleUV(normalize(localPosition));\n\t\t\t\t\tuv.x = 0.5-uv.x;\n                  \tgl_FragColor = texture2D(equirectangularMap, uv);\n                }\n            ",blending:three.NoBlending,side:three.BackSide});return t.type="EquirectangularToCubeGenerator",t}update(e){const t=e.getRenderTarget();for(let t=0;t<6;t++){const n=this.views[t];this.camera.position.set(0,0,0),this.camera.up.set(n.u[0],n.u[1],n.u[2]),this.camera.lookAt(n.t[0],n.t[1],n.t[2]),e.setRenderTarget(this.renderTarget,t),e.clear(),e.render(this.scene,this.camera)}return e.setRenderTarget(t),this.renderTarget}dispose(){this.renderTarget.dispose()}}class WVBackground{constructor(e,t,n){this.renderingManager=e,this.settingsDispatcher=t,this.camera=n,this.currentBackgroundVersion=0,this.backgroundEuler=new three.Euler,this.backgroundScene=new three.Scene,this.backgroundCamera=new three.PerspectiveCamera,this.update(),this.settingsDispatcher.subscribe("background",(()=>{this.update(),this.renderingManager.redraw()})),this.settingsDispatcher.subscribe("backgroundRotation",(()=>{this.renderingManager.redraw()}))}syncCamera(){this.backgroundEuler.x=-Math.PI/2,this.backgroundEuler.z=this.settingsDispatcher.settings.backgroundRotation*Math.PI/180,this.backgroundCamera.quaternion.setFromEuler(this.backgroundEuler),this.backgroundCamera.quaternion.multiply(this.camera.quaternion),this.backgroundCamera.aspect===this.camera.aspect&&this.backgroundCamera.fov===this.camera.fov||(this.backgroundCamera.aspect=this.camera.aspect,this.backgroundCamera.fov=this.camera.fov,this.backgroundCamera.updateProjectionMatrix())}update(){this.background=this.toColor(this.settingsDispatcher.settings.background)||this.toGradient(this.settingsDispatcher.settings.background)||this.toSkybox(this.settingsDispatcher.settings.background)||this.toTexture(this.settingsDispatcher.settings.background)}toGradient(e){const t=e;if(t.topColor&&t.bottomColor){const e=document.createElement("canvas");e.width=1,e.height=2;const n=e.getContext("2d");n.fillStyle="#"+t.topColor.getHexString(),n.fillRect(0,0,1,1),n.fillStyle="#"+t.bottomColor.getHexString(),n.fillRect(0,1,1,1);const i=this.toTexture(e);return i.repeat.y=(e.height-1)/e.height,i.offset.y=.5/e.height,i}}toColor(e){const t=e;return void 0!==t.r&&void 0!==t.g&&void 0!==t.b?t:void 0}toTexture(e){if(e instanceof HTMLImageElement||e instanceof HTMLCanvasElement){const t=new three.Texture(e);return t.needsUpdate=!0,t}}toSkybox(e){if(e instanceof HTMLImageElement||e instanceof HTMLCanvasElement){if(4*e.height==3*e.width){const t=new three.CubeTexture(this.getImagesFromSkyboxAtlas(e));return t.needsUpdate=!0,t}if(2*e.height===e.width){const t=new three.Texture(e);t.wrapS=three.RepeatWrapping,t.needsUpdate=!0;return new EquirectangularToCubeGenerator(t,{resolution:three.MathUtils.ceilPowerOfTwo(.6*e.height)}).update(this.renderingManager.renderer)}}else if(e instanceof Array){const t=new three.CubeTexture(e);return t.needsUpdate=!0,t}}getImagesFromSkyboxAtlas(e){const t=[],n=e,i=n.height/3;for(let e=0;e<6;e++){const r=document.createElement("canvas"),a=r.getContext("2d");r.height=i,r.width=i,0===e&&a.drawImage(n,2*i,i,i,i,0,0,i,i),1===e&&a.drawImage(n,0,i*e,i,i,0,0,i,i),2===e&&a.drawImage(n,i,0,i,i,0,0,i,i),3===e&&a.drawImage(n,i,2*i,i,i,0,0,i,i),4===e&&a.drawImage(n,i,i,i,i,0,0,i,i),5===e&&a.drawImage(n,3*i,i,i,i,0,0,i,i),t.push(r)}return t}render(){const e=this.renderingManager.renderer,t=e.xr,n=t.getSession&&t.getSession();if(n&&"additive"===n.environmentBlendMode&&(this.background=null),null!==this.background){if(this.background&&this.background instanceof three.Color)return e.setClearColor(this.background),e.setClearAlpha(1),void e.clear();if(this.background&&(this.background instanceof three.CubeTexture||this.background instanceof three.WebGLCubeRenderTarget)){if(void 0===this.boxMesh){const e=cloneUniforms(three.ShaderLib.cube.uniforms);e.rotMatrix=new three.Uniform(new three.Matrix4);const t=new three.ShaderMaterial({uniforms:e,vertexShader:three.ShaderLib.cube.vertexShader,fragmentShader:three.ShaderLib.cube.fragmentShader,side:three.BackSide,depthTest:!1,depthWrite:!1,fog:!1}),n=new three.BoxBufferGeometry(100,100,100);this.boxMesh=new three.Mesh(n,t),n.deleteAttribute("normal"),n.deleteAttribute("uv"),Object.defineProperty(this.boxMesh.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),this.backgroundScene.children.length=0,this.backgroundScene.add(this.boxMesh)}this.planeMesh&&(this.backgroundScene.remove(this.planeMesh),this.planeMesh=void 0);const t=this.background instanceof three.WebGLCubeRenderTarget?this.background.texture:this.background;this.boxMesh.material.uniforms.envMap.value=t,this.boxMesh.material.uniforms.flipEnvMap.value=t.isCubeTexture?-1:1,this.currentBackground===this.background&&this.currentBackgroundVersion===t.version&&this.currentTonemapping===e.toneMapping||(this.boxMesh.material.needsUpdate=!0,this.currentBackground=this.background,this.currentBackgroundVersion=t.version,this.currentTonemapping=e.toneMapping)}else if(this.background&&this.background instanceof three.Texture){if(void 0===this.planeMesh){const e=new three.PlaneBufferGeometry(2,2);this.planeMesh=new three.Mesh(e,new three.ShaderMaterial({uniforms:cloneUniforms(three.ShaderLib.background.uniforms),vertexShader:three.ShaderLib.background.vertexShader,fragmentShader:three.ShaderLib.background.fragmentShader,side:three.FrontSide,depthTest:!1,depthWrite:!1,fog:!1})),e.deleteAttribute("normal"),Object.defineProperty(this.planeMesh.material,"map",{get:function(){return this.uniforms.t2D.value}}),this.backgroundScene.children.length=0,this.backgroundScene.add(this.planeMesh)}this.boxMesh&&(this.backgroundScene.remove(this.boxMesh),this.boxMesh=void 0),this.planeMesh.material.uniforms.t2D.value=this.background,!0===this.background.matrixAutoUpdate&&this.background.updateMatrix(),this.planeMesh.material.uniforms.uvTransform.value.copy(this.background.matrix),this.currentBackground===this.background&&this.currentBackgroundVersion===this.background.version&&this.currentTonemapping===e.toneMapping||(this.planeMesh.material.needsUpdate=!0,this.currentBackground=this.background,this.currentBackgroundVersion=this.background.version,this.currentTonemapping=e.toneMapping)}this.syncCamera(),e.render(this.backgroundScene,this.backgroundCamera)}}}function Pass(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}Object.assign(Pass.prototype,{setSize:function(){},render:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}),Pass.FullScreenQuad=function(){var e=new three_module_js.OrthographicCamera(-1,1,1,-1,0,1),t=new three_module_js.PlaneGeometry(2,2),n=function(e){this._mesh=new three_module_js.Mesh(t,e)};return Object.defineProperty(n.prototype,"material",{get:function(){return this._mesh.material},set:function(e){this._mesh.material=e}}),Object.assign(n.prototype,{dispose:function(){this._mesh.geometry.dispose()},render:function(t){t.render(this._mesh,e)}}),n}();class EffectPass extends Pass{constructor(e){super(),this.scene=new three.Scene,this.camera=new three.OrthographicCamera(-1,1,1,-1,0,1),this.setFullscreenMaterial(e)}getFullscreenMaterial(){return null!==this.screen?this.screen.material:null}setFullscreenMaterial(e){let t=this.screen;t?t.material=e:(t=new three.Mesh(getFullscreenTriangle(),e),t.frustumCulled=!1,this.scene||(this.scene=new three.Scene),this.scene.add(t),this.screen=t)}render(e,t){e.setRenderTarget(this.renderToScreen?null:t),e.render(this.scene,this.camera)}}let geometry;function getFullscreenTriangle(){if(!geometry){const e=new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),t=new Float32Array([0,0,2,0,0,2]);geometry=new three.BufferGeometry,geometry.setAttribute("position",new three.BufferAttribute(e,3)),geometry.setAttribute("uv",new three.BufferAttribute(t,2))}return geometry}class DepthPeelingRenderPass extends Pass{constructor(e,t,n,i,r,a){super(),this.renderingManager=e,this.settingsDispatcher=t,this.scene=n,this.camera=i,this.background=r,this.edgesAndSsaoPass=a,three.ShaderChunk.depth_peeling_pars_fragment="\n            uniform int depthPeelingEnabled;\n            uniform int transparent;\n            uniform highp sampler2D peelingDepthTexture;\n            uniform float depthPrecisionFix;\n            uniform vec2 viewSize;\n            \n            void depthPeelingFragment() {\n                if (depthPeelingEnabled != 0 && transparent != 0) {\n                    float depth = gl_FragCoord.z;\n                    float prevDepth = texture2D(peelingDepthTexture, gl_FragCoord.xy / viewSize).r;\n                    if (prevDepth + depthPrecisionFix >= depth) discard;\n                }   \n            }\n        ",three.ShaderChunk.depth_peeling_fragment="depthPeelingFragment();",t.subscribe("orderIndependentTransparency",(()=>e.redraw())),this.peelsCount=t.settings.transparencyPeelsCount,t.subscribe("transparencyPeelsCount",(()=>{this.peelsCount=t.settings.transparencyPeelsCount,e.redraw()})),e.uniforms.depthPeelingEnabled.value=Number(this.depthPeelingEnabled),this.combinePeelsPass=new EffectPass(this.createCombinePeelsMaterial())}get depthPeelingEnabled(){return this.settingsDispatcher.settings.orderIndependentTransparency&&this.renderingManager.isFragDepthAvailable()&&this.renderingManager.isDepthTextureAvailable()}get peelsCount(){return this.peelRenderTargets.length}set peelsCount(e){this.peelRenderTargets=[];for(let t=0;t<e;t++){const e=this.createRenderTarget();e.depthTexture=createDepthTexture(this.renderingManager),this.peelRenderTargets.push(e)}}createRenderTarget(){return new three.WebGLRenderTarget(this.renderingManager.width,this.renderingManager.height,{format:three.RGBAFormat,type:three.UnsignedByteType,depthBuffer:!0,stencilBuffer:!1})}createCombinePeelsMaterial(){const e=new three.ShaderMaterial({uniforms:{inputBuffer:{value:null},depthBuffer:{value:null}},vertexShader:"\n                varying vec2 vUv;\n                \n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4(position.xy, 0.0, 1.0);\n                }\n            ",fragmentShader:"\n                varying vec2 vUv;\n                uniform sampler2D inputBuffer;\n                uniform highp sampler2D depthBuffer;\n\n                void main() {\n                    gl_FragDepthEXT = texture2D(depthBuffer, vUv).r;\n                    gl_FragColor = texture2D(inputBuffer, vUv);\n                }\n            ",transparent:!0,depthTest:!0,depthWrite:!1});return e.extensions.fragDepth=!0,e}renderWithDepthPeeling(e,t){this.renderingManager.uniforms.globalTransparent=!1,e.setClearColor(0,0);for(let t=0;t<this.peelsCount;t++)this.renderingManager.uniforms.depthPeelingEnabled.value=Number(t>0),this.renderingManager.uniforms.peelingDepthTexture.value=0===t?null:this.peelRenderTargets[t-1].depthTexture,e.setRenderTarget(this.peelRenderTargets[t]),e.clear(),this.edgesAndSsaoPass.render(e,this.peelRenderTargets[t],!1,(e=>e.isDepthPeelingMaterial&&(e.origTransparent||this.settingsDispatcher.settings.globalOpacity<1)));this.renderingManager.uniforms.globalTransparent=void 0,this.renderingManager.uniforms.depthPeelingEnabled.value=Number(!0),this.renderingManager.uniforms.peelingDepthTexture.value=this.peelRenderTargets[this.peelsCount-1].depthTexture,this.renderingManager.uniforms.globalTransparent=this.settingsDispatcher.settings.globalOpacity<1||void 0,e.setRenderTarget(t),e.clearDepth(),this.background.render(),this.edgesAndSsaoPass.render(e,t,!0,(e=>e.depthTest)),this.renderingManager.uniforms.globalTransparent=void 0,this.renderingManager.uniforms.depthPeelingEnabled.value=Number(!1),this.renderingManager.uniforms.peelingDepthTexture.value=null;for(let n=this.peelsCount-1;n>=0;n--)this.combinePeelsPass.getFullscreenMaterial().uniforms.inputBuffer.value=this.peelRenderTargets[n].texture,this.combinePeelsPass.getFullscreenMaterial().uniforms.depthBuffer.value=this.peelRenderTargets[n].depthTexture,this.combinePeelsPass.render(e,t);this.renderingManager.uniforms.globalTransparent=this.settingsDispatcher.settings.globalOpacity<1||void 0,this.edgesAndSsaoPass.render(e,t,!1,(e=>!e.depthTest)),this.renderingManager.uniforms.globalTransparent=void 0}setSize(e,t){for(const n of this.peelRenderTargets)n.setSize(e,t);this.edgesAndSsaoPass.setSize(e,t)}render(e,t){this.renderingManager.uniforms.globalOpacity.value=this.settingsDispatcher.settings.globalOpacity,this.depthPeelingEnabled?this.renderWithDepthPeeling(e,t):(this.renderingManager.uniforms.globalTransparent=this.settingsDispatcher.settings.globalOpacity<1||void 0,e.setRenderTarget(t),e.clearDepth(),this.background.render(),this.edgesAndSsaoPass.render(e,t,!0,(()=>!0)),this.renderingManager.uniforms.globalTransparent=void 0)}}function createDepthTexture(e){return e.uniforms.depthPrecisionFix.value=e.isWebgl2()?1e-6:1e-5,new three.DepthTexture(void 0,void 0,e.isWebgl2()?three.FloatType:three.UnsignedIntType)}const vertexShader="\n    varying vec2 vUv;\n    varying vec2 vOffsetUvs[4];\n    uniform vec2 texelSize;\n\n    void main() {\n        vUv = uv;\n        vOffsetUvs[0] = vec2(texelSize.x, 0);\n        vOffsetUvs[1] = vec2(-texelSize.x, 0);\n        vOffsetUvs[2] = vec2(0, texelSize.y);\n        vOffsetUvs[3] = vec2(0, -texelSize.y);\n        gl_Position = vec4(position.xy, 0.0, 1.0);\n    }\n",fragmentShaderCommon="\n    varying vec2 vUv;\n    varying vec2 vOffsetUvs[4];\n    uniform highp sampler2D normalBuffer;\n    uniform highp sampler2D depthBuffer;\n    uniform vec2 cameraNearFar;\n    uniform mat4 uProjectionInverse;\n\n    // Camera relative position\n    vec3 computePosition(vec2 coord, float depthSample) {\n        // normalized device coordinates\n        vec4 ndc = vec4((vec3(coord, depthSample) - 0.5) * 2.0, 1.0);\n        vec4 clip = uProjectionInverse * ndc;\n        return clip.xyz / clip.w;\n    }\n\n    vec3 getNormal(vec4 normalSample) {\n        // treat background as surface with normal towards camera\n        return normalSample.xyz == vec3(0) ? vec3(0.0, 0.0, 1.0) : normalSample.xyz;\n    }\n";class EdgesAndSsaoRenderPass{constructor(e,t,n,i){this.settingsDispatcher=e,this.renderingManager=t,this.scene=n,this.camera=i,this.texelSize=new three.Vector2,this.cameraNearFar=new three.Vector2,this.init(),this.settingsDispatcher.subscribe("renderEdges",(()=>this.init()))}init(){this.renderEdges&&!this.multiRenderTarget&&(this.colorTexture=this.createTexture(three.UnsignedByteType,three.RGBAFormat),this.normalTexture=this.createTexture(three.HalfFloatType,three.RGBAFormat),this.idTexture=this.createTexture(three.FloatType,three.RGBAFormat),this.depthTexture=createDepthTexture(this.renderingManager),this.multiRenderTarget=new MultiRenderTarget([this.colorTexture,this.normalTexture,this.idTexture],!0,!1),this.multiRenderTarget.depthTexture=this.depthTexture,this.noiseTexture=this.createNoiseTexture(),this.ssaoRenderTarget=new three.WebGLRenderTarget(1,1,{minFilter:three.LinearFilter,magFilter:three.LinearFilter}),this.ssaoSimpleRenderTarget=this.ssaoRenderTarget.clone(),this.ssaoPass=new EffectPass(this.createSsaoMaterial(!1)),this.ssaoSimplePass=new EffectPass(this.createSsaoMaterial(!0)),this.edgesPass=new EffectPass(this.createEdgesMaterial()))}get renderEdges(){return this.settingsDispatcher.settings.renderEdges&&this.renderingManager.isWebgl2()}createNoiseTexture(){const e=100,t=new Uint8Array(3e4);for(let e=0;e<t.length;++e)t[e]=255*Math.random();const n=new three.DataTexture(t,e,e,three.RGBFormat);return n.onUpdate=disposeImage,n}createTexture(e,t){return new Texture.Texture({width:this.renderingManager.width,height:this.renderingManager.height},void 0,void 0,void 0,three.LinearFilter,three.LinearFilter,t,e,void 0,void 0)}createEdgesMaterial(){const e=new three.ShaderMaterial({uniforms:{inputBuffer:{value:this.colorTexture},normalBuffer:{value:this.normalTexture},idBuffer:{value:this.idTexture},depthBuffer:{value:this.depthTexture},ssaoBuffer:{value:this.ssaoRenderTarget.texture},cameraNearFar:{value:this.cameraNearFar},texelSize:{value:this.texelSize},uProjectionInverse:{value:this.camera.projectionMatrixInverse}},vertexShader:vertexShader,fragmentShader:`\n                ${fragmentShaderCommon}\n\n                uniform sampler2D inputBuffer;\n                uniform sampler2D idBuffer;\n                uniform sampler2D ssaoBuffer;\n                \n                float distancePointToPlane(vec3 planeNormal, float planeConstant, vec3 pointPos) {\n                    return abs(dot(planeNormal, pointPos) + planeConstant);\n                }\n\n                void main() {\n                    vec4 color = texture2D(inputBuffer, vUv);\n                    vec4 normalSample = texture2D(normalBuffer, vUv);\n                    vec3 normal = getNormal(normalSample);\n                    float id = texture2D(idBuffer, vUv).r;\n                    float depthSample = texture2D(depthBuffer, vUv).x;\n                    vec3 position = computePosition(vUv, depthSample);\n                    float planeConstant = -dot(position, normal);\n                    bool isEdge = false;\n\n                    for (int i = 0; i < vOffsetUvs.length(); i++) {\n                        vec2 uv = vUv + vOffsetUvs[i];\n                        vec4 offsetNormalSample = texture2D(normalBuffer, uv);\n                        vec3 offsetNormal = getNormal(offsetNormalSample);\n                        vec3 offsetPosition = computePosition(uv, texture2D(depthBuffer, uv).x);\n                        float offsetId = texture2D(idBuffer, uv).r;\n\n                        float normalDot = abs(dot(normal, offsetNormal));\n                        float depthDelta = distancePointToPlane(normal, planeConstant, offsetPosition);\n                        isEdge = abs(id - offsetId) > 0.99 || \n                            normalDot < 0.9 ||\n                            depthDelta > 0.01 &&\n                            abs(depthDelta / position.z) > 0.02;// depth precision fix, removes noise\n                        if (isEdge) break;\n                    }\n\n                    float occlusion = texture2D(ssaoBuffer, vUv).a;\n                    color.rgb = color.rgb * (1.0 - occlusion);\n                    \n                    gl_FragColor = mix(color, vec4(color.rgb * 0.7, max(color.a, 0.4)), isEdge ? 1.0 : 0.0);\n                    gl_FragDepthEXT = depthSample;\n                }\n            `,transparent:!0,depthTest:!0,depthWrite:!0,premultipliedAlpha:!0});return e.extensions.fragDepth=!0,e}createSsaoMaterial(e){return new three.ShaderMaterial({uniforms:{normalBuffer:{value:this.normalTexture},depthBuffer:{value:this.depthTexture},time:{value:0},noiseBuffer:{value:this.noiseTexture},cameraNearFar:{value:this.cameraNearFar},texelSize:{value:this.texelSize},uProjectionInverse:{value:this.camera.projectionMatrixInverse}},defines:{SIMPLE:e},vertexShader:vertexShader,fragmentShader:`\n                #define SIN45 0.707107\n\n                ${fragmentShaderCommon}\n                \n                uniform float time;\n                uniform sampler2D noiseBuffer;\n                uniform vec2 texelSize;\n\n                float getOcclusion(vec3 position, vec3 normal, vec2 uv) {\n                    float uBias = 0.04;\n                    vec2 uAttenuation = vec2(1.0, 1.0);\n\n                    vec3 offsetPosition = computePosition(uv, texture2D(depthBuffer, uv).x);\n                    vec3 positionVec = offsetPosition - position;\n                    float intensity = max(dot(normal, normalize(positionVec)) - uBias, 0.0);\n                    float attenuation = 1.0 / (uAttenuation.x + uAttenuation.y * length(positionVec));\n                    return intensity * attenuation;\n                }\n\n                void main() {\n                    vec3 normal = getNormal(texture2D(normalBuffer, vUv));\n                    float depthSample = texture2D(depthBuffer, vUv).x;\n                    if (depthSample == 1.0) // background                     \n                        discard;\n                    \n                    vec3 position = computePosition(vUv, depthSample);\n                    vec2 rand = normalize(texelFetch(noiseBuffer, ivec2(mod(gl_FragCoord.xy + vec2(time), vec2(100))), 0).xy);\n                    \n                    float occlusionRadius = 32.0;\n                    float occlusion = 0.0;\n\n                    int offsCount = vOffsetUvs.length();\n                    #ifdef SIMPLE\n                        offsCount = 2;\n                    #endif\n                    for (int i = 0; i < offsCount; i++) {\n                        vec2 k1 = reflect(vOffsetUvs[i], rand);\n                        vec2 k2 = vec2(k1.x * SIN45 - k1.y * SIN45, k1.x * SIN45 + k1.y * SIN45);\n                        k1 *= occlusionRadius;\n                        k2 *= occlusionRadius;\n                        \n                        occlusion += getOcclusion(position, normal, vUv + k1);\n                        occlusion += getOcclusion(position, normal, vUv + k2 * 0.75);\n                        occlusion += getOcclusion(position, normal, vUv + k1 * 0.5);\n                        occlusion += getOcclusion(position, normal, vUv + k2 * 0.25);\n                    }\n\n                    #ifdef SIMPLE\n                        occlusion *= 0.8;\n                    #endif\n                    occlusion = clamp(occlusion / float(4 * offsCount), 0.0, 1.0);\n                    gl_FragColor = vec4(occlusion);\n                }\n            `,depthTest:!1,depthWrite:!1})}render(e,t,n,i){this.renderEdges?this.renderWithEdges(e,t,n,i):this.renderWithoutEdges(e,t,i)}renderWithoutEdges(e,t,n){let i=!1;this.renderingManager.traverseMaterials(((e,t)=>{const r=n(t);return i=i||r,t.visible=r})),i&&(e.setRenderTarget(t),e.render(this.scene,this.camera))}renderWithEdges(e,t,n,i){let r=!1;this.renderingManager.traverseMaterials(((e,t)=>{const n=i(t);return r=r||n,t.visible=!!t.isWVMeshMaterial&&n})),r&&(e.setRenderTarget(this.multiRenderTarget),e.clear(),e.render(this.scene,this.camera),this.cameraNearFar.set(this.camera.near,this.camera.far),this.renderSsao(e,n),this.edgesPass.render(e,t),this.renderingManager.traverseMaterials(((e,t)=>t.visible=!t.isWVMeshMaterial&&i(t))),e.setRenderTarget(t),e.render(this.scene,this.camera))}renderSsao(e,t){if(t&&this.settingsDispatcher.settings.ssao){const t=!this.renderingManager.fullRender&&this.settingsDispatcher.settings.progressiveRendering,n=t?this.ssaoSimpleRenderTarget:this.ssaoRenderTarget,i=t?this.ssaoSimplePass:this.ssaoPass;e.setRenderTarget(n),e.setClearAlpha(0),e.clearColor(),i.getFullscreenMaterial().uniforms.time.value=performance.now(),i.render(e,n),this.edgesPass.getFullscreenMaterial().uniforms.ssaoBuffer.value=n.texture}else this.edgesPass.getFullscreenMaterial().uniforms.ssaoBuffer.value=void 0}setSize(e,t){if(this.multiRenderTarget){this.multiRenderTarget.setSize(e,t);const n=e/this.renderingManager.renderer.getPixelRatio(),i=t/this.renderingManager.renderer.getPixelRatio();this.texelSize.set(1/n,1/i),this.ssaoRenderTarget.setSize(e,t),this.ssaoSimpleRenderTarget.setSize(.7*n,.7*i)}}}var RenderPass=function(e,t,n,i,r){Pass.call(this),this.scene=e,this.camera=t,this.overrideMaterial=n,this.clearColor=i,this.clearAlpha=void 0!==r?r:0,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new three_module_js.Color};RenderPass.prototype=Object.assign(Object.create(Pass.prototype),{constructor:RenderPass,render:function(e,t,n){var i,r,a=e.autoClear;e.autoClear=!1,void 0!==this.overrideMaterial&&(r=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor&&(e.getClearColor(this._oldClearColor),i=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),this.clearDepth&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:n),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),e.render(this.scene,this.camera),this.clearColor&&e.setClearColor(this._oldClearColor,i),void 0!==this.overrideMaterial&&(this.scene.overrideMaterial=r),e.autoClear=a}});const fragmentShader$8="\n    uniform sampler2D maskTexture;\n    varying vec2 vUv0;\n    varying vec2 vUv1;\n    varying vec2 vUv2;\n    varying vec2 vUv3;\n    \n    void main(){\n        vec2 c0=texture2D(maskTexture,vUv0).rg;\n        vec2 c1=texture2D(maskTexture,vUv1).rg;\n        vec2 c2=texture2D(maskTexture,vUv2).rg;\n        vec2 c3=texture2D(maskTexture,vUv3).rg;\n        float d0=(c0.x-c1.x)*0.5;\n        float d1=(c2.x-c3.x)*0.5;\n        float d=length(vec2(d0,d1));\n        float a0=min(c0.y,c1.y);\n        float a1=min(c2.y,c3.y);\n        float visibilityFactor=min(a0,a1);\n        gl_FragColor = vec4((1.0-visibilityFactor>0.001) ? vec2(d, 0.0): vec2(0.0, d), 1.0, 1.0);\n    }\n",vertexShader$4="\n    uniform vec2 texelSize;\n    varying vec2 vUv0;\n    varying vec2 vUv1;\n    varying vec2 vUv2;\n    varying vec2 vUv3;\n    \n    void main(){\n        vec2 uv=position.xy*0.5+0.5;\n        vUv0=vec2(uv.x+texelSize.x,uv.y);\n        vUv1=vec2(uv.x-texelSize.x,uv.y);\n        vUv2=vec2(uv.x,uv.y+texelSize.y);\n        vUv3=vec2(uv.x,uv.y-texelSize.y);\n        gl_Position=vec4(position.xy,1.0,1.0);\n    }\n";class OutlineEffectMaterial extends three.ShaderMaterial{constructor(e=new three.Vector2){super({uniforms:{maskTexture:new three.Uniform(null),texelSize:new three.Uniform(new three.Vector2)},fragmentShader:fragmentShader$8,vertexShader:vertexShader$4,depthWrite:!1,depthTest:!1}),this.setTexelSize(e.x,e.y)}setTexelSize(e,t){this.uniforms.texelSize.value.set(e,t)}}const fragment="\nvarying vec2 vUv;    \n    \nuniform sampler2D edgeTexture;\nuniform sampler2D maskTexture;\n\nuniform vec3 color;\nuniform float edgeStrength;\nuniform float fillStrength;\n\nvoid main() {\n\tfloat edge = texture2D(edgeTexture, vUv).r;\n\tfloat mask = texture2D(maskTexture, vUv).r;\n\n\tedge = clamp(edge * edgeStrength * mask, 0.0, 1.0);\n\tmask = (1.0 - mask) * fillStrength;\n    gl_FragColor = vec4(color, edge + mask);\n}\n";class SelectionEffectPass extends EffectPass{constructor(e,t){const n=new three.ShaderMaterial({uniforms:{},vertexShader:"\n                varying vec2 vUv;\n\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4(position.xy, 0.0, 1.0);\n                }\n            ",fragmentShader:fragment,transparent:!0,depthTest:!1,depthWrite:!1});super(n),n.transparent=!0,n.uniforms.maskTexture=new three.Uniform(null),n.uniforms.edgeTexture=new three.Uniform(null),n.uniforms.edgeStrength=new three.Uniform(5),n.uniforms.fillStrength=new three.Uniform(.1),n.uniforms.color=new three.Uniform(t),this.selectionScene=new three.Scene,this.renderTargetMask=new three.WebGLRenderTarget(1,1,{minFilter:three.LinearFilter,magFilter:three.LinearFilter}),this.renderTargetMask.texture.generateMipmaps=!1,this.renderTargetMask.texture.format=three.RGBFormat,this.getFullscreenMaterial().uniforms.maskTexture.value=this.renderTargetMask.texture,this.renderTargetOutline=new three.WebGLRenderTarget(1,1,{minFilter:three.LinearFilter,magFilter:three.LinearFilter,stencilBuffer:!1,depthBuffer:!1,format:three.RGBFormat}),this.renderTargetOutline.texture.generateMipmaps=!1,this.getFullscreenMaterial().uniforms.edgeTexture.value=this.renderTargetOutline.texture,this.maskPass=new RenderPass(this.selectionScene,e),this.maskPass.clear=!1,this.maskMaterial=new three.MeshBasicMaterial({color:0,side:three.DoubleSide}),this.outlinePass=new EffectPass(new OutlineEffectMaterial),this.outlinePass.getFullscreenMaterial().uniforms.maskTexture.value=this.renderTargetMask.texture,this.shouldClear=!0}addObject(e,t,n,i=[{start:0,count:1/0}]){let r=this.selectionScene.getObjectByName(e+t.toString());if(!r){if(r=n.clone(!1),r.name=e+t.toString(),r.matrixAutoUpdate=!1,r.matrix=n.matrixWorld,r.geometry=new three.BufferGeometry,n instanceof three.Points){const e=n.material[0].clone();e.opacity=1,e.transparent=!1,r.material=[e]}else r.material=[this.maskMaterial];this.selectionScene.add(r)}const a=r.geometry,o=n.geometry;a.boundingBox=o.boundingBox,a.boundingSphere=o.boundingSphere,a.attributes=o.attributes,a.setIndex(o.getIndex()),a.clearGroups();for(const e of i)a.addGroup(e.start,e.count,0);return this}removeObject(e,t){const n=this.selectionScene.getObjectByName(e+t.toString());return this.selectionScene.remove(n),0===this.selectionScene.children.length&&(this.shouldClear=!0),this}render(e,t){(this.selectionScene.children.length>0||this.shouldClear)&&(e.setRenderTarget(this.renderTargetMask),e.setClearColor(16777215,1),e.clear(),this.maskPass.render(e,void 0,this.renderTargetMask,void 0,void 0),this.outlinePass.render(e,this.renderTargetOutline),super.render(e,t),this.shouldClear=!1)}setSize(e,t){this.renderTargetMask.setSize(e,t);const n=e/window.devicePixelRatio*.9,i=t/window.devicePixelRatio*.9;this.maskPass.setSize(n,i),this.renderTargetOutline.setSize(n,i),this.outlinePass.getFullscreenMaterial().setTexelSize(2.4/e*window.devicePixelRatio,2.4/t*window.devicePixelRatio),this.shouldClear=!0}}var ShaderPass=function(e,t){Pass.call(this),this.textureID=void 0!==t?t:"tDiffuse",e instanceof three_module_js.ShaderMaterial?(this.uniforms=e.uniforms,this.material=e):e&&(this.uniforms=three_module_js.UniformsUtils.clone(e.uniforms),this.material=new three_module_js.ShaderMaterial({defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),this.fsQuad=new Pass.FullScreenQuad(this.material)};ShaderPass.prototype=Object.assign(Object.create(Pass.prototype),{constructor:ShaderPass,render:function(e,t,n){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=n.texture),this.fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this.fsQuad.render(e))}});var FXAAShader={uniforms:{tDiffuse:{value:null},resolution:{value:new three_module_js.Vector2(1/1024,1/512)}},vertexShader:["varying vec2 vUv;","void main() {","\tvUv = uv;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","","uniform sampler2D tDiffuse;","","uniform vec2 resolution;","","varying vec2 vUv;","","// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)","","//----------------------------------------------------------------------------------","// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag","// SDK Version: v3.00","// Email:       gameworks@nvidia.com","// Site:        http://developer.nvidia.com/","//","// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.","//","// Redistribution and use in source and binary forms, with or without","// modification, are permitted provided that the following conditions","// are met:","//  * Redistributions of source code must retain the above copyright","//    notice, this list of conditions and the following disclaimer.","//  * Redistributions in binary form must reproduce the above copyright","//    notice, this list of conditions and the following disclaimer in the","//    documentation and/or other materials provided with the distribution.","//  * Neither the name of NVIDIA CORPORATION nor the names of its","//    contributors may be used to endorse or promote products derived","//    from this software without specific prior written permission.","//","// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY","// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE","// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR","// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR","// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,","// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,","// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR","// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY","// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT","// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE","// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","//","//----------------------------------------------------------------------------------","","#define FXAA_PC 1","#define FXAA_GLSL_100 1","#define FXAA_QUALITY_PRESET 12","","#define FXAA_GREEN_AS_LUMA 1","","/*--------------------------------------------------------------------------*/","#ifndef FXAA_PC_CONSOLE","    //","    // The console algorithm for PC is included","    // for developers targeting really low spec machines.","    // Likely better to just run FXAA_PC, and use a really low preset.","    //","    #define FXAA_PC_CONSOLE 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_GLSL_120","    #define FXAA_GLSL_120 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_GLSL_130","    #define FXAA_GLSL_130 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_HLSL_3","    #define FXAA_HLSL_3 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_HLSL_4","    #define FXAA_HLSL_4 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_HLSL_5","    #define FXAA_HLSL_5 0","#endif","/*==========================================================================*/","#ifndef FXAA_GREEN_AS_LUMA","    //","    // For those using non-linear color,","    // and either not able to get luma in alpha, or not wanting to,","    // this enables FXAA to run using green as a proxy for luma.","    // So with this enabled, no need to pack luma in alpha.","    //","    // This will turn off AA on anything which lacks some amount of green.","    // Pure red and blue or combination of only R and B, will get no AA.","    //","    // Might want to lower the settings for both,","    //    fxaaConsoleEdgeThresholdMin","    //    fxaaQualityEdgeThresholdMin","    // In order to insure AA does not get turned off on colors","    // which contain a minor amount of green.","    //","    // 1 = On.","    // 0 = Off.","    //","    #define FXAA_GREEN_AS_LUMA 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_EARLY_EXIT","    //","    // Controls algorithm's early exit path.","    // On PS3 turning this ON adds 2 cycles to the shader.","    // On 360 turning this OFF adds 10ths of a millisecond to the shader.","    // Turning this off on console will result in a more blurry image.","    // So this defaults to on.","    //","    // 1 = On.","    // 0 = Off.","    //","    #define FXAA_EARLY_EXIT 1","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_DISCARD","    //","    // Only valid for PC OpenGL currently.","    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.","    //","    // 1 = Use discard on pixels which don't need AA.","    //     For APIs which enable concurrent TEX+ROP from same surface.","    // 0 = Return unchanged color on pixels which don't need AA.","    //","    #define FXAA_DISCARD 0","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_FAST_PIXEL_OFFSET","    //","    // Used for GLSL 120 only.","    //","    // 1 = GL API supports fast pixel offsets","    // 0 = do not use fast pixel offsets","    //","    #ifdef GL_EXT_gpu_shader4","        #define FXAA_FAST_PIXEL_OFFSET 1","    #endif","    #ifdef GL_NV_gpu_shader5","        #define FXAA_FAST_PIXEL_OFFSET 1","    #endif","    #ifdef GL_ARB_gpu_shader5","        #define FXAA_FAST_PIXEL_OFFSET 1","    #endif","    #ifndef FXAA_FAST_PIXEL_OFFSET","        #define FXAA_FAST_PIXEL_OFFSET 0","    #endif","#endif","/*--------------------------------------------------------------------------*/","#ifndef FXAA_GATHER4_ALPHA","    //","    // 1 = API supports gather4 on alpha channel.","    // 0 = API does not support gather4 on alpha channel.","    //","    #if (FXAA_HLSL_5 == 1)","        #define FXAA_GATHER4_ALPHA 1","    #endif","    #ifdef GL_ARB_gpu_shader5","        #define FXAA_GATHER4_ALPHA 1","    #endif","    #ifdef GL_NV_gpu_shader5","        #define FXAA_GATHER4_ALPHA 1","    #endif","    #ifndef FXAA_GATHER4_ALPHA","        #define FXAA_GATHER4_ALPHA 0","    #endif","#endif","","","/*============================================================================","                        FXAA QUALITY - TUNING KNOBS","------------------------------------------------------------------------------","NOTE the other tuning knobs are now in the shader function inputs!","============================================================================*/","#ifndef FXAA_QUALITY_PRESET","    //","    // Choose the quality preset.","    // This needs to be compiled into the shader as it effects code.","    // Best option to include multiple presets is to","    // in each shader define the preset, then include this file.","    //","    // OPTIONS","    // -----------------------------------------------------------------------","    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)","    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)","    // 39       - no dither, very expensive","    //","    // NOTES","    // -----------------------------------------------------------------------","    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)","    // 13 = about same speed as FXAA 3.9 and better than 12","    // 23 = closest to FXAA 3.9 visually and performance wise","    //  _ = the lowest digit is directly related to performance","    // _  = the highest digit is directly related to style","    //","    #define FXAA_QUALITY_PRESET 12","#endif","","","/*============================================================================","","                           FXAA QUALITY - PRESETS","","============================================================================*/","","/*============================================================================","                     FXAA QUALITY - MEDIUM DITHER PRESETS","============================================================================*/","#if (FXAA_QUALITY_PRESET == 10)","    #define FXAA_QUALITY_PS 3","    #define FXAA_QUALITY_P0 1.5","    #define FXAA_QUALITY_P1 3.0","    #define FXAA_QUALITY_P2 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 11)","    #define FXAA_QUALITY_PS 4","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 3.0","    #define FXAA_QUALITY_P3 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 12)","    #define FXAA_QUALITY_PS 5","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 4.0","    #define FXAA_QUALITY_P4 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 13)","    #define FXAA_QUALITY_PS 6","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 4.0","    #define FXAA_QUALITY_P5 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 14)","    #define FXAA_QUALITY_PS 7","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 4.0","    #define FXAA_QUALITY_P6 12.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 15)","    #define FXAA_QUALITY_PS 8","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 4.0","    #define FXAA_QUALITY_P7 12.0","#endif","","/*============================================================================","                     FXAA QUALITY - LOW DITHER PRESETS","============================================================================*/","#if (FXAA_QUALITY_PRESET == 20)","    #define FXAA_QUALITY_PS 3","    #define FXAA_QUALITY_P0 1.5","    #define FXAA_QUALITY_P1 2.0","    #define FXAA_QUALITY_P2 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 21)","    #define FXAA_QUALITY_PS 4","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 22)","    #define FXAA_QUALITY_PS 5","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 23)","    #define FXAA_QUALITY_PS 6","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 24)","    #define FXAA_QUALITY_PS 7","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 3.0","    #define FXAA_QUALITY_P6 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 25)","    #define FXAA_QUALITY_PS 8","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 4.0","    #define FXAA_QUALITY_P7 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 26)","    #define FXAA_QUALITY_PS 9","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 4.0","    #define FXAA_QUALITY_P8 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 27)","    #define FXAA_QUALITY_PS 10","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 4.0","    #define FXAA_QUALITY_P9 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 28)","    #define FXAA_QUALITY_PS 11","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 2.0","    #define FXAA_QUALITY_P9 4.0","    #define FXAA_QUALITY_P10 8.0","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_QUALITY_PRESET == 29)","    #define FXAA_QUALITY_PS 12","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.5","    #define FXAA_QUALITY_P2 2.0","    #define FXAA_QUALITY_P3 2.0","    #define FXAA_QUALITY_P4 2.0","    #define FXAA_QUALITY_P5 2.0","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 2.0","    #define FXAA_QUALITY_P9 2.0","    #define FXAA_QUALITY_P10 4.0","    #define FXAA_QUALITY_P11 8.0","#endif","","/*============================================================================","                     FXAA QUALITY - EXTREME QUALITY","============================================================================*/","#if (FXAA_QUALITY_PRESET == 39)","    #define FXAA_QUALITY_PS 12","    #define FXAA_QUALITY_P0 1.0","    #define FXAA_QUALITY_P1 1.0","    #define FXAA_QUALITY_P2 1.0","    #define FXAA_QUALITY_P3 1.0","    #define FXAA_QUALITY_P4 1.0","    #define FXAA_QUALITY_P5 1.5","    #define FXAA_QUALITY_P6 2.0","    #define FXAA_QUALITY_P7 2.0","    #define FXAA_QUALITY_P8 2.0","    #define FXAA_QUALITY_P9 2.0","    #define FXAA_QUALITY_P10 4.0","    #define FXAA_QUALITY_P11 8.0","#endif","","","","/*============================================================================","","                                API PORTING","","============================================================================*/","#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)","    #define FxaaBool bool","    #define FxaaDiscard discard","    #define FxaaFloat float","    #define FxaaFloat2 vec2","    #define FxaaFloat3 vec3","    #define FxaaFloat4 vec4","    #define FxaaHalf float","    #define FxaaHalf2 vec2","    #define FxaaHalf3 vec3","    #define FxaaHalf4 vec4","    #define FxaaInt2 ivec2","    #define FxaaSat(x) clamp(x, 0.0, 1.0)","    #define FxaaTex sampler2D","#else","    #define FxaaBool bool","    #define FxaaDiscard clip(-1)","    #define FxaaFloat float","    #define FxaaFloat2 float2","    #define FxaaFloat3 float3","    #define FxaaFloat4 float4","    #define FxaaHalf half","    #define FxaaHalf2 half2","    #define FxaaHalf3 half3","    #define FxaaHalf4 half4","    #define FxaaSat(x) saturate(x)","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_GLSL_100 == 1)","  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)","  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_GLSL_120 == 1)","    // Requires,","    //  #version 120","    // And at least,","    //  #extension GL_EXT_gpu_shader4 : enable","    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)","    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)","    #if (FXAA_FAST_PIXEL_OFFSET == 1)","        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)","    #else","        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)","    #endif","    #if (FXAA_GATHER4_ALPHA == 1)","        // use #extension GL_ARB_gpu_shader5 : enable","        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)","        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)","        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)","        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)","    #endif","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_GLSL_130 == 1)",'    // Requires "#version 130" or better',"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)","    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)","    #if (FXAA_GATHER4_ALPHA == 1)","        // use #extension GL_ARB_gpu_shader5 : enable","        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)","        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)","        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)","        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)","    #endif","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_HLSL_3 == 1)","    #define FxaaInt2 float2","    #define FxaaTex sampler2D","    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))","    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_HLSL_4 == 1)","    #define FxaaInt2 int2","    struct FxaaTex { SamplerState smpl; Texture2D tex; };","    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)","    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)","#endif","/*--------------------------------------------------------------------------*/","#if (FXAA_HLSL_5 == 1)","    #define FxaaInt2 int2","    struct FxaaTex { SamplerState smpl; Texture2D tex; };","    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)","    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)","    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)","    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)","    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)","    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)","#endif","","","/*============================================================================","                   GREEN AS LUMA OPTION SUPPORT FUNCTION","============================================================================*/","#if (FXAA_GREEN_AS_LUMA == 0)","    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }","#else","    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }","#endif","","","","","/*============================================================================","","                             FXAA3 QUALITY - PC","","============================================================================*/","#if (FXAA_PC == 1)","/*--------------------------------------------------------------------------*/","FxaaFloat4 FxaaPixelShader(","    //","    // Use noperspective interpolation here (turn off perspective interpolation).","    // {xy} = center of pixel","    FxaaFloat2 pos,","    //","    // Used only for FXAA Console, and not used on the 360 version.","    // Use noperspective interpolation here (turn off perspective interpolation).","    // {xy_} = upper left of pixel","    // {_zw} = lower right of pixel","    FxaaFloat4 fxaaConsolePosPos,","    //","    // Input color texture.","    // {rgb_} = color in linear or perceptual color space","    // if (FXAA_GREEN_AS_LUMA == 0)","    //     {__a} = luma in perceptual color space (not linear)","    FxaaTex tex,","    //","    // Only used on the optimized 360 version of FXAA Console.",'    // For everything but 360, just use the same input here as for "tex".',"    // For 360, same texture, just alias with a 2nd sampler.","    // This sampler needs to have an exponent bias of -1.","    FxaaTex fxaaConsole360TexExpBiasNegOne,","    //","    // Only used on the optimized 360 version of FXAA Console.",'    // For everything but 360, just use the same input here as for "tex".',"    // For 360, same texture, just alias with a 3nd sampler.","    // This sampler needs to have an exponent bias of -2.","    FxaaTex fxaaConsole360TexExpBiasNegTwo,","    //","    // Only used on FXAA Quality.","    // This must be from a constant/uniform.","    // {x_} = 1.0/screenWidthInPixels","    // {_y} = 1.0/screenHeightInPixels","    FxaaFloat2 fxaaQualityRcpFrame,","    //","    // Only used on FXAA Console.","    // This must be from a constant/uniform.","    // This effects sub-pixel AA quality and inversely sharpness.","    //   Where N ranges between,","    //     N = 0.50 (default)","    //     N = 0.33 (sharper)","    // {x__} = -N/screenWidthInPixels","    // {_y_} = -N/screenHeightInPixels","    // {_z_} =  N/screenWidthInPixels","    // {__w} =  N/screenHeightInPixels","    FxaaFloat4 fxaaConsoleRcpFrameOpt,","    //","    // Only used on FXAA Console.","    // Not used on 360, but used on PS3 and PC.","    // This must be from a constant/uniform.","    // {x__} = -2.0/screenWidthInPixels","    // {_y_} = -2.0/screenHeightInPixels","    // {_z_} =  2.0/screenWidthInPixels","    // {__w} =  2.0/screenHeightInPixels","    FxaaFloat4 fxaaConsoleRcpFrameOpt2,","    //","    // Only used on FXAA Console.","    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.","    // This must be from a constant/uniform.","    // {x__} =  8.0/screenWidthInPixels","    // {_y_} =  8.0/screenHeightInPixels","    // {_z_} = -4.0/screenWidthInPixels","    // {__w} = -4.0/screenHeightInPixels","    FxaaFloat4 fxaaConsole360RcpFrameOpt2,","    //","    // Only used on FXAA Quality.","    // This used to be the FXAA_QUALITY_SUBPIX define.","    // It is here now to allow easier tuning.","    // Choose the amount of sub-pixel aliasing removal.","    // This can effect sharpness.","    //   1.00 - upper limit (softer)","    //   0.75 - default amount of filtering","    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)","    //   0.25 - almost off","    //   0.00 - completely off","    FxaaFloat fxaaQualitySubpix,","    //","    // Only used on FXAA Quality.","    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.","    // It is here now to allow easier tuning.","    // The minimum amount of local contrast required to apply algorithm.","    //   0.333 - too little (faster)","    //   0.250 - low quality","    //   0.166 - default","    //   0.125 - high quality","    //   0.063 - overkill (slower)","    FxaaFloat fxaaQualityEdgeThreshold,","    //","    // Only used on FXAA Quality.","    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.","    // It is here now to allow easier tuning.","    // Trims the algorithm from processing darks.","    //   0.0833 - upper limit (default, the start of visible unfiltered edges)","    //   0.0625 - high quality (faster)","    //   0.0312 - visible limit (slower)","    // Special notes when using FXAA_GREEN_AS_LUMA,","    //   Likely want to set this to zero.","    //   As colors that are mostly not-green","    //   will appear very dark in the green channel!","    //   Tune by looking at mostly non-green content,","    //   then start at zero and increase until aliasing is a problem.","    FxaaFloat fxaaQualityEdgeThresholdMin,","    //","    // Only used on FXAA Console.","    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.","    // It is here now to allow easier tuning.","    // This does not effect PS3, as this needs to be compiled in.","    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.","    //   Due to the PS3 being ALU bound,","    //   there are only three safe values here: 2 and 4 and 8.","    //   These options use the shaders ability to a free *|/ by 2|4|8.","    // For all other platforms can be a non-power of two.","    //   8.0 is sharper (default!!!)","    //   4.0 is softer","    //   2.0 is really soft (good only for vector graphics inputs)","    FxaaFloat fxaaConsoleEdgeSharpness,","    //","    // Only used on FXAA Console.","    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.","    // It is here now to allow easier tuning.","    // This does not effect PS3, as this needs to be compiled in.","    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.","    //   Due to the PS3 being ALU bound,","    //   there are only two safe values here: 1/4 and 1/8.","    //   These options use the shaders ability to a free *|/ by 2|4|8.","    // The console setting has a different mapping than the quality setting.","    // Other platforms can use other values.","    //   0.125 leaves less aliasing, but is softer (default!!!)","    //   0.25 leaves more aliasing, and is sharper","    FxaaFloat fxaaConsoleEdgeThreshold,","    //","    // Only used on FXAA Console.","    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.","    // It is here now to allow easier tuning.","    // Trims the algorithm from processing darks.","    // The console setting has a different mapping than the quality setting.","    // This only applies when FXAA_EARLY_EXIT is 1.","    // This does not apply to PS3,","    // PS3 was simplified to avoid more shader instructions.","    //   0.06 - faster but more aliasing in darks","    //   0.05 - default","    //   0.04 - slower and less aliasing in darks","    // Special notes when using FXAA_GREEN_AS_LUMA,","    //   Likely want to set this to zero.","    //   As colors that are mostly not-green","    //   will appear very dark in the green channel!","    //   Tune by looking at mostly non-green content,","    //   then start at zero and increase until aliasing is a problem.","    FxaaFloat fxaaConsoleEdgeThresholdMin,","    //","    // Extra constants for 360 FXAA Console only.","    // Use zeros or anything else for other platforms.","    // These must be in physical constant registers and NOT immediates.","    // Immediates will result in compiler un-optimizing.","    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)","    FxaaFloat4 fxaaConsole360ConstDir",") {","/*--------------------------------------------------------------------------*/","    FxaaFloat2 posM;","    posM.x = pos.x;","    posM.y = pos.y;","    #if (FXAA_GATHER4_ALPHA == 1)","        #if (FXAA_DISCARD == 0)","            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);","            #if (FXAA_GREEN_AS_LUMA == 0)","                #define lumaM rgbyM.w","            #else","                #define lumaM rgbyM.y","            #endif","        #endif","        #if (FXAA_GREEN_AS_LUMA == 0)","            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);","            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));","        #else","            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);","            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));","        #endif","        #if (FXAA_DISCARD == 1)","            #define lumaM luma4A.w","        #endif","        #define lumaE luma4A.z","        #define lumaS luma4A.x","        #define lumaSE luma4A.y","        #define lumaNW luma4B.w","        #define lumaN luma4B.z","        #define lumaW luma4B.x","    #else","        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);","        #if (FXAA_GREEN_AS_LUMA == 0)","            #define lumaM rgbyM.w","        #else","            #define lumaM rgbyM.y","        #endif","        #if (FXAA_GLSL_100 == 1)","          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));","        #else","          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));","        #endif","    #endif","/*--------------------------------------------------------------------------*/","    FxaaFloat maxSM = max(lumaS, lumaM);","    FxaaFloat minSM = min(lumaS, lumaM);","    FxaaFloat maxESM = max(lumaE, maxSM);","    FxaaFloat minESM = min(lumaE, minSM);","    FxaaFloat maxWN = max(lumaN, lumaW);","    FxaaFloat minWN = min(lumaN, lumaW);","    FxaaFloat rangeMax = max(maxWN, maxESM);","    FxaaFloat rangeMin = min(minWN, minESM);","    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;","    FxaaFloat range = rangeMax - rangeMin;","    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);","    FxaaBool earlyExit = range < rangeMaxClamped;","/*--------------------------------------------------------------------------*/","    if(earlyExit)","        #if (FXAA_DISCARD == 1)","            FxaaDiscard;","        #else","            return rgbyM;","        #endif","/*--------------------------------------------------------------------------*/","    #if (FXAA_GATHER4_ALPHA == 0)","        #if (FXAA_GLSL_100 == 1)","          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));","        #else","          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));","          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));","        #endif","    #else","        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));","        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));","    #endif","/*--------------------------------------------------------------------------*/","    FxaaFloat lumaNS = lumaN + lumaS;","    FxaaFloat lumaWE = lumaW + lumaE;","    FxaaFloat subpixRcpRange = 1.0/range;","    FxaaFloat subpixNSWE = lumaNS + lumaWE;","    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;","    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;","/*--------------------------------------------------------------------------*/","    FxaaFloat lumaNESE = lumaNE + lumaSE;","    FxaaFloat lumaNWNE = lumaNW + lumaNE;","    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;","    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;","/*--------------------------------------------------------------------------*/","    FxaaFloat lumaNWSW = lumaNW + lumaSW;","    FxaaFloat lumaSWSE = lumaSW + lumaSE;","    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);","    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);","    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;","    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;","    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;","    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;","/*--------------------------------------------------------------------------*/","    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;","    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;","    FxaaBool horzSpan = edgeHorz >= edgeVert;","    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;","/*--------------------------------------------------------------------------*/","    if(!horzSpan) lumaN = lumaW;","    if(!horzSpan) lumaS = lumaE;","    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;","    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;","/*--------------------------------------------------------------------------*/","    FxaaFloat gradientN = lumaN - lumaM;","    FxaaFloat gradientS = lumaS - lumaM;","    FxaaFloat lumaNN = lumaN + lumaM;","    FxaaFloat lumaSS = lumaS + lumaM;","    FxaaBool pairN = abs(gradientN) >= abs(gradientS);","    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));","    if(pairN) lengthSign = -lengthSign;","    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);","/*--------------------------------------------------------------------------*/","    FxaaFloat2 posB;","    posB.x = posM.x;","    posB.y = posM.y;","    FxaaFloat2 offNP;","    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;","    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;","    if(!horzSpan) posB.x += lengthSign * 0.5;","    if( horzSpan) posB.y += lengthSign * 0.5;","/*--------------------------------------------------------------------------*/","    FxaaFloat2 posN;","    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;","    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;","    FxaaFloat2 posP;","    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;","    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;","    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;","    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));","    FxaaFloat subpixE = subpixC * subpixC;","    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));","/*--------------------------------------------------------------------------*/","    if(!pairN) lumaNN = lumaSS;","    FxaaFloat gradientScaled = gradient * 1.0/4.0;","    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;","    FxaaFloat subpixF = subpixD * subpixE;","    FxaaBool lumaMLTZero = lumaMM < 0.0;","/*--------------------------------------------------------------------------*/","    lumaEndN -= lumaNN * 0.5;","    lumaEndP -= lumaNN * 0.5;","    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;","    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;","    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;","    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;","    FxaaBool doneNP = (!doneN) || (!doneP);","    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;","    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;","/*--------------------------------------------------------------------------*/","    if(doneNP) {","        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","        doneN = abs(lumaEndN) >= gradientScaled;","        doneP = abs(lumaEndP) >= gradientScaled;","        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;","        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;","        doneNP = (!doneN) || (!doneP);","        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;","        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;","/*--------------------------------------------------------------------------*/","        #if (FXAA_QUALITY_PS > 3)","        if(doneNP) {","            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","            doneN = abs(lumaEndN) >= gradientScaled;","            doneP = abs(lumaEndP) >= gradientScaled;","            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;","            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;","            doneNP = (!doneN) || (!doneP);","            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;","            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;","/*--------------------------------------------------------------------------*/","            #if (FXAA_QUALITY_PS > 4)","            if(doneNP) {","                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                doneN = abs(lumaEndN) >= gradientScaled;","                doneP = abs(lumaEndP) >= gradientScaled;","                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;","                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;","                doneNP = (!doneN) || (!doneP);","                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;","                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;","/*--------------------------------------------------------------------------*/","                #if (FXAA_QUALITY_PS > 5)","                if(doneNP) {","                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                    doneN = abs(lumaEndN) >= gradientScaled;","                    doneP = abs(lumaEndP) >= gradientScaled;","                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;","                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;","                    doneNP = (!doneN) || (!doneP);","                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;","                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;","/*--------------------------------------------------------------------------*/","                    #if (FXAA_QUALITY_PS > 6)","                    if(doneNP) {","                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                        doneN = abs(lumaEndN) >= gradientScaled;","                        doneP = abs(lumaEndP) >= gradientScaled;","                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;","                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;","                        doneNP = (!doneN) || (!doneP);","                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;","                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;","/*--------------------------------------------------------------------------*/","                        #if (FXAA_QUALITY_PS > 7)","                        if(doneNP) {","                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                            doneN = abs(lumaEndN) >= gradientScaled;","                            doneP = abs(lumaEndP) >= gradientScaled;","                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;","                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;","                            doneNP = (!doneN) || (!doneP);","                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;","                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;","/*--------------------------------------------------------------------------*/","    #if (FXAA_QUALITY_PS > 8)","    if(doneNP) {","        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","        doneN = abs(lumaEndN) >= gradientScaled;","        doneP = abs(lumaEndP) >= gradientScaled;","        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;","        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;","        doneNP = (!doneN) || (!doneP);","        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;","        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;","/*--------------------------------------------------------------------------*/","        #if (FXAA_QUALITY_PS > 9)","        if(doneNP) {","            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","            doneN = abs(lumaEndN) >= gradientScaled;","            doneP = abs(lumaEndP) >= gradientScaled;","            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;","            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;","            doneNP = (!doneN) || (!doneP);","            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;","            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;","/*--------------------------------------------------------------------------*/","            #if (FXAA_QUALITY_PS > 10)","            if(doneNP) {","                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                doneN = abs(lumaEndN) >= gradientScaled;","                doneP = abs(lumaEndP) >= gradientScaled;","                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;","                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;","                doneNP = (!doneN) || (!doneP);","                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;","                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;","/*--------------------------------------------------------------------------*/","                #if (FXAA_QUALITY_PS > 11)","                if(doneNP) {","                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                    doneN = abs(lumaEndN) >= gradientScaled;","                    doneP = abs(lumaEndP) >= gradientScaled;","                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;","                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;","                    doneNP = (!doneN) || (!doneP);","                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;","                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;","/*--------------------------------------------------------------------------*/","                    #if (FXAA_QUALITY_PS > 12)","                    if(doneNP) {","                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));","                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));","                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;","                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;","                        doneN = abs(lumaEndN) >= gradientScaled;","                        doneP = abs(lumaEndP) >= gradientScaled;","                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;","                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;","                        doneNP = (!doneN) || (!doneP);","                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;","                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;","/*--------------------------------------------------------------------------*/","                    }","                    #endif","/*--------------------------------------------------------------------------*/","                }","                #endif","/*--------------------------------------------------------------------------*/","            }","            #endif","/*--------------------------------------------------------------------------*/","        }","        #endif","/*--------------------------------------------------------------------------*/","    }","    #endif","/*--------------------------------------------------------------------------*/","                        }","                        #endif","/*--------------------------------------------------------------------------*/","                    }","                    #endif","/*--------------------------------------------------------------------------*/","                }","                #endif","/*--------------------------------------------------------------------------*/","            }","            #endif","/*--------------------------------------------------------------------------*/","        }","        #endif","/*--------------------------------------------------------------------------*/","    }","/*--------------------------------------------------------------------------*/","    FxaaFloat dstN = posM.x - posN.x;","    FxaaFloat dstP = posP.x - posM.x;","    if(!horzSpan) dstN = posM.y - posN.y;","    if(!horzSpan) dstP = posP.y - posM.y;","/*--------------------------------------------------------------------------*/","    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;","    FxaaFloat spanLength = (dstP + dstN);","    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;","    FxaaFloat spanLengthRcp = 1.0/spanLength;","/*--------------------------------------------------------------------------*/","    FxaaBool directionN = dstN < dstP;","    FxaaFloat dst = min(dstN, dstP);","    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;","    FxaaFloat subpixG = subpixF * subpixF;","    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;","    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;","/*--------------------------------------------------------------------------*/","    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;","    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);","    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;","    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;","    #if (FXAA_DISCARD == 1)","        return FxaaTexTop(tex, posM);","    #else","        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);","    #endif","}","/*==========================================================================*/","#endif","","void main() {","  gl_FragColor = FxaaPixelShader(","    vUv,","    vec4(0.0),","    tDiffuse,","    tDiffuse,","    tDiffuse,","    resolution,","    vec4(0.0),","    vec4(0.0),","    vec4(0.0),","    0.75,","    0.166,","    0.0833,","    0.0,","    0.0,","    0.0,","    vec4(0.0)","  );","","  // TODO avoid querying texture twice for same texel","  gl_FragColor.a = texture2D(tDiffuse, vUv).a;","}"].join("\n")};class FXAAPass extends ShaderPass{constructor(){super(FXAAShader)}render(e,t,n,i,r){super.render(e,t,n,i,r)}setSize(e,t){super.setSize(e,t),this.material.uniforms.resolution.value.x=1/e,this.material.uniforms.resolution.value.y=1/t}}class PassComposer{constructor(e,t){this.api=e,this.renderingManager=t,this.beforeSelectionPasses=[],this.afterSelectionPasses=[],this.beforeAntialiasingPasses=[],this.afterAntialiasingPasses=[],this.updateAntialias(),e.settingsDispatcher.subscribe("antialias",(()=>this.updateAntialias())),this.renderTarget=new three.WebGLRenderTarget(t.width,t.height,{minFilter:three.LinearFilter,magFilter:three.LinearFilter,format:three.RGBAFormat,stencilBuffer:!1});const n=new WVBackground(t,e.settingsDispatcher,e.camera),i=new EdgesAndSsaoRenderPass(e.settingsDispatcher,t,e.scene,e.camera);this.depthPeelingRenderPass=new DepthPeelingRenderPass(t,e.settingsDispatcher,e.scene,e.camera,n,i),this.selectionEffectPass=new SelectionEffectPass(e.camera,e.settingsDispatcher.settings.selectionColor),this.api.selectionEffectPass=this.selectionEffectPass,this.fxaaPass=new FXAAPass}updateAntialias(){this.antialias=void 0===this.api.settingsDispatcher.settings.antialias?devicePixelRatio<=1&&!this.renderingManager.isMobile():this.api.settingsDispatcher.settings.antialias}render(){const e=this.renderingManager.renderer;e.autoClear=!1,e.autoClearColor=!1,e.autoClearDepth=!1;const t=this.antialias?this.renderTarget:null;this.depthPeelingRenderPass.render(e,this.mainPassRenderTarget||t),this.renderPasses(this.beforeSelectionPasses,t,!this.antialias),this.selectionEffectPass.render(e,t),this.renderPasses(this.afterSelectionPasses,t,!this.antialias),this.renderPasses(this.beforeAntialiasingPasses,t,!this.antialias),this.antialias&&this.fxaaPass.render(e,null,t,void 0,void 0),this.renderPasses(this.afterAntialiasingPasses,this.renderTarget,!0)}renderPasses(e,t,n){for(const i of e)i.renderToScreen=n,i.render(this.renderingManager.renderer,i.needsSwap?t:null,i.needsSwap?null:t,void 0,void 0)}setSize(e,t){this.updateAntialias(),this.renderTarget.setSize(e,t),this.mainPassRenderTarget&&this.mainPassRenderTarget.setSize(e,t),this.depthPeelingRenderPass.setSize(e,t),this.selectionEffectPass.setSize(e,t),this.fxaaPass.setSize(e,t),this.beforeSelectionPasses.forEach((n=>n.setSize(e,t)))}addPassBeforeSelection(e){this.beforeSelectionPasses.push(e)}addPassAfterSelection(e){this.afterSelectionPasses.push(e)}addPassBeforeAntialiasing(e){this.beforeAntialiasingPasses.push(e)}addPassAfterAntialiasing(e){this.afterAntialiasingPasses.push(e)}}class RenderingManager{constructor(e){this._api=e,this.beforeRenderListeners=[],this.afterRenderListeners=[],this.animationFrameListeners=[],this.clippingPlanes=[],this.uniforms={viewSize:new three.Uniform(new three.Vector2(this.width,this.height)),pixelRatio:new three.Uniform(devicePixelRatio),globalOpacity:new three.Uniform(1),depthPeelingEnabled:new three.Uniform(Number(!1)),peelingDepthTexture:new three.Uniform(null),depthPrecisionFix:new three.Uniform(0)},this.renderRequested=!0,this._camera=e.camera,this.composer=this.initializeRenderer(),this._api.camera.subscribe((()=>{!this._boundingBox||this._boundingBox.isEmpty()||this.vr.enabled||this._camera.fitNearAndFarPlanes(this._boundingBox),this.redraw()})),this._api.models.worldBoundingBox.subscribe((e=>{e.isEmpty()||this.vr.enabled||(this._boundingBox=e,this._camera.fitNearAndFarPlanes(this._boundingBox),this.redraw())})),this._api.settingsDispatcher.subscribe("darkModeMaterials",(()=>this.redraw())),this._api.settingsDispatcher.subscribe("renderEdges",(()=>this.redraw())),this._api.settingsDispatcher.subscribe("vertexInterpolationMaterials",(()=>this.redraw())),this._api.settingsDispatcher.subscribe("globalOpacity",(()=>this.redraw()))}get fullRender(){return!this.renderRequested}isMobile(){return void 0===this._isMobile&&(this._isMobile=isMobile(navigator).any),this._isMobile}isWebgl2(){return this.renderer.capabilities.isWebGL2}isFragDepthAvailable(){return this.isWebgl2()||!!this.renderer.extensions.get("EXT_frag_depth")}isDepthTextureAvailable(){return this.isWebgl2()||!!this.renderer.extensions.get("WEBGL_depth_texture")}isHalfFloatTextureTypeAvailable(){return this.isWebgl2()||!!this.renderer.extensions.get("OES_texture_half_float")}redraw(){this.renderRequested=!0}addBeforeRenderListener(e){this.beforeRenderListeners.push(e)}addAfterRenderListener(e){this.afterRenderListeners.push(e)}removeListener(e,t){const n=e.indexOf(t);-1!==n&&e.splice(n,1)}removeBeforeRenderListener(e){this.removeListener(this.beforeRenderListeners,e)}removeAfterRenderListener(e){this.removeListener(this.afterRenderListeners,e)}addAnimationFrameListener(e){this.animationFrameListeners.push(e)}removeAnimationFrameListener(e){this.removeListener(this.animationFrameListeners,e)}start(){this.renderer.setAnimationLoop((e=>this.animationLoop(e)))}animationLoop(e){this.updateCanvasSize(),this.enabled&&(this.renderRequested?(this.render(),this.lastRenderTime=e,this.renderRequested=!1):this.lastRenderTime&&e-this.lastRenderTime>100&&(this.render(),this.lastRenderTime=void 0)),this.animationFrameListeners.forEach((t=>t(e)))}render(){this.beforeRenderListeners.forEach((e=>e())),this.composer.render(),this.afterRenderListeners.forEach((e=>e()))}async screenshot(e,t,n){if(e){const t=this.width>this.height?this.width:this.height/e.y*e.x,n=this.width>this.height?this.width/e.x*e.y:this.height;this.setCanvasSize(t,n,devicePixelRatio)}return this.composer.render(),await new Promise((i=>{if(e){const r=document.createElement("canvas");r.width=e.x,r.height=e.y;r.getContext("2d").drawImage(this.renderer.domElement,0,0,e.x,e.y),r.toBlob(i,t,n),this.setCanvasSize(this.width,this.height,devicePixelRatio),this.composer.render()}else this.renderer.domElement.toBlob(i,t,n)}))}updateCanvasSize(){if(this.vr.enabled)return;const e=this.renderer.domElement;(Math.abs(e.height-this.height)>1||Math.abs(e.width-this.width)>1)&&this.clientWidth>10&&this.clientHeight>10&&(this.setCanvasSize(this.width,this.height,devicePixelRatio),this._camera.callListeners())}setCanvasSize(e,t,n){this.renderer.setPixelRatio(n),this.uniforms.pixelRatio.value=n,this.uniforms.viewSize.value.x=e,this.uniforms.viewSize.value.y=t,this._camera.aspect=e/t,this.composer.setSize(e,t),this.renderer.setSize(Math.trunc(e/n),Math.trunc(t/n),!1),this._camera.updateProjectionMatrix()}initializeRenderer(){this.enabled=!1;const e=this._api.container.children[0],t={stencil:!1,alpha:!1,powerPreference:"high-performance",antialias:this._api.settingsDispatcher.settings.xrCompatible,xrCompatible:this._api.settingsDispatcher.settings.xrCompatible};let n;this._api.settingsDispatcher.settings.useWebgl2&&(n=e.getContext("webgl2",t)),n||(n=e.getContext("webgl",t));const i={canvas:e,context:n};this.renderer=new WebGLRenderer(i);const r=this.renderer.getContext();return this.driverRendererString=r.getParameter(r.getExtension("WEBGL_debug_renderer_info").UNMASKED_RENDERER_WEBGL),console.log(`Rendering: ${r.getParameter(r.VERSION)}, ${r.getParameter(r.SHADING_LANGUAGE_VERSION)}, ${r.getParameter(r.VENDOR)}, ${this.driverRendererString}`),this.vr=new VRManager(this._api),this.updateCanvasSize(),this.enabled=!0,new PassComposer(this._api,this)}traverseMaterials(e){this._api.scene.traverse((t=>{const n=t;n.material&&iterate(n.material,(t=>e(n,t)))}))}get viewportScale(){return window.visualViewport?window.visualViewport.scale:1}get width(){return Math.trunc(this._api.container.clientWidth*devicePixelRatio*this.viewportScale)}get height(){return Math.trunc(this._api.container.clientHeight*devicePixelRatio*this.viewportScale)}get clientWidth(){return Math.trunc(this._api.container.clientWidth*this.viewportScale)}get clientHeight(){return Math.trunc(this._api.container.clientHeight*this.viewportScale)}}class EventDispatcher{constructor(e){this._element=e}error(e){const t={detail:e,bubbles:!0,composed:!0};console.error(e),this._element.dispatchEvent(new CustomEvent("error",t))}selected(e){const t=new CustomEvent("selection",{detail:e,bubbles:!0,composed:!0});this._element.dispatchEvent(t)}picked(e){const t=new CustomEvent("pick",{detail:e,bubbles:!0,composed:!0});this._element.dispatchEvent(t)}navigation(e){const t=new CustomEvent(e?"navigationstart":"navigationend",{bubbles:!0,composed:!0});this._element.dispatchEvent(t)}dragStart(e){const t=new CustomEvent("dragstart",{detail:e,bubbles:!0,composed:!0});this._element.dispatchEvent(t)}dragEnd(e){const t=new CustomEvent("dragend",{detail:e,bubbles:!0,composed:!0});this._element.dispatchEvent(t)}dispatch(e){this._element.dispatchEvent(e)}subscribe(e,t){this._element.addEventListener(e,t)}}class HtmlElementPositioner{constructor(e){this._api=e,this._htmlObjects=new Set,e.renderingManager.addBeforeRenderListener((()=>this.update()))}addElement(e){this._htmlObjects.has(e)||(this._api.container.appendChild(e),this._htmlObjects.add(e))}removeElement(e){this._htmlObjects.has(e)&&(this._api.container.removeChild(e),this._htmlObjects.delete(e))}update(){const e=this._api.container.getBoundingClientRect();for(const t of this._htmlObjects)t.updatePosition(e)}}class Models{constructor(e,t){this.selection=t,this.worldBoundingBox=new BehaviorSubject(new three.Box3),this._models=new Map,this._modelContainer=new three.Object3D,e.add(this._modelContainer),this.setupSelection(t)}setupSelection(e){e.subscribe((()=>{for(const[t]of this._models){const n=t;if(!n.setSelection)continue;const i=e.get(n.name);i&&0!==i.length?n.setSelection(i):n.clearSelection()}}))}async add(e,t=!0){if(this.get(e.name))throw new Error("A model with the same id is already loaded. "+e.name);e.subscribeToBoundingBox((t=>{this._models.set(e,t),this.recalculateWorldBoundingBox()})),this._models.set(e,await e.getBoundingBox()),t&&this._modelContainer.add(e)}async remove(e){const t=this.get(e);if(!t)throw new Error(`Model ${e} not found`);this._models.delete(t),this.recalculateWorldBoundingBox(),this._modelContainer.remove(t),this.selection.delete(e),await t.dispose()}get(e){return Array.from(this._models.keys()).find((t=>t.name===e))}getIterable(){return this._models.keys()}getBoundingBoxesIterable(){return this._models.values()}recalculateWorldBoundingBox(){this.worldBoundingBox.value.makeEmpty(),this._models.forEach((e=>this.worldBoundingBox.value.union(e))),this.worldBoundingBox.next(this.worldBoundingBox.value)}}class Registry{constructor(){this.LUT=new Map}register(e,t){this.LUT.set(e,t)}}class Selection extends Map{startSelectionEventEmitter(e){this.subscribe((t=>{const n=Array.from(this.keys()).reduce(((e,t)=>e+this.get(t).length),0);e.selected({count:n,origin:t})}))}setOnly(e,t,n){super.clear(),super.set(e,t),this.callListeners(n)}set(e,t,n){return super.set(e,t),this.callListeners(n),this}delete(e,t){const n=super.delete(e);return this.callListeners(t),n}add(e,t,n){t=this.has(e)?[...this.get(e),...t]:t;const i=new Set(t);if(this.has(e)){const t=[...i];super.set(e,t)}else super.set(e,[...i]);this.callListeners(n)}subtract(e,t,n){if(this.has(e)){const n=this.get(e).filter((e=>!t.includes(e)));n.length>0?super.set(e,n):super.delete(e)}this.callListeners(n)}clear(e){super.clear(),this.callListeners(e)}callListeners(e){this.listeners&&this.listeners.forEach((t=>t(e)))}subscribe(e){this.listeners||(this.listeners=[]),this.listeners.push(e)}unsubscribe(e){this.listeners.splice(this.listeners.indexOf(e),1)}change(e,t){const n=this.listeners;this.listeners=void 0,e(),this.listeners=n,this.callListeners(t)}}class WVCamera extends three.Camera{constructor(e){super(),this._api=e,this.projectionType="perspective",this.farPlaneDefault=1e4,this.nearMin=.05,this.near=this.nearMin,this.far=this.farPlaneDefault,this.aspect=1,this.fov=60,this.orthoSize=1,this.rotateSpherical=(()=>{const e=Math.PI/2,t=new three.Vector2,n=new three.Vector3,i=new three.Vector3,r=new three.Vector3,a=new three.Vector3,o=new three.Vector3,s=new three.Vector3,l=new three.Vector3,c=new three.Vector3;return(d,u,h)=>{t.set(h.x-e,h.y),PickingTool.SphericalToDirection(h,r),PickingTool.SphericalToDirection(t,i),n.crossVectors(r,i),o.copy(r).multiplyScalar(u.y),s.copy(n).multiplyScalar(u.x),l.copy(i).multiplyScalar(u.z),this.position.copy(c.copy(d).sub(o).sub(s).sub(l)),this.lookAt(a.copy(this.position).add(r))}})(),this._frustum=new three.Frustum,this._matrix=new three.Matrix4,this.fitNearAndFarPlanes=(()=>{const e=new three.Vector3;return t=>{const n=this.frustum,i=n.planes[4].normal;e.set(i.x<=0?t.max.x:t.min.x,i.y<=0?t.max.y:t.min.y,i.z<=0?t.max.z:t.min.z);const r=n.planes[4].distanceToPoint(e);this.far=this.far-r>0?1.05*(this.far-r):this.farPlaneDefault;const a=n.planes[5].normal;e.set(a.x<=0?t.max.x:t.min.x,a.y<=0?t.max.y:t.min.y,a.z<=0?t.max.z:t.min.z);const o=n.planes[5].distanceToPoint(e);this.near=Math.max(.95*(o+this.near),this.nearMin),this.updateProjectionMatrix()}})(),this.listeners=[],this.updateProjectionMatrix()}get zoom(){return 1}get isPerspectiveCamera(){return"perspective"===this.projectionType}get isOrthographicCamera(){return"ortho"===this.projectionType}updateProjectionMatrix(){this.isPerspectiveCamera?(this.updatePerspectiveProjectionMatrix(),this.orthoLodPosition&&(this.orthoLodPosition=void 0)):(this.updateOrthographicProjectionMatrix(),this.orthoLodPosition||(this.orthoLodPosition=this.position.clone()))}updatePerspectiveProjectionMatrix(){const e=this.near*Math.tan(.5*three.MathUtils.DEG2RAD*this.fov),t=this.aspect>1?e/this.aspect:e,n=2*t,i=this.aspect*n,r=-.5*i;this.projectionMatrix.makePerspective(r,r+i,t,t-n,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}updateOrthographicProjectionMatrix(){const e=this.aspect>1?this.orthoSize:this.orthoSize*this.aspect,t=e/this.aspect;this.projectionMatrix.makeOrthographic(-e,e,t,-t,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}getProjectionCompensatingScale(e){const t=Math.max(this._api.container.clientWidth,this._api.container.clientHeight);return 30*this.getViewWorldSize(e)/t}getViewWorldSize(e){return WVCamera.getViewWorldSize(this,e)}static getViewWorldSize(e,t){return e.isPerspectiveCamera?getPerspectiveViewWorldSize(e.fov,t):e.isOrthographicCamera?e.orthoSize:void 0}getProjectionType(){return this.projectionType}async setProjectionType(e,t){t||(t=await this._getViewFocusPoint()),"perspective"===e&&this.isOrthographicCamera?this._switchToPerspective(t):"ortho"===e&&this.isPerspectiveCamera&&this._switchToOrthographic(t)}async _getViewFocusPoint(){const e=this._api.renderingManager.renderer.domElement.getBoundingClientRect(),t=await this._api.picker.pickForNavigation(new three.Vector2(e.x+e.width/2,e.y+e.height/2));return t?t.point:this._api.models.worldBoundingBox.value.getCenter(new three.Vector3)}_switchToOrthographic(e){let t=e.distanceTo(this.position);0===t&&(t=1);const n=getPerspectiveViewWorldSize(this.fov,t);this.projectionType="ortho",this.orthoSize=n,this.updateProjectionMatrix(),this.callListeners()}_switchToPerspective(e){this.projectionType="perspective",this.updateProjectionMatrix();const t=this.orthoSize/getPerspectiveViewWorldSize(this.fov,1);this.position.sub(e).normalize().multiplyScalar(t).add(e),this.callListeners()}async animate(e,t,n=this._api.settingsDispatcher.settings.animationTime,i=easeInOutQuad){0===n?(e&&this.position.copy(e),t&&this.quaternion.copy(t),this.callListeners()):e&&t?await Promise.all([this.animatePosition(e,n,i),this.animateRotation(t,n,i)]):e?await this.animatePosition(e,n,i):t&&this.animateRotation(t,n,i)}animatePosition(e,t=this._api.settingsDispatcher.settings.animationTime,n=easeInOutQuad){this.stopMoveAnimation();const i=this.position.clone(),r=i.clone();return new Promise(((a,o)=>{this.cameraMoverComplete=()=>{this.callListeners(),a()},this.cameraMover=singleTween(t,n,0,1).subscribe((t=>{this.position.equals(r)?(this.position.lerpVectors(i,e,t),this.callListeners(),r.copy(this.position)):this.stopMoveAnimation()}),o,this.cameraMoverComplete)}))}animateRotation(e,t=this._api.settingsDispatcher.settings.animationTime,n=easeInOutQuad){this.stopRotationAnimation();const i=this.quaternion.clone(),r=i.clone();return new Promise(((a,o)=>{this.cameraRotatorComplete=()=>a(),this.cameraRotator=singleTween(t,n,0,1).subscribe((t=>{this.quaternion.equals(r)?(three.Quaternion.slerp(i,e,this.quaternion,t),this.callListeners(),r.copy(this.quaternion)):this.stopRotationAnimation()}),o,this.cameraRotatorComplete)}))}stopMoveAnimation(){this.cameraMover&&(this.cameraMover.unsubscribe(),this.cameraMover=null,this.cameraMoverComplete())}stopRotationAnimation(){this.cameraRotator&&(this.cameraRotator.unsubscribe(),this.cameraRotator=null,this.cameraRotatorComplete())}async fitToView(e,t,n,i=.65){let r=10,a=Vector3Const.zero;if(!e.isEmpty()){const t=e.max.clone().sub(e.min).length();r=t/(2*i)/getPerspectiveViewWorldSize(this.fov,1),this.orthoSize=t,a=e.getCenter(new three.Vector3)}const o=0===this.position.x&&0===this.position.y&&0===this.position.z;if(!n&&o&&(n="axon"),n){const e="axon"===n?new three.Vector3(.7*r,.7*-r,.3*r):"top"===n?new three.Vector3(0,0,r):"bottom"===n?new three.Vector3(0,0,-r):"left"===n?new three.Vector3(r,0,0):"right"===n?new three.Vector3(-r,0,0):"front"===n?new three.Vector3(0,r,0):"back"===n?new three.Vector3(0,-r,0):null,i="top"===n?new three.Quaternion:"bottom"===n?(new three.Quaternion).setFromEuler(new three.Euler(0,Math.PI,Math.PI)):(new three.Quaternion).setFromRotationMatrix((new three.Matrix4).lookAt(e,Vector3Const.zero,this.up));await this.animate(e.add(a),i,o?0:t)}else{const e=this.getWorldDirection(new three.Vector3).multiplyScalar(-r);await this.animatePosition(e.add(a),t)}}get frustum(){const e=this._api.renderingManager.vr.toVRCamera(this);return e.updateMatrixWorld(!0),this._matrix.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(this._matrix),this._frustum}callListeners(){this.listeners.forEach((e=>e()))}subscribe(e){this.listeners.push(e)}unsubscribe(e){this.listeners.splice(this.listeners.indexOf(e),1)}}const version="DEV_BUILD";three_module_js.UniformsLib.line={linewidth:{value:1},resolution:{value:new three_module_js.Vector2(1,1)},dashScale:{value:1},dashSize:{value:1},dashOffset:{value:0},gapSize:{value:1},opacity:{value:1}},three_module_js.ShaderLib.line={uniforms:three_module_js.UniformsUtils.merge([three_module_js.UniformsLib.common,three_module_js.UniformsLib.fog,three_module_js.UniformsLib.line]),vertexShader:"\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\tvarying vec2 vUv;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\tvUv = uv;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\n\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd - ndcStart;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t// perpendicular to dir\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\n\t\t\t// undo aspect ratio adjustment\n\t\t\tdir.x /= aspect;\n\t\t\toffset.x /= aspect;\n\n\t\t\t// sign flip\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t// endcaps\n\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\toffset += - dir;\n\n\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\toffset += dir;\n\n\t\t\t}\n\n\t\t\t// adjust for linewidth\n\t\t\toffset *= linewidth;\n\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\toffset /= resolution.y;\n\n\t\t\t// select end\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t// back to clip space\n\t\t\toffset *= clip.w;\n\n\t\t\tclip.xy += offset;\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t",fragmentShader:"\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashSize;\n\t\t\tuniform float dashOffset;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\tfloat a = vUv.x;\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t}\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t"};var LineMaterial=function(e){three_module_js.ShaderMaterial.call(this,{type:"LineMaterial",uniforms:three_module_js.UniformsUtils.clone(three_module_js.ShaderLib.line.uniforms),vertexShader:three_module_js.ShaderLib.line.vertexShader,fragmentShader:three_module_js.ShaderLib.line.fragmentShader,clipping:!0}),this.dashed=!1,Object.defineProperties(this,{color:{enumerable:!0,get:function(){return this.uniforms.diffuse.value},set:function(e){this.uniforms.diffuse.value=e}},linewidth:{enumerable:!0,get:function(){return this.uniforms.linewidth.value},set:function(e){this.uniforms.linewidth.value=e}},dashScale:{enumerable:!0,get:function(){return this.uniforms.dashScale.value},set:function(e){this.uniforms.dashScale.value=e}},dashSize:{enumerable:!0,get:function(){return this.uniforms.dashSize.value},set:function(e){this.uniforms.dashSize.value=e}},dashOffset:{enumerable:!0,get:function(){return this.uniforms.dashOffset.value},set:function(e){this.uniforms.dashOffset.value=e}},gapSize:{enumerable:!0,get:function(){return this.uniforms.gapSize.value},set:function(e){this.uniforms.gapSize.value=e}},opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(e){this.uniforms.opacity.value=e}},resolution:{enumerable:!0,get:function(){return this.uniforms.resolution.value},set:function(e){this.uniforms.resolution.value.copy(e)}}}),this.setValues(e)};LineMaterial.prototype=Object.create(three_module_js.ShaderMaterial.prototype),LineMaterial.prototype.constructor=LineMaterial,LineMaterial.prototype.isLineMaterial=!0;var LineSegmentsGeometry=function(){three_module_js.InstancedBufferGeometry.call(this),this.type="LineSegmentsGeometry";this.setIndex([0,2,1,2,3,1,2,4,3,4,5,3,4,6,5,6,7,5]),this.setAttribute("position",new three_module_js.Float32BufferAttribute([-1,2,0,1,2,0,-1,1,0,1,1,0,-1,0,0,1,0,0,-1,-1,0,1,-1,0],3)),this.setAttribute("uv",new three_module_js.Float32BufferAttribute([-1,2,1,2,-1,1,1,1,-1,-1,1,-1,-1,-2,1,-2],2))},vector,box;LineSegmentsGeometry.prototype=Object.assign(Object.create(three_module_js.InstancedBufferGeometry.prototype),{constructor:LineSegmentsGeometry,isLineSegmentsGeometry:!0,applyMatrix4:function(e){var t=this.attributes.instanceStart,n=this.attributes.instanceEnd;return void 0!==t&&(t.applyMatrix4(e),n.applyMatrix4(e),t.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},setPositions:function(e){var t;e instanceof Float32Array?t=e:Array.isArray(e)&&(t=new Float32Array(e));var n=new three_module_js.InstancedInterleavedBuffer(t,6,1);return this.setAttribute("instanceStart",new three_module_js.InterleavedBufferAttribute(n,3,0)),this.setAttribute("instanceEnd",new three_module_js.InterleavedBufferAttribute(n,3,3)),this.computeBoundingBox(),this.computeBoundingSphere(),this},setColors:function(e){var t;e instanceof Float32Array?t=e:Array.isArray(e)&&(t=new Float32Array(e));var n=new three_module_js.InstancedInterleavedBuffer(t,6,1);return this.setAttribute("instanceColorStart",new three_module_js.InterleavedBufferAttribute(n,3,0)),this.setAttribute("instanceColorEnd",new three_module_js.InterleavedBufferAttribute(n,3,3)),this},fromWireframeGeometry:function(e){return this.setPositions(e.attributes.position.array),this},fromEdgesGeometry:function(e){return this.setPositions(e.attributes.position.array),this},fromMesh:function(e){return this.fromWireframeGeometry(new three_module_js.WireframeGeometry(e.geometry)),this},fromLineSegments:function(e){var t=e.geometry;if(!t.isGeometry)return t.isBufferGeometry&&this.setPositions(t.attributes.position.array),this;console.error("THREE.LineSegmentsGeometry no longer supports Geometry. Use THREE.BufferGeometry instead.")},computeBoundingBox:(box=new three_module_js.Box3,function(){null===this.boundingBox&&(this.boundingBox=new three_module_js.Box3);var e=this.attributes.instanceStart,t=this.attributes.instanceEnd;void 0!==e&&void 0!==t&&(this.boundingBox.setFromBufferAttribute(e),box.setFromBufferAttribute(t),this.boundingBox.union(box))}),computeBoundingSphere:(vector=new three_module_js.Vector3,function(){null===this.boundingSphere&&(this.boundingSphere=new three_module_js.Sphere),null===this.boundingBox&&this.computeBoundingBox();var e=this.attributes.instanceStart,t=this.attributes.instanceEnd;if(void 0!==e&&void 0!==t){var n=this.boundingSphere.center;this.boundingBox.getCenter(n);for(var i=0,r=0,a=e.count;r<a;r++)vector.fromBufferAttribute(e,r),i=Math.max(i,n.distanceToSquared(vector)),vector.fromBufferAttribute(t,r),i=Math.max(i,n.distanceToSquared(vector));this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}),toJSON:function(){},applyMatrix:function(e){return console.warn("THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4()."),this.applyMatrix4(e)}});var LineGeometry=function(){LineSegmentsGeometry.call(this),this.type="LineGeometry"};LineGeometry.prototype=Object.assign(Object.create(LineSegmentsGeometry.prototype),{constructor:LineGeometry,isLineGeometry:!0,setPositions:function(e){for(var t=e.length-3,n=new Float32Array(2*t),i=0;i<t;i+=3)n[2*i]=e[i],n[2*i+1]=e[i+1],n[2*i+2]=e[i+2],n[2*i+3]=e[i+3],n[2*i+4]=e[i+4],n[2*i+5]=e[i+5];return LineSegmentsGeometry.prototype.setPositions.call(this,n),this},setColors:function(e){for(var t=e.length-3,n=new Float32Array(2*t),i=0;i<t;i+=3)n[2*i]=e[i],n[2*i+1]=e[i+1],n[2*i+2]=e[i+2],n[2*i+3]=e[i+3],n[2*i+4]=e[i+4],n[2*i+5]=e[i+5];return LineSegmentsGeometry.prototype.setColors.call(this,n),this},fromLine:function(e){var t=e.geometry;if(!t.isGeometry)return t.isBufferGeometry&&this.setPositions(t.attributes.position.array),this;console.error("THREE.LineGeometry no longer supports Geometry. Use THREE.BufferGeometry instead.")},copy:function(){return this}});var LineSegments2=function(e,t){void 0===e&&(e=new LineSegmentsGeometry),void 0===t&&(t=new LineMaterial({color:16777215*Math.random()})),three_module_js.Mesh.call(this,e,t),this.type="LineSegments2"},start,end;LineSegments2.prototype=Object.assign(Object.create(three_module_js.Mesh.prototype),{constructor:LineSegments2,isLineSegments2:!0,computeLineDistances:(start=new three_module_js.Vector3,end=new three_module_js.Vector3,function(){for(var e=this.geometry,t=e.attributes.instanceStart,n=e.attributes.instanceEnd,i=new Float32Array(2*t.data.count),r=0,a=0,o=t.data.count;r<o;r++,a+=2)start.fromBufferAttribute(t,r),end.fromBufferAttribute(n,r),i[a]=0===a?0:i[a-1],i[a+1]=i[a]+start.distanceTo(end);var s=new three_module_js.InstancedInterleavedBuffer(i,2,1);return e.setAttribute("instanceDistanceStart",new three_module_js.InterleavedBufferAttribute(s,1,0)),e.setAttribute("instanceDistanceEnd",new three_module_js.InterleavedBufferAttribute(s,1,1)),this}),raycast:function(){var e=new three_module_js.Vector4,t=new three_module_js.Vector4,n=new three_module_js.Vector4,i=new three_module_js.Vector3,r=new three_module_js.Matrix4,a=new three_module_js.Line3,o=new three_module_js.Vector3;return function(s,l){null===s.camera&&console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2.');var c=void 0!==s.params.Line2&&s.params.Line2.threshold||0,d=s.ray,u=s.camera,h=u.projectionMatrix,p=this.geometry,f=this.material,m=f.resolution,g=f.linewidth+c,_=p.attributes.instanceStart,v=p.attributes.instanceEnd,x=-u.near;d.at(1,n),n.w=1,n.applyMatrix4(u.matrixWorldInverse),n.applyMatrix4(h),n.multiplyScalar(1/n.w),n.x*=m.x/2,n.y*=m.y/2,n.z=0,i.copy(n);var T=this.matrixWorld;r.multiplyMatrices(u.matrixWorldInverse,T);for(var A=0,S=_.count;A<S;A++){if(e.fromBufferAttribute(_,A),t.fromBufferAttribute(v,A),e.w=1,t.w=1,e.applyMatrix4(r),t.applyMatrix4(r),!(e.z>x&&t.z>x)){if(e.z>x){const n=e.z-t.z,i=(e.z-x)/n;e.lerp(t,i)}else if(t.z>x){const n=t.z-e.z,i=(t.z-x)/n;t.lerp(e,i)}e.applyMatrix4(h),t.applyMatrix4(h),e.multiplyScalar(1/e.w),t.multiplyScalar(1/t.w),e.x*=m.x/2,e.y*=m.y/2,t.x*=m.x/2,t.y*=m.y/2,a.start.copy(e),a.start.z=0,a.end.copy(t),a.end.z=0;var b=a.closestPointToPointParameter(i,!0);a.at(b,o);var E=three_module_js.MathUtils.lerp(e.z,t.z,b),L=E>=-1&&E<=1,M=i.distanceTo(o)<.5*g;if(L&&M){a.start.fromBufferAttribute(_,A),a.end.fromBufferAttribute(v,A),a.start.applyMatrix4(T),a.end.applyMatrix4(T);var P=new three_module_js.Vector3,y=new three_module_js.Vector3;d.distanceSqToSegment(a.start,a.end,y,P),l.push({point:y,pointOnLine:P,distance:d.origin.distanceTo(y),object:this,face:null,faceIndex:A,uv:null,uv2:null})}}}}}()});class MeshLine extends LineSegments2{constructor(e,t){super(e,t),this._inverseMatrix=new three.Matrix4,this._ray=new three.Ray,this._frustum=new three.Frustum,this._box=new three.Box3,this.vStart=new three.Vector3,this.vEnd=new three.Vector3,this.interPoint=new three.Vector3,this.segmentPoint=new three.Vector3,this.material=t,t.dashed?t.defines.USE_DASH="":delete t.defines.USE_DASH,this.onBeforeRender=e=>e.getSize(t.resolution)}update(e){let t;if(e instanceof Float32Array)t=e;else{const n=this.geometry.attributes.instanceEnd;t=n?n.data.array:void 0,t&&t.length===3*e.length||(t=new Float32Array(3*e.length));for(let n=0;n<e.length;n++)e[n].toArray(t,3*n)}const n=this.geometry.getAttribute("instanceStart");n&&n.array.length!==2*t.length-6&&(this.geometry=new LineGeometry),this.geometry.setPositions(t),this.material.dashed&&this.computeLineDistances()}onUpload(e){this.geometry.attributes.instanceStart.data.onUploadCallback=e;this.geometry.attributes.instanceEnd.data.onUploadCallback=e}raycast(e,t){const n=this.geometry,i=this.matrixWorld;if(this._box.copy(n.boundingBox),this._box.applyMatrix4(i),!e.frustum.intersectsBox(this._box))return;this._inverseMatrix.copy(i).invert(),this._ray.copy(e.ray).applyMatrix4(this._inverseMatrix),this._frustum.copy(e.frustum);for(const e of this._frustum.planes)e.applyMatrix4(this._inverseMatrix);const r=this&&this instanceof three.LineSegments?2:1,a=n.attributes.instanceEnd.data.array;for(let n=0,i=a.length/3-1;n<i;n+=r){if(this.vStart.fromArray(a,3*n),this.vEnd.fromArray(a,3*n+3),!this.intersect(this._ray,this._frustum,this.vStart,this.vEnd,this.interPoint))continue;this.interPoint.applyMatrix4(this.matrixWorld);const i=e.ray.origin.distanceTo(this.interPoint);i<e.near||i>e.far||t.push({distance:i,point:this.interPoint.clone(),index:n,object:this})}}intersect(e,t,n,i,r){return e.distanceSqToSegment(n,i,r,this.segmentPoint),t.containsPoint(this.segmentPoint)}}class Cursor3D{constructor(e){this._api=e,this.snapTypes=[2,1,0],this.normal=new three.Vector3,this.createCursors(),this.createRenderPass(),this.cursor=this.faceCursor,this.initNavigationIntegration()}createCursors(){const e=new three.BufferGeometry;e.setAttribute("position",new BufferAttribute.BufferAttribute(new Float32Array([0,0,0]),3));const t=new three.TextureLoader,n=e=>t.load(e,(e=>{e.premultiplyAlpha=!1,e.generateMipmaps=!1,e.minFilter=three.LinearFilter,e.magFilter=three.LinearFilter,e.needsUpdate=!0})),i=new three.PointsMaterial({map:n("snap_face.png"),transparent:!0,depthWrite:!1,depthTest:!1,sizeAttenuation:!1,alphaTest:0,size:15});this.faceCursor=new three.Group;const r=new three.Points(e,i);r.renderOrder=1,this.faceCursor.add(r);const a=new three.MeshBasicMaterial({color:16777215,depthTest:!1,depthWrite:!1,transparent:!0,opacity:.3,side:three.DoubleSide}),o=new three.RingGeometry(2,2.25,4);o.translate(0,0,.01),o.rotateZ(Math.PI/4);const s=PickingTool.createScreenStaticSizeMesh(o,a,this._api);this.faceCursor.add(s),this.faceCursor.renderOrder=1,this.pointCursor=new three.Points(e,new three.PointsMaterial({map:n("snap_point.png"),transparent:!0,depthWrite:!1,depthTest:!1,sizeAttenuation:!1,size:15})),this.lineCursor=new three.Points(e,new three.PointsMaterial({map:n("snap_edge.png"),transparent:!0,depthWrite:!1,depthTest:!1,sizeAttenuation:!1,size:15})),this.lineHighlight=new MeshLine(new LineGeometry,new LineMaterial({linewidth:3,color:16777215,opacity:.3,depthTest:!1,depthWrite:!1,transparent:!0}))}createRenderPass(){this.renderPass=new RenderPass(new three.Scene,this._api.camera),this.renderPass.clear=!1,this._api.renderingManager.composer.addPassAfterAntialiasing(this.renderPass)}initNavigationIntegration(){this._api.eventDispatcher.subscribe("navigationstart",(()=>{this.cursor.visible=!1,this.isNavigating=!0})),this._api.eventDispatcher.subscribe("navigationend",(()=>{this.cursor.visible=!0,this.isNavigating=!1}))}subscribe(e){this._moveSubscription=this._api.inputHandler.pointerMove$.subscribe((async t=>{this.isNavigating||(await this.calculateIntersection(t,!1),e&&e())})),this.faceCursor.visible=!1,this.renderPass.scene.add(this.faceCursor),this.pointCursor.visible=!1,this.renderPass.scene.add(this.pointCursor),this.lineCursor.visible=!1,this.renderPass.scene.add(this.lineCursor),this.lineHighlight.visible=!1,this.renderPass.scene.add(this.lineHighlight),this._api.renderingManager.redraw()}unsubscribe(){this._moveSubscription&&(this._moveSubscription.unsubscribe(),this._moveSubscription=void 0,this.renderPass.scene.remove(this.faceCursor),this.renderPass.scene.remove(this.pointCursor),this.renderPass.scene.remove(this.lineCursor),this.renderPass.scene.remove(this.lineHighlight),this._api.renderingManager.redraw())}async calculateIntersection(e,t){e.intersection=await this._api.picker.pickSnapped(new three.Vector2(e.x,e.y),this.snapTypes,t),this.intersection=e.intersection;const n=this.intersection;if(this.cursor.visible=!1,n){if(this.cursor=2===n.snapType?this.pointCursor:1===n.snapType?this.lineCursor:this.faceCursor,this.cursor.position.copy(n.point),n.normal){this.normal.copy(this._api.camera.position).sub(n.point);const e=this.normal.dot(n.normal);this.normal.copy(n.normal),e<0&&this.normal.negate(),this.cursor.lookAt(this.normal.clone().add(n.point))}this.lineHighlight.visible=!!n.snapLineStart,n.snapLineStart&&this.lineHighlight.update([n.snapLineStart,n.snapLineEnd]),this.cursor.updateMatrix(),this.cursor.visible=!this.isNavigating}return this._api.renderingManager.redraw(),e}}class Analytics{constructor(e){this.settingsDispatcher=e,this.keywords=[],this.init(),this.command("create","UA-155752318-1","auto"),this.send({hitType:"pageview"}),window.addEventListener("error",(e=>{if(!e.error)return;const t=this.containsViewerKeyword(e.error.stack);t&&this.logError(e.error.stack+` (keyword: ${t})`)}))}containsViewerKeyword(e){for(const t of this.keywords)if(e.includes(t))return t}addViewerErrorStackKeyword(e){this.keywords.push(e)}init(){var e,t,n,i,r,a;this.settingsDispatcher.settings.analyticsEnabled&&(e=window,t=document,n="script",i="gawv",r=void 0,a=void 0,e.GoogleAnalyticsObject=i,e[i]=e[i]||function(){(e[i].q=e[i].q||[]).push(arguments)},e[i].l=(new Date).getTime(),r=t.createElement(n),a=t.getElementsByTagName(n)[0],r.async=1,r.src="https://www.google-analytics.com/analytics.js",a.parentNode.insertBefore(r,a))}command(e,t,n){this.settingsDispatcher.settings.analyticsEnabled&&gawv(e,t,n)}send(e){this.command("send",e)}logLoadEvent(e){this.send({hitType:"event",eventCategory:"Model",eventAction:"Load",eventLabel:e})}logError(e){this.send({hitType:"exception",exDescription:e}),this.send({hitType:"event",eventCategory:"Error",eventAction:"Error",eventLabel:e})}}class PublicCamera{constructor(e,t,n){this._camera=e,this._models=t,this._settingsHandler=n,this._rotation={pitch:0,yaw:0},this._direction=new three.Vector3,this._tmpVec3=new three.Vector3,this._tmpQuat=new three.Quaternion,this._tmpEuler=new three.Euler}subscribeKeys(e,t){e.keyDown$.subscribe((e=>{"KeyF"===e.code&&this.fitToView({models:t.size?t:void 0})}))}get position(){return this._camera.position}set position(e){this._camera.position.copy(e),this._camera.orthoLodPosition&&this._camera.orthoLodPosition.copy(e),this._camera.callListeners()}get quaternion(){return this._camera.quaternion}set quaternion(e){this._camera.quaternion.copy(e),this._camera.callListeners()}get nearMin(){return this._camera.nearMin}set nearMin(e){this._camera.nearMin=e}get rotation(){const e=this._tmpVec3.set(0,0,-1).applyQuaternion(this._camera.quaternion);return this._rotation.pitch=Math.PI-Math.atan2(Math.sqrt(e.x*e.x+e.y*e.y),e.z),Math.abs(e.z)>.999&&this._tmpVec3.set(0,1,0).applyQuaternion(this._camera.quaternion),this._rotation.yaw=-Math.atan2(this._tmpVec3.x,this._tmpVec3.y),this._rotation}set rotation(e){this.quaternion=this.rotationToQuaternion(e),this._camera.callListeners()}rotationToQuaternion(e){let t=e.yaw;return Math.abs(e.pitch-Math.PI)<.999&&(t+=Math.PI),this._tmpEuler.set(e.pitch,0,t,"YZX"),this._tmpQuat.setFromEuler(this._tmpEuler)}get direction(){return this._camera.getWorldDirection(this._direction)}get projectionType(){return this._camera.getProjectionType()}set projectionType(e){this._camera.setProjectionType(e)}setProjectionType(e){return this._camera.setProjectionType(e)}get aspect(){return this._camera.aspect}get fieldOfView(){return this._camera.fov}set fieldOfView(e){this._camera.fov=e,this._camera.callListeners()}get orthoSize(){return this._camera.orthoSize}set orthoSize(e){this._camera.orthoSize=e,this._camera.callListeners()}async animate(e,t,n,i,r){n&&(t=this.rotationToQuaternion(n)),await this._camera.animate(e,t,i,r)}async fitToView(e){if("string"==typeof e&&(e={models:new Map([[e,void 0]])}),void 0===e||void 0===e.models)return void await this._camera.fitToView(this._models.worldBoundingBox.value,this._settingsHandler.settings.animationTime,e?e.viewPreset:void 0,e?e.tightness:void 0);const t=new three.Box3;for(const[n,i]of e.models){const e=this._models.get(n);if(!e)throw new Error(`No model found named ${n}`);t.union(await e.getBoundingBox(i))}await this._camera.fitToView(t,this._settingsHandler.settings.animationTime,e.viewPreset,e.tightness)}}class TextureGenerator{constructor(){this.atlasIndex=0,this.measurementContext=document.createElement("canvas").getContext("2d")}generateTextTextures(e){this.textures={atlases:[],samples:[]},this.atlasIndex=0;const t=new Array;this.resetCanvas();for(const n of e){const e=1.2,i=n.text.split(/\r?\n/),r=n.size*devicePixelRatio,a=`${r}px ${n.font}`;this.measurementContext.font=a;const o=this.measurementContext.measureText(n.text);let s=r*e,l=r;"actualBoundingBoxAscent"in o&&"actualBoundingBoxDescent"in o&&(l=o.actualBoundingBoxAscent,s=l+o.actualBoundingBoxDescent);const c=1.2*r*(i.length-1)+s;let d=0;for(const e of i){const t=this.measurementContext.measureText(e).width;t>d&&(d=t)}this.fits(d,c,TextureGenerator.TEXT_ATLAS_MARGIN)||(this.offsetX=0,this.offsetY=this.boundingBoxY),this.fits(d,c,TextureGenerator.TEXT_ATLAS_MARGIN)||(this.makeTextAtlasTexture(t),this.resetCanvas());for(let n=0;n<i.length;++n)t.push({fontString:a,text:i[n],x:this.offsetX+1,y:this.offsetY+l+n*r*e+1});this.textures.samples.push(this.createAtlasSample(d,c)),this.boundingBoxX=Math.max(this.boundingBoxX,this.offsetX+d+TextureGenerator.TEXT_ATLAS_MARGIN),this.boundingBoxY=Math.max(this.boundingBoxY,this.offsetY+c+TextureGenerator.TEXT_ATLAS_MARGIN),this.offsetX+=d+TextureGenerator.TEXT_ATLAS_MARGIN}return this.samplesForCurrentAtlas>0&&this.makeTextAtlasTexture(t),this.textures}resetCanvas(){this.samplesForCurrentAtlas=0,this.offsetX=0,this.offsetY=0,this.boundingBoxX=0,this.boundingBoxY=0}fits(e,t,n){return this.offsetX+e+n<=TextureGenerator.MAX_ATLAS_SIZE&&this.offsetY+t+n<=TextureGenerator.MAX_ATLAS_SIZE}createAtlasSample(e,t){return this.samplesForCurrentAtlas++,{atlasIndex:this.atlasIndex,offsetX:this.offsetX,offsetY:this.offsetY,width:e+2,height:t+2}}makeTextAtlasTexture(e){const t=Math.max(this.boundingBoxX,this.boundingBoxY);this.atlasCanvas=document.createElement("canvas"),this.atlasCanvas.width=t,this.atlasCanvas.height=t;const n=this.atlasCanvas.getContext("2d");n.fillStyle="#ffffff";for(const t of e)n.font=t.fontString,n.fillText(t.text,t.x,t.y);e.length=0,this.textures.atlases.push({texture:TextureGenerator.createTextTexture(this.atlasCanvas),size:t}),this.atlasIndex++,this.atlasCanvas=void 0}static createTextTexture(e){const t=new three.Texture(e);return t.format=three.AlphaFormat,t.minFilter=three.LinearFilter,t.magFilter=three.LinearFilter,t.generateMipmaps=!1,t.premultiplyAlpha=!1,t.needsUpdate=!0,t.onUpdate=disposeImage,t}}TextureGenerator.MAX_ATLAS_SIZE=2048,TextureGenerator.TEXT_ATLAS_MARGIN=4;class SettingsDispatcher{constructor(e){this.listeners=new Map,this.settings=new Proxy(e,this)}subscribe(e,t){let n=this.listeners.get(e);n||(n=[]),this.listeners.set(e,n),n.push(t)}set(e,t,n){e[t]=n;const i=this.listeners.get(t);if(i)for(const e of i)e(n);return!0}}class WebglViewer extends HTMLElement{constructor(e){super(),console.log(`webgl-viewer build version: ${version}`);const t=new SettingsDispatcher(Object.assign({background:{topColor:new three.Color("#FFFFFF"),bottomColor:new three.Color("#AAAAAA")},color:new three.Color("#000000"),lengthUnit:"m",decimals:2,backgroundRotation:0,darkModeMaterials:!1,globalOpacity:1,vertexInterpolationMaterials:!1,progressiveRendering:!0,renderEdges:!0,ssao:!0,orderIndependentTransparency:!0,transparencyPeelsCount:2,hoverHighlightEnabled:!1,antialias:void 0,xrCompatible:!1,useWebgl2:!0,animationTime:500,selectionColor:new three.Color("#ffcc00"),hoverColor:new three.Color("#0000ff"),staticRootUrl:void 0,snapDistance:12,analyticsEnabled:!0,sandbox:!1},e||{}));this._initializeApi(t),this._api.analytics.addViewerErrorStackKeyword(this.constructor.name)}get settings(){return this._api.settingsDispatcher.settings}activateQualityPreset(e){this.applyQualityPreset(e)}applyQualityPreset(e){1===e?(this.settings.progressiveRendering=!1,this.settings.antialias=!0,this.settings.renderEdges=!0,this.settings.ssao=!0,this.settings.orderIndependentTransparency=!0,this.settings.transparencyPeelsCount=4,this.settings.vertexInterpolationMaterials=!1):0===e?(this.settings.progressiveRendering=!0,this.settings.antialias=void 0,this.settings.renderEdges=!0,this.settings.ssao=!0,this.settings.orderIndependentTransparency=!0,this.settings.transparencyPeelsCount=2,this.settings.vertexInterpolationMaterials=!1):-1===e?(this.settings.progressiveRendering=!0,this.settings.antialias=void 0,this.settings.renderEdges=!0,this.settings.ssao=!0,this.settings.orderIndependentTransparency=!0,this.settings.transparencyPeelsCount=1,this.settings.vertexInterpolationMaterials=!1):-2===e&&(this.settings.progressiveRendering=!0,this.settings.antialias=!1,this.settings.renderEdges=!1,this.settings.ssao=!1,this.settings.orderIndependentTransparency=!1,this.settings.vertexInterpolationMaterials=!0);for(const t in this.plugins){const n=this.plugins[t];n.applyQualityPreset&&n.applyQualityPreset(e)}}get globalOpacity(){return this.settings.globalOpacity}set globalOpacity(e){this.settings.globalOpacity=e}addPlugin(e){const t=e;if(t.api=this._api,this.plugins[t.name])throw Error(`Plugin ${t.name} is already initialized`);if(t.version!==version)throw Error(`Plugin version mismatch ${t.version}`);return this.plugins[t.name]=t,this._api.analytics.addViewerErrorStackKeyword(t.constructor.name),this}async load(e,t={}){t.fitToView=void 0===t.fitToView||t.fitToView;const n=Array.from(this._api.registry.LUT.entries()).find((n=>n[0](e,t)));if(!n)throw new Error(`Unknown model type: ${e}`);const i=await n[1](e,t);if(t.transform&&i.transform(t.transform),t.fitToView){const e=this._api.models.worldBoundingBox.value;this._api.camera.fitToView(e,this._api.settingsDispatcher.settings.animationTime)}return this._api.renderingManager.redraw(),this._api.analytics.logLoadEvent(i.name),i}async unload(e,t){e=(t=t||{fitToView:!0}).modelId||e,await this._api.models.remove(e),t.fitToView?this._api.camera.fitToView(this._api.models.worldBoundingBox.value,this._api.settingsDispatcher.settings.animationTime):this._api.renderingManager.redraw()}getModel(e,t){const n=this._api.models.get(e);return void 0===t||n instanceof t?n:void 0}getModels(){return Array.from(this._api.models.getIterable())}_initializeApi(e){this.initApiForJsdom();const t=this._api;three.Object3D.DefaultUp.copy(Vector3Const.up),t.staticRootUrl=e.settings.staticRootUrl||new URL(module.uri,document.baseURI).href.split("dist")[0]||"/",t.container=document.createElement("main"),t.container.setAttribute("id","content"),t.container.appendChild(document.createElement("canvas")),t.eventDispatcher=new EventDispatcher(this),t.settingsDispatcher=e,t.scene=new three.Scene,t.selection=new Selection,t.selection.startSelectionEventEmitter(t.eventDispatcher),t.models=new Models(t.scene,t.selection),t.plugins=new ApiContainer,t.camera=new WVCamera(this._api),t.picker=new Picker(t.camera,t.models,t.container,t.settingsDispatcher),t.renderingManager=new RenderingManager(t),t.htmlElementPositioner=new HtmlElementPositioner(t),t.inputHandler=new PickingTool.InputHandler(t.picker,t.container),this._publicCamera=new PublicCamera(t.camera,t.models,t.settingsDispatcher),this._publicCamera.subscribeKeys(t.inputHandler,t.selection),t.cursor=new Cursor3D(t),t.toolManager=new ToolManager(t),t.models.worldBoundingBox.subscribe((()=>t.renderingManager.redraw())),t.models.worldBoundingBox.subscribe((e=>t.picker.setWorldBoundingBox(e))),t.analytics=new Analytics(t.settingsDispatcher),t.textureGenerator=new TextureGenerator,this.createShadowDom(),this._api.renderingManager.start()}createShadowDom(){this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML+="\n            <style>\n                :host {\n                    display: block;\n                    box-sizing: border-box;\n                    height: 100%;\n                    width: 100%;\n                }\n\n                main {\n                    box-sizing: border-box;\n                    height: 100%;\n                    width: 100%;\n                    cursor: default;\n                    overflow: hidden;\n                    position: relative;\n                }\n\n                canvas {\n                    width: 100%;\n                    height: 100%;\n                    display: block;\n                    position: relative;\n                }\n\n                .grab {\n                    cursor: -webkit-grab !important;\n                    cursor: -moz-grab !important;\n                    cursor: grab !important;\n                }\n\n                .grabbing {\n                    cursor: -webkit-grabbing !important;\n                    cursor: -moz-grabbing !important;\n                    cursor: grabbing !important;\n                }\n\n                .default {\n                    cursor: default;\n                }\n            </style>",this.shadowRoot.appendChild(this._api.container)}initApiForJsdom(){const e={};this._api=e,e.registry=new Registry}set activeTool(e){this._api.toolManager.activeTool=e}get activeTool(){return this._api.toolManager.activeTool}get tools(){return this._api.toolManager.tools}get plugins(){return this._api.plugins}async screenshot(e,t,n){return this._api.renderingManager.screenshot(e,t,n)}get selection(){return this._api.selection}get camera(){return this._publicCamera}get vr(){return this._api.renderingManager.vr}}eval("if (window.customElements && typeof WebglViewer !== 'undefined') window.customElements.define('webgl-viewer', WebglViewer)");class WebglViewerPlugin{get version(){return version}}class Model extends three.Object3D{constructor(e){super(),super.name=e,this.boundingBox=new BehaviorSubject(new three.Box3),this.up.copy(Vector3Const.up)}get modelId(){return this.name}getBoundingBox(e){return Promise.resolve(this.boundingBox.value)}subscribeToBoundingBox(e){this.boundingBox.subscribe(e)}transform(e){const t=(new three.Matrix4).fromArray(e.elements),n=this.matrixWorld.clone();t.decompose(this.position,this.quaternion,this.scale);const i=t.multiply(n.invert());this.boundingBox.value.applyMatrix4(i),this.updateMatrixWorld(!0),this.boundingBox.next(this.boundingBox.value)}isLoading(){return!1}dispose(){}}const threeMath={Vector3:three.Vector3,Quaternion:three.Quaternion,Matrix4:three.Matrix4,Euler:three.Euler,Box3:three.Box3,Vector2:three.Vector2,Line3:three.Line3,Ray:three.Ray,Triangle:three.Triangle,Spherical:three.Spherical,Cylindrical:three.Cylindrical,Plane:three.Plane,Frustum:three.Frustum,Sphere:three.Sphere,Matrix3:three.Matrix3,Box2:three.Box2,Vector4:three.Vector4,Color:three.Color};window.threeMath=threeMath,eval("Object.assign(window, threeMath)"),Object.defineProperty(exports,"Box2",{enumerable:!0,get:function(){return three.Box2}}),Object.defineProperty(exports,"Box3",{enumerable:!0,get:function(){return three.Box3}}),Object.defineProperty(exports,"Color",{enumerable:!0,get:function(){return three.Color}}),Object.defineProperty(exports,"Cylindrical",{enumerable:!0,get:function(){return three.Cylindrical}}),Object.defineProperty(exports,"Euler",{enumerable:!0,get:function(){return three.Euler}}),Object.defineProperty(exports,"Frustum",{enumerable:!0,get:function(){return three.Frustum}}),Object.defineProperty(exports,"Line3",{enumerable:!0,get:function(){return three.Line3}}),Object.defineProperty(exports,"Matrix3",{enumerable:!0,get:function(){return three.Matrix3}}),Object.defineProperty(exports,"Matrix4",{enumerable:!0,get:function(){return three.Matrix4}}),Object.defineProperty(exports,"Plane",{enumerable:!0,get:function(){return three.Plane}}),Object.defineProperty(exports,"Quaternion",{enumerable:!0,get:function(){return three.Quaternion}}),Object.defineProperty(exports,"Ray",{enumerable:!0,get:function(){return three.Ray}}),Object.defineProperty(exports,"Sphere",{enumerable:!0,get:function(){return three.Sphere}}),Object.defineProperty(exports,"Spherical",{enumerable:!0,get:function(){return three.Spherical}}),Object.defineProperty(exports,"Triangle",{enumerable:!0,get:function(){return three.Triangle}}),Object.defineProperty(exports,"Vector2",{enumerable:!0,get:function(){return three.Vector2}}),Object.defineProperty(exports,"Vector3",{enumerable:!0,get:function(){return three.Vector3}}),Object.defineProperty(exports,"Vector4",{enumerable:!0,get:function(){return three.Vector4}}),exports.AreaSelectionTool=PickingTool.AreaSelectionTool,exports.DirectionToSpherical=PickingTool.DirectionToSpherical,exports.MILLIMETERS_IN_FOOT=PickingTool.MILLIMETERS_IN_FOOT,exports.MILLIMETERS_IN_INCH=PickingTool.MILLIMETERS_IN_INCH,exports.PickingTool=PickingTool.PickingTool,exports.SelectionTool=PickingTool.SelectionTool,exports.SphericalToDirection=PickingTool.SphericalToDirection,exports.calculateSphericalYAngle=PickingTool.calculateSphericalYAngle,exports.closestPointBetweenRays=PickingTool.closestPointBetweenRays,exports.copyToVector3=PickingTool.copyToVector3,exports.createArrowGeometry=PickingTool.createArrowGeometry,exports.createGeometryAttribute=PickingTool.createGeometryAttribute,exports.createScreenStaticSizeMesh=PickingTool.createScreenStaticSizeMesh,exports.distanceFormatter=PickingTool.distanceFormatter,exports.formatLength=PickingTool.formatLength,exports.getBoxCorners=PickingTool.getBoxCorners,exports.getFileBuffer=PickingTool.getFileBuffer,exports.getRayIntersection=PickingTool.getRayIntersection,exports.getTouchPoint=PickingTool.getTouchPoint,exports.lengthUnits=PickingTool.lengthUnits,exports.makeScreenStaticSize=PickingTool.makeScreenStaticSize,exports.positionFormatter=PickingTool.positionFormatter,exports.rayToWorldPosition=PickingTool.rayToWorldPosition,exports.toImage=PickingTool.toImage,exports.AbstractOrbit=AbstractOrbit,exports.ApiContainer=ApiContainer,exports.Fly=Fly,exports.Model=Model,exports.Orbit=Orbit,exports.Pan=Pan,exports.PublicCamera=PublicCamera,exports.Selection=Selection,exports.VRManager=VRManager,exports.WebglViewer=WebglViewer,exports.WebglViewerPlugin=WebglViewerPlugin,exports.Zoom=Zoom,exports.easeInOutQuad=easeInOutQuad,exports.easeInQuad=easeInQuad,exports.easeLinear=easeLinear,exports.easeOutQuad=easeOutQuad,Object.defineProperty(exports,"__esModule",{value:!0})}));
//# sourceMappingURL=index.js.map
