{"version":3,"file":"4efec337.mjs","sources":["../../src/Tools/SinglePointerTool.ts","../../src/Picker/Caster.ts","../../src/Helpers/utils.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../node_modules/rxjs/src/internal/config.ts","../../../../node_modules/rxjs/src/internal/Observer.ts","../../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../../node_modules/rxjs/src/internal/Subscription.ts","../../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../../node_modules/rxjs/src/internal/Observable.ts","../../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../../node_modules/rxjs/src/internal/util/canReportError.ts","../../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../../node_modules/rxjs/src/internal/Subject.ts","../../../../node_modules/rxjs/src/internal/operators/refCount.ts","../../../../node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","../../../../node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","../../../../node_modules/rxjs/src/internal/scheduler/Action.ts","../../../../node_modules/rxjs/src/internal/Scheduler.ts","../../../../node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","../../../../node_modules/rxjs/src/internal/observable/empty.ts","../../../../node_modules/rxjs/src/internal/util/isScheduler.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../../../node_modules/rxjs/src/internal/scheduled/scheduleArray.ts","../../../../node_modules/rxjs/src/internal/observable/of.ts","../../../../node_modules/rxjs/src/internal/observable/throwError.ts","../../../../node_modules/rxjs/src/internal/Notification.ts","../../../../node_modules/rxjs/src/internal/operators/map.ts","../../../../node_modules/rxjs/src/internal/symbol/iterator.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToObservable.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToPromise.ts","../../../../node_modules/rxjs/src/internal/util/subscribeTo.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToIterable.ts","../../../../node_modules/rxjs/src/internal/scheduled/scheduled.ts","../../../../node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts","../../../../node_modules/rxjs/src/internal/scheduled/schedulePromise.ts","../../../../node_modules/rxjs/src/internal/util/isIterable.ts","../../../../node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts","../../../../node_modules/rxjs/src/internal/observable/from.ts","../../../../node_modules/rxjs/src/internal/innerSubscribe.ts","../../../../node_modules/rxjs/src/internal/operators/mergeMap.ts","../../../../node_modules/rxjs/src/internal/observable/fromEvent.ts","../../../../node_modules/rxjs/src/internal/observable/merge.ts","../../../../node_modules/rxjs/src/internal/operators/filter.ts","../../../../node_modules/rxjs/src/internal/observable/timer.ts","../../../../node_modules/rxjs/src/internal/operators/buffer.ts","../../../../node_modules/rxjs/src/internal/operators/debounceTime.ts","../../../../node_modules/rxjs/src/internal/operators/delay.ts","../../../../node_modules/rxjs/src/internal/operators/multicast.ts","../../../../node_modules/rxjs/src/internal/operators/publish.ts","../../../../node_modules/rxjs/src/internal/operators/switchMap.ts","../../../../node_modules/rxjs/src/internal/operators/takeUntil.ts","../../../../node_modules/rxjs/src/internal/operators/tap.ts","../../src/InputHandler.ts","../../src/Tools/AreaSelectionTool.ts","../../src/Tools/SelectionTool.ts","../../src/Tools/PickingTool.ts"],"sourcesContent":["import {MouseButton, Tool} from \"../common\";\nimport {PointerObservableOptions} from \"../InputHandler\";\n\nexport abstract class SinglePointerTool implements Tool {\n    get mouseButton(): MouseButton {\n        return this.observableOptions.button;\n    }\n\n    set mouseButton(v: MouseButton) {\n        this.observableOptions.button = v;\n    }\n\n    get touchCount(): number {\n        return this.observableOptions.touchCount;\n    }\n\n    set touchCount(v: number) {\n        this.observableOptions.touchCount = v;\n    }\n\n    protected observableOptions: PointerObservableOptions = {button: MouseButton.left, touchCount: 1}\n\n    abstract enabled: boolean;\n    abstract name: string;\n}\n","import { Vector2, Raycaster, Frustum } from \"three\";\n\nexport class Caster extends Raycaster {\n    screenPosition: Vector2;\n    frustum: Frustum;\n    navigation: boolean;\n\n    constructor() {\n        super();\n    }\n}\n","import {CustomLengthFormatter, LengthUnit} from \"../common\";\nimport {\n    Box3,\n    BufferAttribute,\n    BufferGeometry,\n    Camera, ConeGeometry, Euler,\n    Material, Matrix4,\n    Mesh, Object3D,\n    Ray,\n    TypedArray,\n    Vector2,\n    Vector3\n} from \"three\";\nimport {IIntersection} from \"../Picker/IIntersection\";\nimport {Caster} from \"../Picker/Caster\";\nimport {Api} from \"../Api\";\nimport {BufferGeometryUtils} from \"three/examples/jsm/utils/BufferGeometryUtils\";\n\nexport function getBoxCorners(box: Box3): Vector3[] {\n    const min = box.min.x === Infinity ? new Vector3(-50, -50, -50) : box.min;\n    const max = box.max.x === -Infinity ? new Vector3(50, 50, 50) : box.max;\n    const corners: Vector3[] = [];\n\n    /*\n      5____4\n\t1/___0/|\n\t| 6__|_7\n\t2/___3/\n\t0: max.x, max.y, max.z\n\t1: min.x, max.y, max.z\n\t2: min.x, min.y, max.z\n\t3: max.x, min.y, max.z\n\t4: max.x, max.y, min.z\n\t5: min.x, max.y, min.z\n\t6: min.x, min.y, min.z\n\t7: max.x, min.y, min.z\n\t*/\n\n    corners.push(new Vector3(max.x, max.y, max.z));\n    corners.push(new Vector3(min.x, max.y, max.z));\n    corners.push(new Vector3(min.x, min.y, max.z));\n    corners.push(new Vector3(max.x, min.y, max.z));\n\n    corners.push(new Vector3(max.x, max.y, min.z));\n    corners.push(new Vector3(min.x, max.y, min.z));\n    corners.push(new Vector3(min.x, min.y, min.z));\n    corners.push(new Vector3(max.x, min.y, min.z));\n\n    return corners;\n}\n\nexport function DirectionToSpherical(direction: Vector3, up: Vector3): Vector2 {\n    let y: number;\n\n    if (Math.abs(direction.x) < 0.002 && Math.abs(direction.y) < 0.002) {\n        if (direction.z > 0) {\n            y = Math.PI + calculateSphericalYAngle(up);\n        } else {\n            y = calculateSphericalYAngle(up);\n        }\n    } else {\n        y = Math.atan2(direction.y, direction.x);\n    }\n\n    return new Vector2(Math.acos(direction.z), y);\n}\n\nexport function calculateSphericalYAngle(up: Vector3): number {\n    if (up.x === 0.0) {\n        if (up.y > 0) {\n            return Math.PI / 2;\n        } else {\n            return -Math.PI / 2;\n        }\n    } else if (up.y === 0) {\n        if (up.x > 0) {\n            return 0.0;\n        } else {\n            return Math.PI;\n        }\n    } else {\n        const angle = Math.atan2(Math.abs(up.y), Math.abs(up.x));\n\n        if (up.x < 0) {\n            if (up.y < 0) {\n                return angle + Math.PI;\n            } else {\n                return angle + Math.PI / 2;\n            }\n        } else {\n            if (up.y < 0) {\n                return angle + 1.5 * Math.PI;\n            } else {\n                return angle;\n            }\n        }\n    }\n}\n\nexport function SphericalToDirection(sphericalCoordinates: Vector2, vec: Vector3): Vector3 {\n    return vec.set(\n        Math.sin(sphericalCoordinates.x) * Math.cos(sphericalCoordinates.y),\n        Math.sin(sphericalCoordinates.x) * Math.sin(sphericalCoordinates.y),\n        Math.cos(sphericalCoordinates.x)\n    ).normalize();\n}\n\nexport function closestPointBetweenRays(line0: Ray, line1: Ray): Vector3 {\n    const originDiff = new Vector3().subVectors(line0.origin, line1.origin);\n    const a01 = -line0.direction.dot(line1.direction);\n\n    const b0 = originDiff.dot(line0.direction);\n    const c = originDiff.length();\n    const determinant = Math.abs(1.0 - a01 * a01);\n    let line0Parameter: number;\n\n    if (determinant >= 0) {\n        // lines are not parallel\n        const fB1 = -originDiff.dot(line1.direction);\n        const inverseDeterminant = 1.0 / determinant;\n        line0Parameter = (a01 * fB1 - b0) * inverseDeterminant;\n    } else {\n        // lines are parallel, select any closest pair of points\n        line0Parameter = -b0;\n    }\n\n    return new Vector3()\n        .copy(line0.origin)\n        .add(line0.direction.multiplyScalar(line0Parameter));\n}\n\nexport function getTouchPoint(event: TouchEvent): { x: number; y: number } {\n    const point = { x: 0, y: 0 };\n    const touches = event.touches.length !== 0 ? event.touches : event.changedTouches;\n    for (const touch of touches) {\n        point.x += touch.clientX;\n        point.y += touch.clientY;\n    }\n    point.x /= touches.length;\n    point.y /= touches.length;\n    return point;\n}\n\nexport function getRayIntersection(x: number, y: number, camera: Camera): IIntersection {\n    const vector = new Vector3();\n    const raycaster = new Caster();\n\n    vector.set((x / window.innerWidth) * 2 - 1, -(y / window.innerHeight) * 2 + 1, 0.5);\n\n    vector.unproject(camera);\n\n    const dir = vector.sub(camera.position).normalize();\n    raycaster.set(camera.position, dir);\n    return {\n        id: null,\n        object: null,\n        model: null,\n        caster: raycaster\n    };\n}\n\nexport function rayToWorldPosition(ray: Ray, camera: Camera, point: Vector3): Vector3 {\n    const dir = ray.direction;\n    const distance = camera.position.distanceTo(point);\n    return camera.position.clone().add(dir.multiplyScalar(distance));\n}\n\nexport function copyToVector3(from: Vector3, to: Vector3): Vector3 {\n    to.x = from.x; to.y = from.y; to.z = from.z;\n    return to;\n}\n\nexport const MILLIMETERS_IN_FOOT = 304.8;\nexport const MILLIMETERS_IN_INCH = 25.4;\n\nexport const lengthUnits: Record<\n    LengthUnit,\n    { inMillimeters: number; symbol: string }\n> = {\n    mm: { inMillimeters: 1, symbol: \"mm\" },\n    cm: { inMillimeters: 1e1, symbol: \"cm\" },\n    m: { inMillimeters: 1e3, symbol: \"m\" },\n    km: { inMillimeters: 1e6, symbol: \"km\" },\n    ft: { inMillimeters: MILLIMETERS_IN_FOOT, symbol: \"ft\" },\n    in: { inMillimeters: MILLIMETERS_IN_INCH, symbol: \"in\" },\n    yd: { inMillimeters: 914.4, symbol: \"yd\" },\n    mi: { inMillimeters: 1609344, symbol: \"mi\" },\n    custom: { inMillimeters: 1e3, symbol: \"m\" }\n};\n\nexport function formatLength(\n    millimeters: number,\n    unit: LengthUnit,\n    decimals: number = 2\n): string {\n    const value = lengthUnits[unit];\n    return `${roundToDecimals(millimeters / value.inMillimeters, decimals)} ${value.symbol}`;\n}\n\nfunction roundToDecimals(value: number, decimals: number): number {\n    const p = Math.pow(10, decimals);\n    return Math.round(value * p) / p;\n}\n\nexport const distanceFormatter = (lengthUnit: LengthUnit, decimals: number) => {\n    return (distance: number) => {\n        return formatLength(distance * 1000, lengthUnit, decimals);\n    };\n};\n\nexport const positionFormatter = (position: Vector3, lengthFormatter: CustomLengthFormatter) => {\n    return `X ${lengthFormatter(position.x)} | Y ${lengthFormatter(position.y)} | Z ${lengthFormatter(position.z)}`;\n};\n\nexport function createGeometryAttribute(geometry: BufferGeometry, attributeName: string, length: number, itemSize: number, arrayType: new (size: number) => TypedArray): BufferAttribute {\n    let array: TypedArray;\n    let attribute = attributeName === \"index\" ? geometry.getIndex() : geometry.getAttribute(attributeName) as BufferAttribute;\n\n    // minimize the number of array allocations, reallocate only if too small or 2x size\n    if (attribute && attribute.array.length >= length * itemSize && attribute.array.length < length * itemSize * 2) {\n        attribute.count = length;\n        attribute.updateRange.count = length * itemSize;\n        attribute.needsUpdate = true;\n    }\n    else {\n        array = new arrayType(length * itemSize);\n        attribute = new BufferAttribute(array, itemSize);\n        if (attributeName === \"index\") geometry.setIndex(attribute);\n        else geometry.setAttribute(attributeName, attribute);\n    }\n    return attribute;\n}\n\nexport interface ITrimBIMValidationInfo {\n    version?: string;\n    versionNumber?: number;\n}\n\nexport function getFileBuffer(file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = event => {\n            const target = <any>event.target;\n            resolve(target.result);\n        };\n\n        reader.onerror = e => {\n            console.error(e);\n            return reject(e);\n        };\n\n        reader.readAsArrayBuffer(file);\n    });\n}\n\nexport async function toImage(blob: Blob): Promise<ImageBitmap | HTMLImageElement> {\n    if (typeof createImageBitmap === \"undefined\") {\n        return new Promise(async (resolve, reject) => {\n            const img = new Image();\n            img.src = URL.createObjectURL(blob);\n            img.onload = () => resolve(img);\n            img.onerror = () => reject(\"Image did not load\");\n        });\n    }\n\n    try {\n        // @ts-ignore\n        return await createImageBitmap(blob, { imageOrientation: \"flipY\" });\n    } catch (e) {\n        return await createImageBitmap(blob); // firefox does not support options argument\n    }\n}\n\nconst vec3 = new Vector3();\nexport function createScreenStaticSizeMesh(geometry: BufferGeometry, material: Material, api: Api, adjustScale?: (scale: number) => number): Mesh {\n    const marker = new Mesh(geometry, material as any);\n    makeScreenStaticSize(marker, api, adjustScale);\n    return marker;\n}\n\nexport function makeScreenStaticSize(object: Object3D, api: Api, adjustScale?: (scale: number) => number): void {\n    object.renderOrder = 1;\n\n    let mesh: Mesh = undefined;\n    object.traverse(o => { if (o instanceof Mesh) mesh = o });\n    mesh.onBeforeRender = () => {\n        let scale = api.camera.getProjectionCompensatingScale(object.getWorldPosition(vec3).distanceTo(api.camera.position));\n        if (adjustScale) scale = adjustScale(scale);\n        object.scale.set(scale, scale, scale);\n        object.updateMatrixWorld(true);\n    };\n}\n\nexport function createArrowGeometry(size: number): BufferGeometry {\n    const geometry = new ConeGeometry(size / 3, size, 10);\n    geometry.applyMatrix4(new Matrix4().makeRotationFromEuler(new Euler(-Math.PI / 2, 0, 0)).setPosition(0, 0, size / 2));\n    return geometry;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export function isObject(x: any): x is Object {\n  return x !== null && typeof x === 'object';\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nconst UnsubscriptionErrorImpl = (() => {\n  function UnsubscriptionErrorImpl(this: any, errors: any[]) {\n    Error.call(this);\n    this.message = errors ?\n      `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n  }\n\n  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n  return UnsubscriptionErrorImpl;\n})();\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (this as any)._ctorUnsubscribe = true;\n      (this as any)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      // It's only possible to null _unsubscribe - to release the reference to\n      // any teardown function passed in the constructor - if the property was\n      // actually assigned in the constructor, as there are some classes that\n      // are derived from Subscriber (which derives from Subscription) that\n      // implement an _unsubscribe method as a mechanism for obtaining\n      // unsubscription notifications and some of those subscribers are\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\n      // from a prototype method to an instance property - see notifyNext in\n      // RetryWhenSubscriber.\n      if (_ctorUnsubscribe) {\n        (this as any)._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber = (() =>\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random())();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { noop } from './noop';\nimport { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   * @deprecated use new Observable() instead\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;\n  /** @deprecated Use an observer instead of an error callback */\n  subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * );\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nconst ObjectUnsubscribedErrorImpl = (() => {\n  function ObjectUnsubscribedErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n  }\n\n  ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n  return ObjectUnsubscribedErrorImpl;\n})();\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse\n   * @deprecated use new Subject() instead\n  */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the *publish* operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { tap, publish, refCount } from 'rxjs/operators';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap((num) => console.log(`refCount ${num}`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap((num) => console.log(`publish ${num}`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the publish operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = (() => {\n  const connectableProto = <any>ConnectableObservable.prototype;\n  return {\n    operator: { value: null as null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null as null, writable: true },\n    _connection: { value: null as null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n  };\n})();\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    clearInterval(id);\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport class Scheduler implements SchedulerLike {\n\n  /**\n   * Note: the extra arrow function wrapper is to make testing by overriding\n   * Date.now easier.\n   * @nocollapse\n   */\n  public static now: () => number = () => Date.now();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```ts\n * import { empty } from 'rxjs';\n * import { startWith } from 'rxjs/operators';\n *\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```ts\n * import { empty, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return An \"empty\" Observable: emits only the complete\n * notification.\n * @deprecated Deprecated in favor of using {@link EMPTY} constant, or {@link scheduled} (e.g. `scheduled([], scheduler)`)\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  subscriber.complete();\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let i = 0;\n    sub.add(scheduler.schedule(function () {\n      if (i === input.length) {\n        subscriber.complete();\n        return;\n      }\n      subscriber.next(input[i++]);\n      if (!subscriber.closed) {\n        sub.add(this.schedule());\n      }\n    }));\n    return sub;\n  });\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { Observable } from '../Observable';\nimport { scheduleArray } from '../scheduled/scheduleArray';\n\n/* tslint:disable:max-line-length */\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T>(a: T, scheduler: SchedulerLike): Observable<T>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2>(a: T, b: T2, scheduler: SchedulerLike): Observable<T | T2>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: (T | SchedulerLike)[]): Observable<T>;\n\n// TODO(benlesh): Update the typings for this when we can switch to TS 3.x\nexport function of<T>(a: T): Observable<T>;\nexport function of<T, T2>(a: T, b: T2): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: T[]): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: 10'\n * // 'next: 20'\n * // 'next: 30'\n *\n * ```\n *\n * Emit the array `[1,2,3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1,2,3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: [1,2,3]'\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n * @method of\n * @owner Observable\n */\n\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n    return scheduleArray(args as T[], scheduler);\n  } else {\n    return fromArray(args as T[]);\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * ![](throw.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```ts\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // 7\n * // Error: oops!\n * ```\n *\n * ---\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 2\n * ```ts\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 2\n *     ? throwError('Twos are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // a\n * // b\n * // c\n * // a\n * // b\n * // c\n * // Twos are bad\n * ```\n *\n * @see {@link Observable}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throwError\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n","import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { deprecate } from 'util';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: 'N' | 'E' | 'C', public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: R;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","import { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>): (subscriber: Subscriber<T>) => Subscription | void => {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = (iterable as any)[Symbol_iterator]();\n\n  do {\n    let item: IteratorResult<T>;\n    try {\n      item = iterator.next();\n    } catch (err) {\n      subscriber.error(err);\n      return subscriber;\n    }\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { ObservableInput, SchedulerLike, Observable } from 'rxjs';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see from\n * @see of\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return scheduleIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => {\n      const observable: Subscribable<T> = input[Symbol_observable]();\n      sub.add(observable.subscribe({\n        next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n        error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n        complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n      }));\n    }));\n    return sub;\n  });\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => input.then(\n      value => {\n        sub.add(scheduler.schedule(() => {\n          subscriber.next(value);\n          sub.add(scheduler.schedule(() => subscriber.complete()));\n        }));\n      },\n      err => {\n        sub.add(scheduler.schedule(() => subscriber.error(err)));\n      }\n    )));\n    return sub;\n  });\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let iterator: Iterator<T>;\n    sub.add(() => {\n      // Finalize generators\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(() => {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        let value: T;\n        let done: boolean;\n        try {\n          const result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n","import { Observable } from '../Observable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated use {@link scheduled} instead. */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * ### Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * ---\n *\n * ### With async scheduler\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start\n * // end\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n * @name from\n * @owner Observable\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable<T>(subscribeTo(input));\n  } else {\n    return scheduled(input, scheduler);\n  }\n}\n","/** @prettier */\nimport { Subscription } from './Subscription';\nimport { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\n\ninterface SimpleOuterSubscriberLike<T> {\n  /**\n   * A handler for inner next notifications from the inner subscription\n   * @param innerValue the value nexted by the inner producer\n   */\n  notifyNext(innerValue: T): void;\n  /**\n   * A handler for inner error notifications from the inner subscription\n   * @param err the error from the inner producer\n   */\n  notifyError(err: any): void;\n  /**\n   * A handler for inner complete notifications from the inner subscription.\n   */\n  notifyComplete(): void;\n}\n\nexport class SimpleInnerSubscriber<T> extends Subscriber<T> {\n  constructor(private parent: SimpleOuterSubscriberLike<any>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this.parent.notifyNext(value);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  }\n}\n\nexport class ComplexInnerSubscriber<T, R> extends Subscriber<R> {\n  constructor(private parent: ComplexOuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n\nexport class SimpleOuterSubscriber<T, R> extends Subscriber<T> implements SimpleOuterSubscriberLike<R> {\n  notifyNext(innerValue: R): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.destination.complete();\n  }\n}\n\n/**\n * DO NOT USE (formerly \"OuterSubscriber\")\n * TODO: We want to refactor this and remove it. It is retaining values it shouldn't for long\n * periods of time.\n */\nexport class ComplexOuterSubscriber<T, R> extends Subscriber<T> {\n  /**\n   * @param _outerValue Used by: bufferToggle, delayWhen, windowToggle\n   * @param innerValue Used by: subclass default, combineLatest, race, bufferToggle, windowToggle, withLatestFrom\n   * @param _outerIndex Used by: combineLatest, race, withLatestFrom\n   * @param _innerSub Used by: delayWhen\n   */\n  notifyNext(_outerValue: T, innerValue: R, _outerIndex: number, _innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any): void {\n    this.destination.error(error);\n  }\n\n  /**\n   * @param _innerSub Used by: race, bufferToggle, delayWhen, windowToggle, windowWhen\n   */\n  notifyComplete(_innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n\nexport function innerSubscribe(result: any, innerSubscriber: Subscriber<any>): Subscription | undefined {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n  let subscription: Subscription;\n  try {\n    subscription = subscribeTo(result)(innerSubscriber) as Subscription;\n  } catch (error) {\n    innerSubscriber.error(error);\n  }\n  return subscription;\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { mergeMap, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b: any, ii: number) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result);\n  }\n\n  private _innerSub(ish: ObservableInput<R>): void {\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    const innerSubscription = innerSubscribe(ish, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete!();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(innerValue: R): void {\n    this.destination.next!(innerValue);\n  }\n\n  notifyComplete(): void {\n    const buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift()!);\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete!();\n    }\n  }\n}\n\n/**\n * @deprecated renamed. Use {@link mergeMap}\n */\nexport const flatMap = mergeMap;","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\nconst toString: Function = (() => Object.prototype.toString)();\n\nexport interface NodeStyleEventEmitter {\n  addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n  removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener: (eventName: string, handler: NodeEventHandler) => void | {};\n  removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\n}\n\nexport interface JQueryStyleEventEmitter {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\n  removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\n}\n\nexport type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | NodeCompatibleEventEmitter | JQueryStyleEventEmitter;\n\nexport type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\n/* tslint:disable:max-line-length */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n * ### Emits clicks happening on the DOM document\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * ### Use addEventListener with capture option\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                              // which will be passed to addEventListener\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n * @name fromEvent\n */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: ((...args: any[]) => T)\n): Observable<T> {\n\n  if (isFunction(options)) {\n    // DEPRECATED PATH\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEvent<T>(target, eventName, <EventListenerOptions | undefined>options).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T>(subscriber => {\n    function handler(e: T) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n    setupSubscription(target, eventName, handler, subscriber, options as EventListenerOptions);\n  });\n}\n\nfunction setupSubscription<T>(sourceObj: FromEventTarget<T>, eventName: string,\n                              handler: (...args: any[]) => void, subscriber: Subscriber<T>,\n                              options?: EventListenerOptions) {\n  let unsubscribe: () => void;\n  if (isEventTarget(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addEventListener(eventName, handler, options);\n    unsubscribe = () => source.removeEventListener(eventName, handler, options);\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.on(eventName, handler);\n    unsubscribe = () => source.off(eventName, handler);\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addListener(eventName, handler as NodeEventHandler);\n    unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n  } else if (sourceObj && (sourceObj as any).length) {\n    for (let i = 0, len = (sourceObj as any).length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is HasEventTargetAddRemove<any> {\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike} from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\n\n/* tslint:disable:max-line-length */\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T>(v1: ObservableInput<T>, scheduler: SchedulerLike): Observable<T>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T>(v1: ObservableInput<T>, concurrent: number, scheduler: SchedulerLike): Observable<T>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler: SchedulerLike): Observable<T | T2>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n\nexport function merge<T>(v1: ObservableInput<T>): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | number)[]): Observable<T>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | number)[]): Observable<R>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```ts\n * import { merge, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: SchedulerLike = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <SchedulerLike>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll<R>(concurrent)(fromArray<any>(observables, scheduler));\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { filter } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that starts emitting after an `dueTime` and\n * emits ever increasing numbers after each `period` of time thereafter.\n *\n * <span class=\"informal\">Its like {@link index/interval}, but you can specify when\n * should the emissions start.</span>\n *\n * ![](timer.png)\n *\n * `timer` returns an Observable that emits an infinite sequence of ascending\n * integers, with a constant interval of time, `period` of your choosing\n * between those emissions. The first emission happens after the specified\n * `dueTime`. The initial delay may be a `Date`. By default, this\n * operator uses the {@link asyncScheduler} {@link SchedulerLike} to provide a notion of time, but you\n * may pass any {@link SchedulerLike} to it. If `period` is not specified, the output\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\n * sequence.\n *\n * ## Examples\n * ### Emits ascending numbers, one every second (1000ms), starting after 3 seconds\n * ```ts\n * import { timer } from 'rxjs';\n *\n * const numbers = timer(3000, 1000);\n * numbers.subscribe(x => console.log(x));\n * ```\n *\n * ### Emits one number after five seconds\n * ```ts\n * import { timer } from 'rxjs';\n *\n * const numbers = timer(5000);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link index/interval}\n * @see {@link delay}\n *\n * @param {number|Date} [dueTime] The initial delay time specified as a Date object or as an integer denoting\n * milliseconds to wait before emitting the first value of 0`.\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n * subsequent numbers.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a `0` after the\n * `dueTime` and ever increasing numbers after each `period` of time\n * thereafter.\n * @static true\n * @name timer\n * @owner Observable\n */\nexport function timer(dueTime: number | Date = 0,\n                      periodOrScheduler?: number | SchedulerLike,\n                      scheduler?: SchedulerLike): Observable<number> {\n  let period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler as any;\n  }\n\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n\n  return new Observable(subscriber => {\n    const due = isNumeric(dueTime)\n      ? (dueTime as number)\n      : (+dueTime - scheduler.now());\n\n    return scheduler.schedule(dispatch, due, {\n      index: 0, period, subscriber\n    });\n  });\n}\n\ninterface TimerState {\n  index: number;\n  period: number;\n  subscriber: Subscriber<number>;\n}\n\nfunction dispatch(this: SchedulerAction<TimerState>, state: TimerState) {\n  const { index, period, subscriber } = state;\n  subscriber.next(index);\n\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n\n  state.index = index + 1;\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { buffer } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends SimpleOuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next!(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { debounceTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      const { lastValue } = this;\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively when scheduled with things like\n      // VirtualScheduler/TestScheduler.\n      this.lastValue = null;\n      this.hasValue = false;\n      this.destination.next(lastValue);\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.png)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n * Delay each click by one second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: SchedulerLike;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: SchedulerAction<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: SchedulerLike): void {\n    this.active = true;\n    const destination = this.destination as Subscription;\n    destination.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T, O extends ObservableInput<any>>(subject: Subject<T>, selector: (shared: Observable<T>) => O): UnaryFunction<Observable<T>, ConnectableObservable<ObservedValueOf<O>>>;\nexport function multicast<T>(subjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T, O extends ObservableInput<any>>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * ![](multicast.png)\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T, O extends ObservableInput<any>>(selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <span class=\"informal\">Makes a cold Observable hot</span>\n *\n * ![](publish.png)\n *\n * ## Examples\n * Make source$ hot by applying publish operator, then merge each inner observable into a single one\n * and subscribe.\n * ```ts\n * import { of, zip, interval, merge } from \"rxjs\";\n * import { map, publish, tap } from \"rxjs/operators\";\n *\n * const source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9)).pipe(\n *   map(values => values[1])\n * );\n *\n * source$\n *   .pipe(\n *     publish(multicasted$ =>\n *       merge(\n *         multicasted$.pipe(tap(x => console.log('Stream 1:', x))),\n *         multicasted$.pipe(tap(x => console.log('Stream 2:', x))),\n *         multicasted$.pipe(tap(x => console.log('Stream 3:', x))),\n *       )\n *     )\n *   )\n *   .subscribe();\n *\n * // Results every two seconds\n * // Stream 1: 1\n * // Stream 2: 1\n * // Stream 3: 1\n * // ...\n * // Stream 1: 9\n * // Stream 2: 9\n * // Stream 3: 9\n * ```\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n *\n *\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n * Generate new Observable according to source Observable values\n * ```typescript\n * import { of } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const switched = of(1, 2, 3).pipe(switchMap((x: number) => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // ... and so on\n * ```\n *\n * Rerun an interval Observable on every click event\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap((ev) => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    return (source: Observable<T>) => source.pipe(\n      switchMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii))\n      ))\n    );\n  }\n  return (source: Observable<T>) => source.lift(new SwitchMapOperator(project));\n}\n\nclass SwitchMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private index = 0;\n  private innerSubscription?: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error!(error);\n      return;\n    }\n    this._innerSub(result);\n  }\n\n  private _innerSub(result: ObservableInput<R>) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    this.innerSubscription = innerSubscribe(result, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (this.innerSubscription !== innerSubscriber) {\n      destination.add(this.innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n    this.unsubscribe();\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = undefined;\n  }\n\n  notifyComplete(): void {\n    this.innerSubscription = undefined;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(innerValue: R): void {\n      this.destination.next!(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n * Tick every second until the first click happens\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { takeUntil } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  seenValue = false;\n\n  constructor(destination: Subscriber<any>, ) {\n    super(destination);\n  }\n\n  notifyNext(): void {\n    this.seenValue = true;\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, TeardownLogic } from '../types';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Use an observer instead of a complete callback */\nexport function tap<T>(next: null | undefined, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Use an observer instead of an error callback */\nexport function tap<T>(next: null | undefined, error: (error: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Use an observer instead of a complete callback */\nexport function tap<T>(next: (value: T) => void, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * ![](do.png)\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `tap` is not subscribed, the side effects specified by the\n * Observer will never happen. `tap` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * ## Example\n * Map every click to the clientX position of that click, while also logging the click event\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { tap, map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(\n *   tap(ev => console.log(ev)),\n *   map(ev => ev.clientX),\n * );\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n * @see {@link Observable#subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nclass TapSubscriber<T> extends Subscriber<T> {\n  private _context: any;\n\n  private _tapNext: ((value: T) => void) = noop;\n\n  private _tapError: ((err: any) => void) = noop;\n\n  private _tapComplete: (() => void) = noop;\n\n  constructor(destination: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n      super(destination);\n      this._tapError = error || noop;\n      this._tapComplete = complete || noop;\n      if (isFunction(observerOrNext)) {\n        this._context = this;\n        this._tapNext = observerOrNext;\n      } else if (observerOrNext) {\n        this._context = observerOrNext;\n        this._tapNext = observerOrNext.next || noop;\n        this._tapError = observerOrNext.error || noop;\n        this._tapComplete = observerOrNext.complete || noop;\n      }\n    }\n\n  _next(value: T) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(value);\n  }\n\n  _error(err: any) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.error(err);\n  }\n\n  _complete() {\n    try {\n      this._tapComplete.call(this._context, );\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    return this.destination.complete();\n  }\n}\n","import { getTouchPoint } from \"./Helpers/utils\";\nimport {ConnectableObservable, fromEvent, merge, Observable, timer} from \"rxjs\";\n\nimport {\n    buffer,\n    debounceTime,\n    delay,\n    filter,\n    map, mergeMap,\n    publish,\n    switchMap,\n    takeUntil,\n    tap,\n} from \"rxjs/operators\";\n\nimport { Picker } from \"./Picker/Picker\";\nimport { IIntersection } from \"./Picker/IIntersection\";\nimport { MouseButton } from \"./common\";\nimport { Vector2 } from \"three\";\nimport { Model } from \"./Model\";\nimport {Cursor3D} from \"./Picker/Cursor3D\";\n\nexport interface Input {\n    // use for pick position\n    x: number;\n    y: number;\n\n    // use for delta calculation\n    screenX: number;\n    screenY: number;\n\n    originalEvent: WheelEvent | MouseEvent | TouchEvent | GestureEvent;\n    intersection?: IIntersection;\n}\n\nexport interface PointerInput extends Input {\n    mouseButton?: MouseButton;\n    anyMouseButtonDown?: boolean;\n    touchCount?: number;\n    isTouch: boolean;\n}\n\nexport interface ScrollEvent extends Input {\n    speed: number;\n}\n\n// Mac's Safari custom event https://developer.apple.com/documentation/webkitjs/gestureevent\ninterface GestureEvent extends UIEvent {\n    scale: number;\n    clientX: number;\n    clientY: number;\n}\n\nexport interface PointerObservableOptions {\n    touchCount?: number;\n    button?: MouseButton;\n}\n\nconst TAP_TIME = 150;\nconst DOUBLE_TAP_TIME = 250;\nconst LONG_TAP_TIME = 1000;\nconst TAP_DIST = 12;\n\nexport class InputHandler {\n    private _cursor: string;\n\n    public pointerDown$: ConnectableObservable<PointerInput>;\n    private _pointerDownObserver: Observable<any>;\n\n    public pointerMove$: ConnectableObservable<PointerInput>;\n    private _moveObserver: ConnectableObservable<PointerInput>;\n\n    public pointerUp$: ConnectableObservable<PointerInput>;\n    private _pointerUpObserver: Observable<any>;\n\n    public wheel$: ConnectableObservable<ScrollEvent>;\n    public gesture$: ConnectableObservable<ScrollEvent>;\n    public zoom$: Observable<ScrollEvent>;\n    public contextMenu$: Observable<any>;\n\n    public keyDown$: ConnectableObservable<KeyboardEvent>;\n\n    public keyUp$: ConnectableObservable<KeyboardEvent>;\n\n    constructor(\n        public picker: Picker,\n        public container: HTMLElement,\n    ) {\n        const eventOptions = {\n            passive: false\n        };\n\n        let lastTouchTime: number;\n        const notDuplicate = (e: Event) => {\n            // OculusBrowser generates both mouse and touch events, filter duplicates\n            const now = performance.now();\n            if (typeof TouchEvent !== \"undefined\" && e instanceof TouchEvent)\n                lastTouchTime = now;\n            if (typeof MouseEvent !== \"undefined\" && e instanceof MouseEvent)\n                return lastTouchTime === undefined || now - lastTouchTime > 1000;\n            return true;\n        };\n\n        this._pointerDownObserver = merge(\n            fromEvent(container, \"mousedown\", eventOptions),\n            fromEvent(container, \"touchstart\", eventOptions)\n        ).pipe(\n            filter(notDuplicate),\n            tap((e: Event) => {\n                if (e.cancelable)\n                    e.preventDefault();\n            }),\n            map((event: any) => this.convertEventToPointerInput(event))\n        );\n\n        this._moveObserver = merge(\n            fromEvent(window, \"mousemove\", eventOptions), // listen on window to allow drag mouse out of canvas\n            fromEvent(container, \"touchmove\", eventOptions)\n        ).pipe(\n            filter(notDuplicate),\n            map((event: any) => this.convertEventToPointerInput(event)),\n            publish()\n        ) as ConnectableObservable<PointerInput>;\n        this._moveObserver.connect();\n\n        this._pointerUpObserver = merge(\n            fromEvent(container, \"mouseup\", eventOptions),\n            fromEvent(container, \"touchend\", eventOptions)\n        ).pipe(\n            filter(notDuplicate),\n            map((event: any) => this.convertEventToPointerInput(event))\n        );\n\n        this.pointerDown$ = this._pointerDownObserver.pipe(\n            publish()\n        ) as ConnectableObservable<PointerInput>;\n        this.pointerDown$.connect();\n\n        this.pointerMove$ = this._moveObserver.pipe(publish()) as ConnectableObservable<PointerInput>;\n        this.pointerMove$.connect();\n\n        this.pointerUp$ = this._pointerUpObserver.pipe(\n            publish()\n        ) as ConnectableObservable<PointerInput>;\n        this.pointerUp$.connect();\n\n        this.wheel$ = fromEvent(container, \"wheel\", eventOptions).pipe(\n            map(e => this.fromWheelToScrollEvent(e as WheelEvent)),\n            publish()\n        ) as ConnectableObservable<ScrollEvent>;\n        this.wheel$.connect();\n\n        this.gesture$ = merge(\n            fromEvent(container, \"gesturestart\", eventOptions),\n            fromEvent(container, \"gesturechange\", eventOptions),\n            fromEvent(container, \"gestureend\", eventOptions)\n        ).pipe(\n            map(e => this.fromGestureToScrollEvent(e as GestureEvent)),\n            publish()\n        ) as ConnectableObservable<ScrollEvent>;\n        this.gesture$.connect();\n\n        // Use GestureEvent for macOS safari, ignore for iOS (TouchEvent will be used instead)\n        this.zoom$ = \"TouchEvent\" in window ? this.wheel$ : merge(this.wheel$, this.gesture$);\n\n        const isValidKeyEvent = (event: Event) => {\n            const e = event as KeyboardEvent;\n            const elementFromPath = e.composedPath()[0] as HTMLElement;\n            return !e.repeat &&\n                (!elementFromPath || !elementFromPath.tagName ||\n                elementFromPath.tagName.toLowerCase() !== \"text-element\" &&\n                elementFromPath.tagName.toLowerCase() !== \"input\" &&\n                elementFromPath.tagName.toLowerCase() !== \"textarea\");\n        }\n\n        this.keyDown$ = fromEvent(window, \"keydown\", eventOptions).pipe(\n            filter(isValidKeyEvent),\n            publish()\n        ) as ConnectableObservable<KeyboardEvent>;\n        this.keyDown$.connect();\n\n        this.keyUp$ = fromEvent(window, \"keyup\", eventOptions).pipe(\n            filter(isValidKeyEvent),\n            publish()\n        ) as ConnectableObservable<KeyboardEvent>;\n        this.keyUp$.connect();\n\n        this.contextMenu$ = fromEvent(container, \"contextmenu\", eventOptions);\n        this.contextMenu$.subscribe(event => {\n            event.preventDefault();\n        });\n    }\n\n    private clampScrollSpeed(speed: number): number {\n        // Windows mouse wheel gives discrete abs value 1 (very fast movements 2) - no values in between\n        // Windows track pad pinch gives same as mouse wheel\n        // Windows track pad scroll gives range 0.05 : 8 (but tends to be around 1)\n        // Mac mouse wheel gives range 0.04 : 7\n        // Mac track pad pinch gives range 0.01 : 1.1\n        // Mac track pad scroll gives 0.01 : 1.6\n\n        // Clamp abs value to normalize different devices mentioned above\n        speed = 0 === speed ? 0 : speed > 0 ? Math.max(speed, 0.3) : Math.min(speed, -0.3);\n        return Math.min(Math.max(speed, -2), 2);\n    }\n\n    private fromWheelToScrollEvent(event: WheelEvent): ScrollEvent {\n        event.preventDefault();\n\n        const delta = event.deltaY + event.deltaX;\n        const speed = event.ctrlKey ? delta / 25 : // Trackpad pinch gesture (Chrome)\n            event.deltaMode === WheelEvent.DOM_DELTA_PIXEL ? delta / 100 :\n                event.deltaMode === WheelEvent.DOM_DELTA_LINE ? delta / 3 :\n                    event.deltaMode === WheelEvent.DOM_DELTA_PAGE ? delta * 80 : 0;\n\n        return {\n            speed: this.clampScrollSpeed(speed),\n            x: event.x,\n            y: event.y,\n            screenX: event.screenX,\n            screenY: event.screenY,\n            originalEvent: event\n        };\n    }\n\n    // Mac safari trackpad pinch gesture event\n    private fromGestureToScrollEvent(event: GestureEvent): ScrollEvent {\n        event.preventDefault();\n\n        // Mac safari trackpad pinch gives values 0.05 : 4\n        const speed = 1 - event.scale;\n        return {\n            speed: speed,\n            x: event.clientX,\n            y: event.clientY,\n            screenX: event.clientX,\n            screenY: event.clientY,\n            originalEvent: event\n        };\n    }\n\n    set cursor(cursor: string) {\n        this._cursor = this._cursor || \"default\";\n\n        if (cursor === \"\") {\n            this.container.classList.remove(this._cursor);\n            this.container.classList.add(\"default\");\n            this._cursor = \"default\";\n        } else if (cursor !== this._cursor) {\n            this.container.classList.remove(this._cursor);\n            this.container.classList.add(cursor);\n            this._cursor = cursor;\n        }\n    }\n\n    get cursor(): string {\n        this._cursor = this._cursor || \"default\";\n        return this._cursor;\n    }\n\n    private convertEventToPointerInput(event: TouchEvent | MouseEvent): PointerInput {\n        const inputEvent: PointerInput = {\n            x: 0,\n            y: 0,\n            screenX: 0,\n            screenY: 0,\n            originalEvent: event,\n            isTouch: typeof TouchEvent !== \"undefined\" && event instanceof TouchEvent\n        };\n\n        if (typeof TouchEvent !== \"undefined\" && event instanceof TouchEvent) {\n            const point = getTouchPoint(event as TouchEvent);\n            inputEvent.x = point.x;\n            inputEvent.y = point.y;\n            inputEvent.screenX = point.x;\n            inputEvent.screenY = point.y;\n            inputEvent.touchCount = event.touches.length;\n        }\n        else if (typeof MouseEvent !== \"undefined\" && event instanceof MouseEvent) {\n            inputEvent.x = event.x;\n            inputEvent.y = event.y;\n            inputEvent.screenX = event.screenX;\n            inputEvent.screenY = event.screenY;\n            inputEvent.mouseButton = event.button;\n            inputEvent.anyMouseButtonDown = event.buttons !== 0;\n        }\n\n        return inputEvent;\n    }\n\n    createTapObservable(options: PointerObservableOptions): Observable<PointerInput> {\n        return this.pointerDown$.pipe(\n            filter(allowInput(options)),\n            switchMap(down =>\n                this.pointerUp$.pipe(\n                    filter(allowInput(options ? {button: options.button, touchCount: 0} : undefined)),\n                    takeUntil(this.pointerMove$.pipe(delay(TAP_TIME))),\n                    filter(up => getScreenDistance(down, up) < TAP_DIST),\n                    map(() => down)\n                )\n            )\n        );\n    }\n\n    createSnappedTapObservable(cursor: Cursor3D, options: PointerObservableOptions): Observable<PointerInput> {\n        return this.createTapObservable(options).pipe(\n            mergeMap(async e => {\n                // recalculate for touch because was not calculated on mouse move\n                if (e.isTouch) await cursor.calculateIntersection(e, true);\n                e.intersection = cursor.intersection;\n                return e;\n            }),\n            filter(hasIntersection)\n        );\n    };\n\n    createDoubleTapObservable(options: PointerObservableOptions): Observable<PointerInput> {\n        const taps = this.pointerDown$.pipe(\n            filter(allowInput(options))\n        );\n\n        return taps.pipe(\n            buffer(taps.pipe(debounceTime(DOUBLE_TAP_TIME))),\n            filter(events => events.length === 2),\n            map(events => events[0]),\n            filter(allowInput(options))\n        );\n    }\n\n    createDragObservable(options: PointerObservableOptions,\n                                         onDown: (e: PointerInput) => Promise<PointerInput>,\n                                         onMove: (e: PointerInput) => void,\n                                         onUp: (e: PointerInput) => void): Observable<PointerInput> {\n        let downTime: number;\n        return this.pointerDown$.pipe(\n            filter(e => allowPointerInput(e, options)),\n            mergeMap(async event => {\n                downTime = performance.now();\n                return await onDown(event);\n            }),\n            mergeMap(down =>\n                this.pointerMove$.pipe(\n                    takeUntil(controlsReleased(this, options)\n                        .pipe(tap(onUp))),\n                    filter(e => getScreenDistance(down, e) >= TAP_DIST || performance.now() - downTime > TAP_TIME),\n                    tap(onMove)\n                )\n            )\n        );\n    }\n\n    createLongTapObservable(options: PointerObservableOptions): Observable<PointerInput> {\n        return this.pointerDown$.pipe(\n            filter(e => allowPointerInput(e, options)),\n            switchMap(down =>\n                timer(LONG_TAP_TIME).pipe(\n                    takeUntil(merge(this.pointerUp$, this.pointerMove$)),\n                    map(() => down)\n                )\n            )\n        );\n    }\n}\n\nexport const allowInput = (options: PointerObservableOptions) => (e: PointerInput) =>\n    allowPointerInput(e, options);\n\nexport function allowPointerInput(e: PointerInput, options: PointerObservableOptions): boolean {\n    return !options || (e.mouseButton === options.button && !e.isTouch) || (e.touchCount === options.touchCount && e.isTouch);\n}\n\nexport const controlsReleased = (inputs: InputHandler, options: PointerObservableOptions) =>\n    merge(\n        inputs.pointerUp$.pipe(filter(e => e.mouseButton === options.button || (e.touchCount !== options.touchCount && e.isTouch))),\n        inputs.pointerMove$.pipe(filter(e => !e.isTouch && !e.anyMouseButtonDown || e.isTouch && e.touchCount !== options.touchCount))\n    );\n\nexport const hasIntersection = (e: PointerInput) => !!(e && e.intersection);\n\nexport const addIntersection = (picker: Picker, models?: Model[]) => async (e: PointerInput): Promise<PointerInput> => {\n    e.intersection = await picker.pick(new Vector2(e.x, e.y), models);\n    return e;\n};\n\nexport const addIntersectionForNavigation = (picker: Picker) => async (e: PointerInput): Promise<PointerInput> => {\n    e.intersection = await picker.pickForNavigation(new Vector2(e.x, e.y));\n    return e;\n};\n\nexport function getScreenDistance(ev1: PointerInput | Touch, ev2: PointerInput | Touch): number {\n    const e1 = ev1 as Touch & PointerInput;\n    const e2 = ev2 as Touch & PointerInput;\n    const x1 = e1.clientX || e1.x;\n    const y1 = e1.clientY || e1.y;\n    const x2 = e2.clientX || e2.x;\n    const y2 = e2.clientY || e2.y;\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import {ISelectionTool, MouseButton, SelectionMode} from \"../common\";\nimport {allowInput, controlsReleased, PointerInput} from \"../InputHandler\";\nimport {filter, switchMap, takeUntil, tap} from \"rxjs/operators\";\nimport {Vector2} from \"three\";\nimport {Observable, Subscription} from \"rxjs\";\nimport {IIntersection} from \"../Picker/IIntersection\";\nimport {SinglePointerTool} from \"./SinglePointerTool\";\nimport {Model, SelectableModel} from \"../Model\";\nimport {Api} from \"../Api\";\nimport {Key} from \"ts-key-enum\";\n\nexport class AreaSelectionTool extends SinglePointerTool implements ISelectionTool {\n    static get Name(): string { return \"areaSelection\" };\n\n    private _selectionRectangle: HTMLDivElement;\n    private readonly _startPoint: Vector2;\n    private readonly _pointBottomRight: Vector2;\n    private _pointTopLeft: Vector2;\n    private _dragObservable: Observable<PointerInput>;\n    private _cancelObservable: Observable<KeyboardEvent>;\n    private _dragHandle: Subscription;\n    private _cancelHandle: Subscription;\n\n    mode: SelectionMode = SelectionMode.Replace;\n    onFinished: () => void;\n    onChange: (modelId: string, ids: number[]) => Promise<number[]>;\n\n    get name(): string {\n        return AreaSelectionTool.Name;\n    }\n\n    constructor(private _api: Api) {\n        super();\n        this.touchCount = 1;\n        this.mouseButton = MouseButton.left;\n\n        this._dragObservable = this._api.inputHandler.pointerDown$.pipe(\n            filter(allowInput(this.observableOptions)),\n            tap(event => this._downCallback(event)),\n            switchMap(() =>\n                this._api.inputHandler.pointerMove$.pipe(takeUntil(controlsReleased(this._api.inputHandler, this.observableOptions)))\n            ),\n            tap(event => this._moveCallback(event)),\n            switchMap(() => this._api.inputHandler.pointerUp$),\n            tap(event => this._upCallback(event))\n        );\n\n        this._cancelObservable = this._api.inputHandler.keyDown$.pipe(\n            filter(e => e.code === Key.Escape),\n            tap(() => this._cancel())\n        );\n\n        this._createSelectionRectangle();\n        this._startPoint = new Vector2();\n        this._pointBottomRight = new Vector2();\n        this._pointTopLeft = new Vector2();\n    }\n\n    startAreaSelection(downEvent: PointerInput): void {\n        this._downCallback(downEvent);\n        if (this._dragHandle) this._dragHandle.unsubscribe();\n        this._dragHandle = this._api.inputHandler.pointerMove$.pipe(\n            tap(event => this._moveCallback(event)),\n            switchMap(() => this._api.inputHandler.pointerUp$),\n            tap(event => this._upCallback(event))\n        ).subscribe();\n    }\n\n    private _cancel(): void {\n        this.enabled = false;\n        this._removeSelectionRectangle();\n        this.onFinished();\n    }\n\n    private _createSelectionRectangle(): void {\n        this._selectionRectangle = document.createElement(\"div\");\n        this._selectionRectangle.style.pointerEvents = \"none\";\n        this._selectionRectangle.style.zIndex = \"9999\";\n        this._selectionRectangle.style.opacity = \"0.2\";\n        this._selectionRectangle.style.position = \"fixed\";\n    }\n\n    private _downCallback(event: PointerInput): void {\n        this._startPoint.set(event.x, event.y);\n        this._pointTopLeft.set(event.x, event.y);\n        this._pointBottomRight.set(event.x, event.y);\n        this._addSelectionRectangle(event);\n        this._api.eventDispatcher.dragStart(this);\n    }\n\n    private _addSelectionRectangle(event: PointerInput): void {\n        this._selectionRectangle.style.left = event.x + \"px\";\n        this._selectionRectangle.style.top = event.y + \"px\";\n        this._selectionRectangle.style.width = \"0px\";\n        this._selectionRectangle.style.height = \"0px\";\n        this._selectionRectangle.style.border = \"1px solid #\" + this._api.settingsDispatcher.settings.color.getHexString();\n        this._api.inputHandler.container.appendChild(this._selectionRectangle);\n    }\n\n    private _moveCallback(event: PointerInput): void {\n        this._pointBottomRight.x = Math.max(this._startPoint.x, event.x);\n        this._pointBottomRight.y = Math.max(this._startPoint.y, event.y);\n        this._pointTopLeft.x = Math.min(this._startPoint.x, event.x);\n        this._pointTopLeft.y = Math.min(this._startPoint.y, event.y);\n        this._updateSelectionRectangle();\n    }\n\n    private isContainedOnly(): boolean {\n        return this._startPoint.x < this._pointBottomRight.x;\n    }\n\n    private _updateSelectionRectangle(): void {\n        this._selectionRectangle.style.left = this._pointTopLeft.x + \"px\";\n        this._selectionRectangle.style.top = this._pointTopLeft.y + \"px\";\n        this._selectionRectangle.style.width = this._pointBottomRight.x - this._pointTopLeft.x + \"px\";\n        this._selectionRectangle.style.height = this._pointBottomRight.y - this._pointTopLeft.y + \"px\";\n        this._selectionRectangle.style.border = this.isContainedOnly() ?\n            \"2px solid #\" + this._api.settingsDispatcher.settings.color.getHexString() :\n            \"2px dashed #\" + this._api.settingsDispatcher.settings.color.getHexString();\n    }\n\n    private async _upCallback(event: PointerInput): Promise<void> {\n        const intersections = await this._api.inputHandler.picker.getIntersectionFromScreenRect(this._pointTopLeft, this._pointBottomRight, this.isContainedOnly());\n        this._selectFromEvent(event, intersections);\n        this._cancel();\n        this._api.eventDispatcher.dragEnd(this);\n    }\n\n    private _removeSelectionRectangle(): void {\n        if (this._api.inputHandler.container.contains(this._selectionRectangle)) {\n            this._api.inputHandler.container.removeChild(this._selectionRectangle);\n        }\n    }\n\n    set enabled(enabled: boolean) {\n        if (this._dragHandle) {\n            this._dragHandle.unsubscribe();\n            this._dragHandle = null;\n            this._cancelHandle.unsubscribe();\n        }\n        if (!enabled) return;\n\n        this._dragHandle = this._dragObservable.subscribe();\n        this._cancelHandle = this._cancelObservable.subscribe();\n    }\n\n    get enabled(): boolean {\n        return !!this._dragHandle;\n    }\n\n    private _selectFromEvent(event: PointerInput, intersections: IIntersection[]): void {\n        const e = event.originalEvent as MouseEvent;\n        const mode = e.shiftKey || e.ctrlKey || e.metaKey ? SelectionMode.Add :\n            e.altKey ? SelectionMode.Subtract : this.mode;\n\n        this._api.selection.change(() => {\n            if (mode === SelectionMode.Replace) {\n                this._api.selection.clear();\n                if (this.onChange) this.onChange(undefined, undefined);\n            }\n\n            for (const intersection of intersections) {\n                const object = intersection.model as Model & SelectableModel;\n                if (object && object.isSelectable)\n                    this.applySelection(object, intersection.childrenIds, mode);\n            }\n        }, this);\n    }\n\n    protected async applySelection(model: Model & SelectableModel, ids: number[], mode: SelectionMode): Promise<void> {\n        if (this.onChange) ids = await this.onChange(model.name, ids);\n\n        if (mode === SelectionMode.Subtract) this._api.selection.subtract(model.name, ids, this);\n        else this._api.selection.add(model.name, ids, this);\n    }\n}\n","import {addIntersection, InputHandler, PointerInput} from \"../InputHandler\";\nimport {ISelectionTool, MouseButton, SelectionMode, Settings} from \"../common\";\nimport {Selection} from \"../Selection\";\nimport {Observable, Subscription} from \"rxjs\";\nimport {mergeMap} from \"rxjs/operators\";\nimport {SinglePointerTool} from \"./SinglePointerTool\";\nimport {IIntersection} from \"../Picker/IIntersection\";\nimport {HoverableModel, Model, SelectableModel} from \"../Model\";\nimport {Key} from \"ts-key-enum\";\nimport {Api} from \"../Api\";\nimport {AreaSelectionTool} from \"./AreaSelectionTool\";\nimport {SettingsDispatcher} from \"../SettingsDispatcher\";\n\nexport class SelectionTool extends SinglePointerTool implements ISelectionTool {\n    static get Name(): string { return \"selection\" };\n\n    get name(): string {\n        return SelectionTool.Name;\n    }\n\n    mode: SelectionMode = SelectionMode.Replace;\n    onChange: (modelId: string, ids: number[]) => Promise<number[]>;\n\n    private _moveSubscription: Subscription;\n    private _tapsSubscription: Subscription;\n    private _tapsObservable: Observable<PointerInput>;\n    private _longClickSubscription: Subscription;\n    private _longTapObservable: Observable<PointerInput>;\n    private lastHoverIntersection: IIntersection;\n    private _inputs: InputHandler;\n    private _selection: Selection;\n    private _settingsDispatcher: SettingsDispatcher<Settings>;\n\n    constructor(private _api: Api) {\n        super();\n        this._inputs = _api.inputHandler;\n        this._selection = _api.selection;\n        this._settingsDispatcher = _api.settingsDispatcher;\n        this.mouseButton = MouseButton.left;\n\n        this._tapsObservable = this._inputs.createTapObservable({button: this.mouseButton, touchCount: 1})\n            .pipe(mergeMap(addIntersection(this._inputs.picker)))\n\n            this._settingsDispatcher.subscribe(\"hoverHighlightEnabled\", () => {\n            if (this.enabled) {\n                // will initialize hover highlight\n                this.enabled = false;\n                this.enabled = true;\n            }\n        });\n\n        this._longTapObservable = this._inputs.createLongTapObservable({button: 0, touchCount: 1});\n\n        this._inputs.keyDown$.subscribe((e) => {\n            if (e.code === Key.Escape && this.enabled) this._selection.clear(this);\n        });\n    }\n\n    private _startAreaSelection(event: PointerInput): void {\n        this._api.toolManager.activeTool = \"areaSelection\";\n        const areaSelectionTool = this._api.toolManager.tools.get(AreaSelectionTool);\n        areaSelectionTool.startAreaSelection(event);\n    }\n\n    private _onSelectionTap(event: PointerInput): void {\n        const intersection = event.intersection;\n        const e = event.originalEvent as MouseEvent;\n        const mode = e.shiftKey || e.ctrlKey || e.metaKey ? SelectionMode.AddSubtract : e.altKey ? SelectionMode.Subtract : this.mode;\n\n        if (!intersection || !intersection.object) {\n            if (mode === SelectionMode.Replace) {\n                this._selection.clear();\n                if (this.onChange) this.onChange(undefined, undefined);\n            }\n            return;\n        }\n\n        const model = intersection.model as Model & SelectableModel;\n        // Non-selectable model was clicked\n        if (!model || !model.isSelectable)\n            return;\n\n        this.applySelection(model, intersection, mode);\n    };\n\n    protected async applySelection(model: Model & SelectableModel, intersection: IIntersection, mode: SelectionMode): Promise<void> {\n        let ids = intersection.childrenIds || [intersection.id];\n        if (this.onChange) ids = await this.onChange(model.name, ids);\n\n        const modelSelection = this._selection.get(model.modelId);\n        const selectionHit = modelSelection && modelSelection.find(id => ids.includes(id)) !== undefined;\n\n        mode = mode === SelectionMode.AddSubtract ? (selectionHit ? SelectionMode.Subtract : SelectionMode.Add) : mode;\n\n        // If user clicked previously selected object with shift, subtract selection\n        if (mode === SelectionMode.Subtract)\n            this._selection.subtract(model.name, ids, this);\n        else if (mode === SelectionMode.Add) this._selection.add(model.name, ids, this);\n        else this._selection.setOnly(model.name, ids, this);\n    }\n\n    private clearHover(): void {\n        if (!this.lastHoverIntersection) return;\n\n        (this.lastHoverIntersection.model as Model & HoverableModel).setHoveredFromEvent(undefined);\n        this.lastHoverIntersection = null;\n    }\n\n    private async _onHover(event: PointerInput): Promise<void> {\n        if (event.anyMouseButtonDown || event.touchCount > 0) {\n            this.clearHover();\n            return;\n        }\n\n        const intersection = event.intersection;\n        if (!intersection || !intersection.model) {\n            this.clearHover();\n            return;\n        }\n\n        if (this.onChange) intersection.id = (await this.onChange(intersection.model.modelId, [intersection.id]))[0];\n\n        if (this.lastHoverIntersection &&\n            this.lastHoverIntersection.model === intersection.model &&\n            this.lastHoverIntersection.id === intersection.id) return;\n\n        const model = intersection.model as Model & HoverableModel;\n        if (model.setHoveredFromEvent) {\n            model.setHoveredFromEvent(event);\n            this.lastHoverIntersection = intersection;\n        }\n    }\n\n    set enabled(enabled: boolean) {\n        if (this._tapsSubscription) {\n            this._tapsSubscription.unsubscribe();\n            this._tapsSubscription = null;\n        }\n        if (this._moveSubscription) {\n            this._moveSubscription.unsubscribe();\n            this._moveSubscription = null;\n        }\n        if (this._longClickSubscription) {\n            this._longClickSubscription.unsubscribe();\n            this._longClickSubscription = null;\n        }\n        if (!enabled) return;\n\n        if (this._settingsDispatcher.settings.hoverHighlightEnabled)\n            this._moveSubscription = this._inputs.pointerMove$.pipe(mergeMap(addIntersection(this._inputs.picker))).subscribe(e => this._onHover(e));\n        this._tapsSubscription = this._tapsObservable.subscribe(e => this._onSelectionTap(e));\n\n        this._longClickSubscription = this._longTapObservable.subscribe(event => { this._startAreaSelection(event); });\n    }\n\n    get enabled(): boolean {\n        return !!this._tapsSubscription;\n    }\n}\n","import { SinglePointerTool } from \"./SinglePointerTool\";\nimport {InputHandler, PointerInput, addIntersection} from \"../InputHandler\";\nimport { Subscription, Observable } from \"rxjs\";\nimport { Cursor3D } from \"../Picker/Cursor3D\";\nimport { mergeMap } from \"rxjs/operators\";\nimport { Vector2 } from \"three\";\nimport { EventDispatcher } from \"../EventDispatcher\";\nimport { IIntersection } from \"../Picker/IIntersection\";\nimport {PickEventDetail, SnappingTool, SnapType} from \"../common\";\n\nexport class PickingTool extends SinglePointerTool implements SnappingTool {\n    static get Name(): string { return \"picking\" };\n\n    private _snapTypes: SnapType[];\n    private _tapsSubscription: Subscription;\n    private _tapsObservable: Observable<PointerInput>;\n    private _isCursor3DSubscribed: boolean;\n\n    get name(): string {\n        return PickingTool.Name;\n    }\n\n    get allowedSnapTypes(): SnapType[] {\n        return [SnapType.POINT, SnapType.LINE, SnapType.FACE];\n    }\n\n    set snapTypes(snapTypes: SnapType[]) {\n        this._snapTypes = snapTypes;\n        if (this._isCursor3DSubscribed) {\n            this._cursor3D.unsubscribe();\n            this._isCursor3DSubscribed = false;\n        }\n        if (!this._snapTypes || this._snapTypes.length === 0) return;\n        this._cursor3D.snapTypes = this._snapTypes;\n        this._cursor3D.subscribe();\n        this._isCursor3DSubscribed = true;\n    }\n\n    get snapTypes(): SnapType[] {\n        return this._snapTypes;\n    }\n\n    get enabled(): boolean {\n        return !!this._tapsSubscription;\n    }\n\n    set enabled(enabled: boolean) {\n        if (this._tapsSubscription) {\n            this._tapsSubscription.unsubscribe();\n            this._tapsSubscription = null;\n        }\n        if (this._isCursor3DSubscribed) {\n            this._cursor3D.unsubscribe();\n            this._isCursor3DSubscribed = false;\n        }\n        if (!enabled) return;\n        this._tapsSubscription = this._tapsObservable.subscribe(event => {\n            this._onPickTap(event);\n        });\n    }\n\n    constructor(private _inputs: InputHandler, private _cursor3D: Cursor3D, private _eventDispatcher: EventDispatcher) {\n        super();\n        this._tapsObservable = this._inputs.createTapObservable(undefined).pipe(\n            mergeMap((!this._snapTypes || this._snapTypes.length === 0) ? addIntersection(_inputs.picker) : addCursor3DIntersection(this._cursor3D.intersection))\n        );\n    }\n\n    private _onPickTap(event: PointerInput): void {\n        const detail: PickEventDetail = {\n            screenPosition: new Vector2(event.x, event.y),\n            worldPosition: event.intersection ? event.intersection.point : null,\n            mouseButton: event.mouseButton,\n            touchCount: event.touchCount\n        };\n\n        if (event.intersection && event.intersection.model) {\n            detail.modelId = event.intersection.model.name;\n            detail.id = event.intersection.id;\n            detail.childrenIds = event.intersection.childrenIds;\n            detail.face = event.intersection.face;\n            detail.normal = event.intersection.normal;\n        }\n\n        this._eventDispatcher.picked(detail);\n    }\n}\n\nconst addCursor3DIntersection = (intersection: IIntersection) => async (e: PointerInput): Promise<PointerInput> => {\n    e.intersection = intersection;\n    return e;\n};\n"],"names":["SinglePointerTool","[object Object]","this","button","touchCount","mouseButton","observableOptions","v","Caster","Raycaster","super","calculateSphericalYAngle","up","x","y","Math","PI","angle","atan2","abs","getTouchPoint","event","point","touches","length","changedTouches","touch","clientX","clientY","lengthUnits","mm","inMillimeters","symbol","cm","m","km","ft","in","yd","mi","custom","formatLength","millimeters","unit","decimals","value","p","pow","round","roundToDecimals","vec3","Vector3","makeScreenStaticSize","object","api","adjustScale","mesh","renderOrder","traverse","o","Mesh","onBeforeRender","scale","camera","getProjectionCompensatingScale","getWorldPosition","distanceTo","position","set","updateMatrixWorld","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","hasOwnProperty","__extends","__","constructor","prototype","create","config","Promise","closed","next","UnsubscriptionErrorImpl","Error","errors","name","Subscription","unsubscribe","_ctorUnsubscribe","_a","_parentOrParents","isFunction","isArray","index","sub","isObject","e","add","subscription","indexOf","subscriptions","subscriptionIndex","empty","rxSubscriber","Subscriber","_super","_this","destination","destinationOrNext","syncErrorThrowable","tslib_1.__extends","error","subscriber","isStopped","_next","_error","_complete","SafeSubscriber","context","observerOrNext","complete","_context","_parentSubscriber","useDeprecatedSynchronousErrorHandling","__tryOrSetError","__tryOrUnsub","syncErrorValue","wrappedComplete","parent","syncErrorThrown","hostReportError","fns","input","Observable","subscribe","lift","operator","observable","source","sink","nextOrObserver","_subscribe","closed_1","canReportError","forEach","promiseCtor","reject","operations","toPromise","getPromiseCtor","ObjectUnsubscribedErrorImpl","message","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","len","i","hasError","thrownError","asObservable","AnonymousSubject","RefCountOperator","connectable","refCounter","RefCountSubscriber","refCount","_refCount","connection","sharedConnection","ConnectableObservable","getSubject","writable","_subject","_connection","_isComplete","connect","ConnectableSubscriber","AsyncAction","scheduler","work","delay","id","recycleAsyncId","clearInterval","_execute","errored","actions","SchedulerAction","now","schedule","AsyncScheduler","state","isScheduler","array","args","Notification","observe","project","MapOperator","MapSubscriber","thisArg","count","result","Symbol","iterator","obj","err","iterable","item","isInteropObservable","Symbol_iterator","done","SimpleInnerSubscriber","SimpleOuterSubscriber","notifyError","notifyComplete","innerSubscriber","concurrent","Number","MergeMapSubscriber","innerSubscription","hasCompleted","buffer","target","resultSelector","arguments","isEventTarget","sourceObj","last","observables","FilterOperator","FilterSubscriber","BufferOperator","closingNotifier","BufferSubscriber","DebounceTimeOperator","clearDebounce","DebounceTimeSubscriber","hasValue","lastValue","debouncedSubscription","DelayOperator","DelaySubscriber","queue","notification","DelayMessage","scheduleNotification","subjectFactory","selector","MulticastOperator","multicast","SwitchMapOperator","call","SwitchMapSubscriber","TakeUntilOperator","takeUntilSubscriber","notifierSubscription","seenValue","TakeUntilSubscriber","DoOperator","TapSubscriber","noop","_tapComplete","_tapError","_tapNext","allowInput","options","allowPointerInput","isTouch","controlsReleased","inputs","merge","pointerUp$","pipe","filter","pointerMove$","anyMouseButtonDown","hasIntersection","intersection","addIntersection","picker","models","async","pick","Vector2","getScreenDistance","ev1","ev2","e1","e2","x1","y1","x2","y2","sqrt","AreaSelectionTool","_api","_dragObservable","inputHandler","pointerDown$","tap","_downCallback","switchMap","takeUntil","_moveCallback","_upCallback","_cancelObservable","keyDown$","code","_cancel","_createSelectionRectangle","_startPoint","_pointBottomRight","_pointTopLeft","Name","downEvent","_dragHandle","enabled","_removeSelectionRectangle","onFinished","_selectionRectangle","document","createElement","style","pointerEvents","zIndex","opacity","_addSelectionRectangle","eventDispatcher","dragStart","left","top","width","height","border","settingsDispatcher","settings","color","getHexString","container","appendChild","max","min","_updateSelectionRectangle","isContainedOnly","intersections","getIntersectionFromScreenRect","_selectFromEvent","dragEnd","contains","removeChild","_cancelHandle","originalEvent","mode","shiftKey","ctrlKey","metaKey","altKey","selection","change","clear","onChange","undefined","model","isSelectable","applySelection","childrenIds","ids","subtract","SelectionTool","_inputs","_selection","_settingsDispatcher","_tapsObservable","createTapObservable","mergeMap","_longTapObservable","createLongTapObservable","toolManager","activeTool","tools","get","startAreaSelection","modelSelection","modelId","selectionHit","find","includes","setOnly","lastHoverIntersection","setHoveredFromEvent","clearHover","_tapsSubscription","_moveSubscription","_longClickSubscription","hoverHighlightEnabled","_onHover","_onSelectionTap","_startAreaSelection","PickingTool","_cursor3D","_eventDispatcher","_snapTypes","addCursor3DIntersection","allowedSnapTypes","snapTypes","_isCursor3DSubscribed","_onPickTap","detail","screenPosition","worldPosition","face","normal","picked","direction","z","acos","eventOptions","passive","lastTouchTime","notDuplicate","performance","TouchEvent","MouseEvent","_pointerDownObserver","fromEvent","cancelable","preventDefault","map","convertEventToPointerInput","_moveObserver","window","publish","_pointerUpObserver","wheel$","fromWheelToScrollEvent","gesture$","fromGestureToScrollEvent","zoom$","isValidKeyEvent","elementFromPath","composedPath","repeat","tagName","toLowerCase","keyUp$","contextMenu$","speed","delta","deltaY","deltaX","deltaMode","WheelEvent","DOM_DELTA_PIXEL","DOM_DELTA_LINE","DOM_DELTA_PAGE","clampScrollSpeed","screenX","screenY","cursor","_cursor","classList","remove","inputEvent","buttons","down","calculateIntersection","taps","debounceTime","events","onDown","onMove","onUp","downTime","dueTime","period","periodOrScheduler","timer","sphericalCoordinates","vec","sin","cos","normalize","pickForNavigation","line0","line1","originDiff","subVectors","origin","a01","dot","b0","determinant","line0Parameter","copy","multiplyScalar","from","to","size","geometry","ConeGeometry","applyMatrix4","Matrix4","makeRotationFromEuler","Euler","setPosition","attributeName","itemSize","arrayType","attribute","getIndex","getAttribute","updateRange","needsUpdate","BufferAttribute","setIndex","setAttribute","material","marker","lengthUnit","distance","box","Infinity","corners","push","file","resolve","reader","FileReader","onload","onerror","console","readAsArrayBuffer","vector","raycaster","innerWidth","innerHeight","unproject","dir","caster","lengthFormatter","ray","clone","blob","createImageBitmap","img","Image","src","URL","createObjectURL","imageOrientation"],"mappings":"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"}