{"version":3,"file":"index.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../node_modules/rxjs/src/internal/config.ts","../../../../node_modules/rxjs/src/internal/Observer.ts","../../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../../node_modules/rxjs/src/internal/Subscription.ts","../../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../../node_modules/rxjs/src/internal/Observable.ts","../../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../../node_modules/rxjs/src/internal/util/canReportError.ts","../../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../../node_modules/rxjs/src/internal/Subject.ts","../../../../node_modules/rxjs/src/internal/BehaviorSubject.ts","../../../webgl-viewer/src/Helpers/common-utils.ts","../../../webgl-viewer/src/Model.ts","../../src/PointIconClusterer.ts","../../../webgl-viewer/src/Helpers/utils.ts","../../../webgl-viewer/src/CustomObjects/RaycastablePoints.ts","../../../webgl-viewer/src/Rendering/DepthPeelingMaterial.ts","../../../webgl-viewer/src/Rendering/WVMaterial.ts","../../../webgl-viewer/src/Rendering/WVPointsMaterial.ts","../../src/PointIconBatch.ts","../../src/PointIconModel.ts","../../../../node_modules/three/examples/jsm/postprocessing/Pass.js","../../../../node_modules/three/examples/jsm/postprocessing/RenderPass.js","../../../webgl-viewer/src/WebglViewerPlugin.ts","../../../webgl-viewer/src/Version.ts","../../src/IconsPlugin.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nconst UnsubscriptionErrorImpl = (() => {\n  function UnsubscriptionErrorImpl(this: any, errors: any[]) {\n    Error.call(this);\n    this.message = errors ?\n      `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n  }\n\n  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n  return UnsubscriptionErrorImpl;\n})();\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (this as any)._ctorUnsubscribe = true;\n      (this as any)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      // It's only possible to null _unsubscribe - to release the reference to\n      // any teardown function passed in the constructor - if the property was\n      // actually assigned in the constructor, as there are some classes that\n      // are derived from Subscriber (which derives from Subscription) that\n      // implement an _unsubscribe method as a mechanism for obtaining\n      // unsubscription notifications and some of those subscribers are\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\n      // from a prototype method to an instance property - see notifyNext in\n      // RetryWhenSubscriber.\n      if (_ctorUnsubscribe) {\n        (this as any)._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export function isObject(x: any): x is Object {\n  return x !== null && typeof x === 'object';\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber = (() =>\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random())();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { noop } from './noop';\nimport { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   * @deprecated use new Observable() instead\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;\n  /** @deprecated Use an observer instead of an error callback */\n  subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * );\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nconst ObjectUnsubscribedErrorImpl = (() => {\n  function ObjectUnsubscribedErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n  }\n\n  ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n  return ObjectUnsubscribedErrorImpl;\n})();\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse\n   * @deprecated use new Subject() instead\n  */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import {Vector3} from \"three\";\n\n/**\n * A utils file common for main thread and workers.\n * NB: Be careful what you import here, as it will be added to the web worker bundle.\n * In particular, do not use THREE.js here.\n */\n\n// max size of buffer which can be indexed by 16bit integer\nexport const MAX_16BIT_SIZE = 0x10000;\n\nconst DEG_RATIO = 1 / 360;\nexport function getPerspectiveViewWorldSize(fov: number, distance: number): number {\n    return Math.tan(fov * Math.PI * DEG_RATIO) * distance;\n}\n\nexport function iterate<T>(array: T[] | T, loop: (o: T, i: number) => void): void {\n    if (Array.isArray(array)) {\n        for (let i = 0; i < array.length; i++)\n            loop(array[i], i);\n    }\n    else {\n        loop(array, 0);\n    }\n}\n\n// Remove image from RAM after they are transfered to VRAM\nexport function disposeImage(): void {\n    // @ts-ignore\n    this.image = undefined;\n}\n\nexport class Vector3Const {\n    static zero = Object.freeze(new Vector3(0, 0, 0));\n    static one = Object.freeze(new Vector3(1, 1, 1));\n    static up = Object.freeze(new Vector3(0, 0, 1));\n    static down = Object.freeze(new Vector3(0, 0, -1));\n    static forward = Object.freeze(new Vector3(0, 1, 0));\n    static back = Object.freeze(new Vector3(0, -1, 0));\n    static right = Object.freeze(new Vector3(1, 0, 0));\n    static left = Object.freeze(new Vector3(-1, 0, 0));\n}\n","import {BehaviorSubject} from \"rxjs\";\nimport {Box3, Line, Matrix4, Mesh, Object3D, Points} from \"three\";\nimport {IIntersection} from \"./Picker/IIntersection\";\nimport {Caster} from \"./Picker/Caster\";\nimport {PointerInput} from \"./InputHandler\";\nimport {SnapType} from \"./common\";\nimport {Vector3Const} from \"./Helpers/common-utils\";\n\nexport type GeometryObject3D = Mesh | Points | Line;\n\nexport interface SelectableModel extends PickableModel {\n    readonly isSelectable: true;\n    areaPick(caster: Caster, containedOnly?: boolean): Promise<IIntersection>;\n    setSelection(ids: number[]): void;\n    clearSelection(): void;\n}\n\nexport interface HoverableModel {\n    setHoveredFromEvent(event: PointerInput): void;\n}\n\nexport interface PickableModel {\n    pick(caster: Caster): Promise<IIntersection>;\n}\n\nexport interface SnappedPickableModel extends PickableModel {\n    pickSnapped(caster: Caster, snapTypes: SnapType[]): Promise<IIntersection[]>;\n}\n\nexport abstract class Model extends Object3D {\n    get modelId(): string {\n        return this.name;\n    }\n\n    protected boundingBox: BehaviorSubject<Box3>;\n\n    constructor(name: string) {\n        super();\n        super.name = name;\n        this.boundingBox = new BehaviorSubject(new Box3());\n        this.up.copy(Vector3Const.up);\n    }\n\n    getBoundingBox(ids?: number[]): Promise<Box3> {\n        return Promise.resolve(this.boundingBox.value);\n    }\n\n    subscribeToBoundingBox(callback: (box: Box3) => void): void {\n        this.boundingBox.subscribe(callback);\n    }\n\n    transform(matrix: Matrix4): void {\n        const newTransform = new Matrix4().fromArray(matrix.elements);\n        const oldTransform = this.matrixWorld.clone();\n        newTransform.decompose(this.position, this.quaternion, this.scale);\n\n        const bbTransform = newTransform.multiply(oldTransform.invert());\n        this.boundingBox.value.applyMatrix4(bbTransform);\n\n        this.updateMatrixWorld(true);\n        this.boundingBox.next(this.boundingBox.value);\n    }\n\n    isLoading(): boolean {\n        return false;\n    }\n\n    dispose(): void {};\n}\n","import { Vector2, Vector3 } from \"three\";\nimport {IconsSettings, PointIcon} from \"./IconsPlugin\";\nimport {WVCamera} from \"@technology/webgl-viewer/dist/esnext/Rendering/WVCamera\";\n\nexport class PointIconClusterer {\n    private _clusters: PointIconCluster[] = [];\n    private _clustersCount: number;\n    private positions: Float32Array;\n    private tmpPosition = new Vector3();\n    private tmpScreenPosition = new Vector3();\n\n    constructor(private camera: WVCamera, private container: HTMLElement, private settings: IconsSettings) {\n    }\n\n    get clustersCount(): number {\n        return this._clustersCount;\n    }\n\n    public addPoint(point: PointIcon, parentPosition: Vector3): void {\n        this.tmpPosition.x = point.position.x; this.tmpPosition.y = point.position.y; this.tmpPosition.z = point.position.z;\n        this.tmpScreenPosition.copy(this.tmpPosition);\n        this.tmpPosition.sub(parentPosition);\n        this.tmpScreenPosition.project(this.camera);\n        this.tmpScreenPosition.x = (1 + this.tmpScreenPosition.x) * this.container.clientWidth * 0.5;\n        this.tmpScreenPosition.y = (1 - this.tmpScreenPosition.y) * this.container.clientHeight * 0.5;\n\n        if (this.tmpScreenPosition.x < 0 || this.tmpScreenPosition.x > this.container.clientWidth || this.tmpScreenPosition.y < 0 || this.tmpScreenPosition.y > this.container.clientHeight) return;\n\n        let cluster = this.findClosestCluster(this.tmpScreenPosition);\n        if (cluster) {\n            cluster.add(point.id, this.tmpPosition, this.tmpScreenPosition);\n        }\n        else if (this.positions.length >= (this._clustersCount + 1) * 3) {\n            if (this._clusters.length > this._clustersCount)\n                cluster = this._clusters[this._clustersCount];\n            else {\n                cluster = new PointIconCluster(this._clustersCount);\n                this._clusters.push(cluster);\n            }\n            cluster.reset(point, this.positions, this.tmpPosition, this.tmpScreenPosition);\n            this._clustersCount++;\n        }\n    }\n\n    private findClosestCluster(screenPosition: Vector3): PointIconCluster {\n        if (this._clustersCount === 0) return null;\n\n        function distance(a: Vector2, b: Vector3): number {\n            return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n        }\n\n        let closest: PointIconCluster;\n        let prev: PointIconCluster = null;\n        for (let i = 0; i < this._clustersCount; i++) {\n            const cluster = this._clusters[i];\n            const prevD = prev ? distance(prev.screenPosition, screenPosition) : 999999;\n            const currD = distance(cluster.screenPosition, screenPosition);\n            if (prevD < this.settings.clusterRadius || currD < this.settings.clusterRadius)\n                closest = currD < prevD && currD < this.settings.clusterRadius? cluster : prev;\n            prev = cluster;\n        }\n        return closest;\n    }\n\n    public fillBadgeAttributes(positions: Float32Array, uvs: Float32Array, atlasSize: number): number {\n        let index = 0;\n        const badgeSize = 1 / atlasSize;\n        for (let i = 0; i < this.clustersCount; i++) {\n            const c = this._clusters[i];\n            if (c.iconsCount > 1) {\n                const ip = index * 3;\n                positions[ip] = c.x;\n                positions[ip + 1] = c.y;\n                positions[ip + 2] = c.z;\n\n                const io = index * 4;\n                uvs[io] = Math.min(c.iconsCount, atlasSize - 1) * badgeSize;\n                uvs[io + 1] = 0;\n                uvs[io + 2] = uvs[io] + badgeSize;\n                uvs[io + 3] = 1;\n                index++;\n            }\n        }\n        return index;\n    }\n\n    public getCluster(index: number): PointIconCluster {\n        return this._clusters[index];\n    }\n\n    public reset(positions: Float32Array): void {\n        this._clustersCount = 0;\n        this.positions = positions;\n    }\n}\n\nexport class PointIconCluster {\n    public iconsCount: number = 1;\n    public mainIcon: PointIcon;\n    public iconIds: number[] = [];\n\n\n    private _screenPosition = new Vector2();\n    private positions: Float32Array;\n    private readonly index: number;\n\n    constructor(i: number) {\n        this.index = i * 3;\n    }\n\n    get screenPosition(): Vector2 {\n        return this._screenPosition;\n    }\n\n    reset(mainIcon: PointIcon, positions: Float32Array, worldPosition: Vector3, screenPosition: Vector3): void {\n        this.positions = positions;\n        this.iconsCount = 1;\n        this.iconIds = [mainIcon.id];\n        this._screenPosition.x = screenPosition.x;\n        this._screenPosition.y = screenPosition.y;\n        this.x = worldPosition.x;\n        this.y = worldPosition.y;\n        this.z = worldPosition.z;\n        this.mainIcon = mainIcon;\n    }\n\n    add(clusteredIconId: number, worldPosition: Vector3, screenPosition: Vector3): void {\n        this.x = (this.x * this.iconsCount + worldPosition.x) / (this.iconsCount + 1);\n        this.y = (this.y * this.iconsCount + worldPosition.y) / (this.iconsCount + 1);\n        this.z = (this.z * this.iconsCount + worldPosition.z) / (this.iconsCount + 1);\n        this._screenPosition.x = (this._screenPosition.x * this.iconsCount + screenPosition.x) / (this.iconsCount + 1);\n        this._screenPosition.y = (this._screenPosition.y * this.iconsCount + screenPosition.y) / (this.iconsCount + 1);\n        this.iconIds.push(clusteredIconId);\n        this.iconsCount++;\n    }\n\n    set x(v: number) { this.positions[this.index] = v; }\n    get x(): number { return this.positions[this.index]; }\n    set y(v: number) { this.positions[this.index + 1] = v; }\n    get y(): number { return this.positions[this.index + 1]; }\n    set z(v: number) { this.positions[this.index + 2] = v; }\n    get z(): number { return this.positions[this.index + 2]; }\n}\n","import {CustomLengthFormatter, LengthUnit} from \"../common\";\nimport {\n    Box3,\n    BufferAttribute,\n    BufferGeometry,\n    Camera, ConeGeometry, Euler,\n    Material, Matrix4,\n    Mesh, Object3D,\n    Ray,\n    TypedArray,\n    Vector2,\n    Vector3\n} from \"three\";\nimport {IIntersection} from \"../Picker/IIntersection\";\nimport {Caster} from \"../Picker/Caster\";\nimport {Api} from \"../Api\";\nimport {BufferGeometryUtils} from \"three/examples/jsm/utils/BufferGeometryUtils\";\n\nexport function getBoxCorners(box: Box3): Vector3[] {\n    const min = box.min.x === Infinity ? new Vector3(-50, -50, -50) : box.min;\n    const max = box.max.x === -Infinity ? new Vector3(50, 50, 50) : box.max;\n    const corners: Vector3[] = [];\n\n    /*\n      5____4\n\t1/___0/|\n\t| 6__|_7\n\t2/___3/\n\t0: max.x, max.y, max.z\n\t1: min.x, max.y, max.z\n\t2: min.x, min.y, max.z\n\t3: max.x, min.y, max.z\n\t4: max.x, max.y, min.z\n\t5: min.x, max.y, min.z\n\t6: min.x, min.y, min.z\n\t7: max.x, min.y, min.z\n\t*/\n\n    corners.push(new Vector3(max.x, max.y, max.z));\n    corners.push(new Vector3(min.x, max.y, max.z));\n    corners.push(new Vector3(min.x, min.y, max.z));\n    corners.push(new Vector3(max.x, min.y, max.z));\n\n    corners.push(new Vector3(max.x, max.y, min.z));\n    corners.push(new Vector3(min.x, max.y, min.z));\n    corners.push(new Vector3(min.x, min.y, min.z));\n    corners.push(new Vector3(max.x, min.y, min.z));\n\n    return corners;\n}\n\nexport function DirectionToSpherical(direction: Vector3, up: Vector3): Vector2 {\n    let y: number;\n\n    if (Math.abs(direction.x) < 0.002 && Math.abs(direction.y) < 0.002) {\n        if (direction.z > 0) {\n            y = Math.PI + calculateSphericalYAngle(up);\n        } else {\n            y = calculateSphericalYAngle(up);\n        }\n    } else {\n        y = Math.atan2(direction.y, direction.x);\n    }\n\n    return new Vector2(Math.acos(direction.z), y);\n}\n\nexport function calculateSphericalYAngle(up: Vector3): number {\n    if (up.x === 0.0) {\n        if (up.y > 0) {\n            return Math.PI / 2;\n        } else {\n            return -Math.PI / 2;\n        }\n    } else if (up.y === 0) {\n        if (up.x > 0) {\n            return 0.0;\n        } else {\n            return Math.PI;\n        }\n    } else {\n        const angle = Math.atan2(Math.abs(up.y), Math.abs(up.x));\n\n        if (up.x < 0) {\n            if (up.y < 0) {\n                return angle + Math.PI;\n            } else {\n                return angle + Math.PI / 2;\n            }\n        } else {\n            if (up.y < 0) {\n                return angle + 1.5 * Math.PI;\n            } else {\n                return angle;\n            }\n        }\n    }\n}\n\nexport function SphericalToDirection(sphericalCoordinates: Vector2, vec: Vector3): Vector3 {\n    return vec.set(\n        Math.sin(sphericalCoordinates.x) * Math.cos(sphericalCoordinates.y),\n        Math.sin(sphericalCoordinates.x) * Math.sin(sphericalCoordinates.y),\n        Math.cos(sphericalCoordinates.x)\n    ).normalize();\n}\n\nexport function closestPointBetweenRays(line0: Ray, line1: Ray): Vector3 {\n    const originDiff = new Vector3().subVectors(line0.origin, line1.origin);\n    const a01 = -line0.direction.dot(line1.direction);\n\n    const b0 = originDiff.dot(line0.direction);\n    const c = originDiff.length();\n    const determinant = Math.abs(1.0 - a01 * a01);\n    let line0Parameter: number;\n\n    if (determinant >= 0) {\n        // lines are not parallel\n        const fB1 = -originDiff.dot(line1.direction);\n        const inverseDeterminant = 1.0 / determinant;\n        line0Parameter = (a01 * fB1 - b0) * inverseDeterminant;\n    } else {\n        // lines are parallel, select any closest pair of points\n        line0Parameter = -b0;\n    }\n\n    return new Vector3()\n        .copy(line0.origin)\n        .add(line0.direction.multiplyScalar(line0Parameter));\n}\n\nexport function getTouchPoint(event: TouchEvent): { x: number; y: number } {\n    const point = { x: 0, y: 0 };\n    const touches = event.touches.length !== 0 ? event.touches : event.changedTouches;\n    for (const touch of touches) {\n        point.x += touch.clientX;\n        point.y += touch.clientY;\n    }\n    point.x /= touches.length;\n    point.y /= touches.length;\n    return point;\n}\n\nexport function getRayIntersection(x: number, y: number, camera: Camera): IIntersection {\n    const vector = new Vector3();\n    const raycaster = new Caster();\n\n    vector.set((x / window.innerWidth) * 2 - 1, -(y / window.innerHeight) * 2 + 1, 0.5);\n\n    vector.unproject(camera);\n\n    const dir = vector.sub(camera.position).normalize();\n    raycaster.set(camera.position, dir);\n    return {\n        id: null,\n        object: null,\n        model: null,\n        caster: raycaster\n    };\n}\n\nexport function rayToWorldPosition(ray: Ray, camera: Camera, point: Vector3): Vector3 {\n    const dir = ray.direction;\n    const distance = camera.position.distanceTo(point);\n    return camera.position.clone().add(dir.multiplyScalar(distance));\n}\n\nexport function copyToVector3(from: Vector3, to: Vector3): Vector3 {\n    to.x = from.x; to.y = from.y; to.z = from.z;\n    return to;\n}\n\nexport const MILLIMETERS_IN_FOOT = 304.8;\nexport const MILLIMETERS_IN_INCH = 25.4;\n\nexport const lengthUnits: Record<\n    LengthUnit,\n    { inMillimeters: number; symbol: string }\n> = {\n    mm: { inMillimeters: 1, symbol: \"mm\" },\n    cm: { inMillimeters: 1e1, symbol: \"cm\" },\n    m: { inMillimeters: 1e3, symbol: \"m\" },\n    km: { inMillimeters: 1e6, symbol: \"km\" },\n    ft: { inMillimeters: MILLIMETERS_IN_FOOT, symbol: \"ft\" },\n    in: { inMillimeters: MILLIMETERS_IN_INCH, symbol: \"in\" },\n    yd: { inMillimeters: 914.4, symbol: \"yd\" },\n    mi: { inMillimeters: 1609344, symbol: \"mi\" },\n    custom: { inMillimeters: 1e3, symbol: \"m\" }\n};\n\nexport function formatLength(\n    millimeters: number,\n    unit: LengthUnit,\n    decimals: number = 2\n): string {\n    const value = lengthUnits[unit];\n    return `${roundToDecimals(millimeters / value.inMillimeters, decimals)} ${value.symbol}`;\n}\n\nfunction roundToDecimals(value: number, decimals: number): number {\n    const p = Math.pow(10, decimals);\n    return Math.round(value * p) / p;\n}\n\nexport const distanceFormatter = (lengthUnit: LengthUnit, decimals: number) => {\n    return (distance: number) => {\n        return formatLength(distance * 1000, lengthUnit, decimals);\n    };\n};\n\nexport const positionFormatter = (position: Vector3, lengthFormatter: CustomLengthFormatter) => {\n    return `X ${lengthFormatter(position.x)} | Y ${lengthFormatter(position.y)} | Z ${lengthFormatter(position.z)}`;\n};\n\nexport function createGeometryAttribute(geometry: BufferGeometry, attributeName: string, length: number, itemSize: number, arrayType: new (size: number) => TypedArray): BufferAttribute {\n    let array: TypedArray;\n    let attribute = attributeName === \"index\" ? geometry.getIndex() : geometry.getAttribute(attributeName) as BufferAttribute;\n\n    // minimize the number of array allocations, reallocate only if too small or 2x size\n    if (attribute && attribute.array.length >= length * itemSize && attribute.array.length < length * itemSize * 2) {\n        attribute.count = length;\n        attribute.updateRange.count = length * itemSize;\n        attribute.needsUpdate = true;\n    }\n    else {\n        array = new arrayType(length * itemSize);\n        attribute = new BufferAttribute(array, itemSize);\n        if (attributeName === \"index\") geometry.setIndex(attribute);\n        else geometry.setAttribute(attributeName, attribute);\n    }\n    return attribute;\n}\n\nexport interface ITrimBIMValidationInfo {\n    version?: string;\n    versionNumber?: number;\n}\n\nexport function getFileBuffer(file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = event => {\n            const target = <any>event.target;\n            resolve(target.result);\n        };\n\n        reader.onerror = e => {\n            console.error(e);\n            return reject(e);\n        };\n\n        reader.readAsArrayBuffer(file);\n    });\n}\n\nexport async function toImage(blob: Blob): Promise<ImageBitmap | HTMLImageElement> {\n    if (typeof createImageBitmap === \"undefined\") {\n        return new Promise(async (resolve, reject) => {\n            const img = new Image();\n            img.src = URL.createObjectURL(blob);\n            img.onload = () => resolve(img);\n            img.onerror = () => reject(\"Image did not load\");\n        });\n    }\n\n    try {\n        // @ts-ignore\n        return await createImageBitmap(blob, { imageOrientation: \"flipY\" });\n    } catch (e) {\n        return await createImageBitmap(blob); // firefox does not support options argument\n    }\n}\n\nconst vec3 = new Vector3();\nexport function createScreenStaticSizeMesh(geometry: BufferGeometry, material: Material, api: Api, adjustScale?: (scale: number) => number): Mesh {\n    const marker = new Mesh(geometry, material as any);\n    makeScreenStaticSize(marker, api, adjustScale);\n    return marker;\n}\n\nexport function makeScreenStaticSize(object: Object3D, api: Api, adjustScale?: (scale: number) => number): void {\n    object.renderOrder = 1;\n\n    let mesh: Mesh = undefined;\n    object.traverse(o => { if (o instanceof Mesh) mesh = o });\n    mesh.onBeforeRender = () => {\n        let scale = api.camera.getProjectionCompensatingScale(object.getWorldPosition(vec3).distanceTo(api.camera.position));\n        if (adjustScale) scale = adjustScale(scale);\n        object.scale.set(scale, scale, scale);\n        object.updateMatrixWorld(true);\n    };\n}\n\nexport function createArrowGeometry(size: number): BufferGeometry {\n    const geometry = new ConeGeometry(size / 3, size, 10);\n    geometry.applyMatrix4(new Matrix4().makeRotationFromEuler(new Euler(-Math.PI / 2, 0, 0)).setPosition(0, 0, size / 2));\n    return geometry;\n}\n","import {\n    BufferGeometry,\n    Intersection, Material,\n    Points,\n    Raycaster,\n    Sphere,\n    Vector3\n} from \"three\";\nimport { WVCamera } from \"../Rendering/WVCamera\";\n\n// This points object is aware of its points size in world space and raycasts them correctly\n// PointMaterial.size is used instead of Raycaster.params.Points.threshold\nexport class RaycastablePoints<TMaterial extends Material | Material[]> extends Points {\n\n    private sphere = new Sphere();\n    private vec3 = new Vector3();\n\n    constructor(protected _camera: WVCamera, protected _container: HTMLElement, public pointSize?: number, material?: TMaterial) {\n        super(new BufferGeometry(), material);\n    }\n\n    public raycast(raycaster: Raycaster, intersects: Intersection[]): void {\n        const geometry = this.geometry;\n        const matrixWorld = this.matrixWorld;\n\n        // Checking boundingSphere distance to ray\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        this.sphere.copy(geometry.boundingSphere);\n        this.sphere.applyMatrix4(matrixWorld);\n        this.sphere.radius += this._getWorldSize(this.sphere.center.distanceTo(this._camera.position) + this.sphere.radius);\n        if (raycaster.ray.intersectsSphere(this.sphere) === false) return;\n\n        const posAttribute = this.geometry.attributes.position;\n        for (let i = 0, l = posAttribute.count; i < l; i++) {\n            const position = this.vec3.fromArray(posAttribute.array, i * 3).applyMatrix4(matrixWorld);\n            this._raycastPoint(position, i, raycaster, intersects);\n        }\n    }\n\n    private _getWorldSize(distance: number): number {\n        return this._camera.getViewWorldSize(distance) * this.pointSize / this._container.clientWidth;\n    }\n\n    private _raycastPoint(point: Vector3, index: number, raycaster: Raycaster, intersects: Intersection[]): void {\n        const size = this._getWorldSize(point.distanceTo(this._camera.position));\n\n        const rayPointDistanceSq = raycaster.ray.distanceSqToPoint(point);\n        if (rayPointDistanceSq < size * size) {\n            const intersectPoint = raycaster.ray.closestPointToPoint(point, this.vec3);\n            const distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\n            if (distance < raycaster.near || distance > raycaster.far) return;\n\n            intersects.push({\n                distance: distance,\n                point: this.vec3.clone(),\n                index: index,\n                face: null,\n                object: this,\n            });\n        }\n    }\n\n}\n","import { ShaderMaterial, NormalBlending, NoBlending, ShaderMaterialParameters } from \"three\";\nimport { GlobalMaterialUniforms } from \"./RenderingManager\";\n\nexport class DepthPeelingMaterial extends ShaderMaterial {\n    readonly isDepthPeelingMaterial = true;\n\n    protected _globalUniforms: GlobalMaterialUniforms;\n\n    origTransparent: boolean;\n    private readonly origOpacity: number;\n\n    get transparent(): boolean {\n        if (this._globalUniforms && this._globalUniforms.globalTransparent !== undefined)\n            return this._globalUniforms.globalTransparent;\n        return this.origTransparent;\n    }\n\n    set transparent(v: boolean) {\n        this.origTransparent = v;\n    }\n\n    protected updateTransparency(): void {\n        if (this._globalUniforms) {\n            if (this._globalUniforms.globalOpacity) this.uniforms.opacity.value = this.origOpacity * this._globalUniforms.globalOpacity.value;\n            const transparent = this.origTransparent || this._globalUniforms.globalTransparent !== undefined;\n            this.uniforms.transparent.value = Number(transparent);\n            this.blending = transparent ? NormalBlending : NoBlending;\n        }\n    }\n\n    constructor(parameters: ShaderMaterialParameters, globalUniforms?: GlobalMaterialUniforms) {\n        super(parameters);\n        this._globalUniforms = globalUniforms;\n        this.origOpacity = parameters.uniforms.opacity.value;\n        this.origTransparent = parameters.transparent;\n        // replace transparent property of parent class with get/set\n        delete this.transparent;\n    }\n}\n","import {Color, ShaderMaterialParameters} from \"three\";\nimport { DepthPeelingMaterial } from \"./DepthPeelingMaterial\";\nimport { GlobalMaterialUniforms } from \"./RenderingManager\";\n\nexport class WVMaterial extends DepthPeelingMaterial {\n    // We need this boolean as rollup copies this class for each plugin, so instanceof doesnt work :(\n    readonly isWVMaterial = true;\n\n    setIntersection(state: boolean): void {\n        this.clipIntersection = state;\n        this.needsUpdate = true;\n    }\n\n    get color(): Color {\n        return this.uniforms.diffuse.value;\n    }\n\n    protected constructor(parameters: ShaderMaterialParameters, globalUniforms: GlobalMaterialUniforms) {\n        super(parameters, globalUniforms);\n        this.clipping = true;\n        this.morphTargets = false;\n        this.lights = false;\n    }\n}\n","import {\n    AlphaFormat,\n    Color,\n    MaterialParameters,\n    ShaderLib,\n    Texture,\n    UniformsUtils, Vector2\n} from \"three\";\nimport { GlobalMaterialUniforms } from \"./RenderingManager\";\nimport { WVMaterial } from \"./WVMaterial\";\n\n// language=GLSL\nconst fragmentShader = `\n#include <common>\n#include <map_particle_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <depth_peeling_pars_fragment>\n\nuniform vec3 diffuse;\nuniform float opacity;\n\nvarying vec4 vUv; // vec4(leftUpUV, rightDownUV)\n\n#ifdef USE_SIZEBUFFER \n    varying vec4 vPointSize; // vec4(leftUpXY, rightDownXY) from BillboardGeometryBuilder\n    varying float pSize;\n#endif\n\nvoid main() {\n    #include <clipping_planes_fragment>\n    #include <depth_peeling_fragment>\n    \n\tvec4 diffuseColor = vec4(diffuse, opacity);\n\n    #ifdef USE_SIZEBUFFER\n        // Normalising the point coord to [-1,1]^2, then multiplying with the point size to obtain pixel coordinate relative to point center:\n        vec2 pixelCoord = (gl_PointCoord * 2.0 - 1.0) * 0.5 * pSize;\n        \n        // Discarding pixels outsize the defined point size. Since inverted point sizes (such as (-1,1) to (1,-1)) have to be supported, we must compare to the min and max of the axis:\n        if (pixelCoord.x < min(vPointSize.x, vPointSize.z) ||\n            pixelCoord.x > max(vPointSize.x, vPointSize.z) ||\n            pixelCoord.y < min(vPointSize.y, vPointSize.w) ||\n            pixelCoord.y > max(vPointSize.y, vPointSize.w)\n        ) discard;\n        \n        vec2 realSize = vPointSize.zw - vPointSize.xy;\n        vec2 localCoord = (pixelCoord - vPointSize.xy) / realSize;\n        vec2 uv = localCoord * (vUv.zw - vUv.xy) + vUv.xy;\n    #else\n        vec2 uv = gl_PointCoord * (vUv.zw - vUv.xy) + vUv.xy;\n    #endif\n    uv = vec2(uv.x, 1.0 - uv.y);        // Vertical correction\n    \n\tvec4 mapTexel = texture2D(map, uv);\n\t#ifdef ALPHA_FORMAT\n\t    mapTexel.rgb = vec3(1.0);\n\t#endif\n\tdiffuseColor *= mapTexel;\n    \n\t#include <alphatest_fragment>\n\n\tgl_FragColor = diffuseColor;\n}`;\n\n// language=GLSL\nconst vertexShader = `\nuniform float size;\nuniform float pixelRatio;\nuniform vec2 offset;\nuniform vec2 viewSize;\n\n#include <common>\n#include <clipping_planes_pars_vertex>\n\n// vec4(leftUpUV, rightDownUV)\nattribute vec4 pointUv;\nvarying vec4 vUv;\n\n#ifdef USE_SIZEBUFFER\n    // vec4(leftUpXY, rightDownXY) from BillboardGeometryBuilder\n    attribute vec4 pointSize; \n    varying vec4 vPointSize;\n\n    varying float pSize;\n#endif\n\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n    #ifdef USE_SIZEBUFFER\n        pSize = abs(max(max(-pointSize.x, -pointSize.y), max(pointSize.z, pointSize.w))) * 2.0;\n        vPointSize = pointSize;\n    #else\n        float pSize = size; \n    #endif\n\n    #ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = viewSize.y * projectionMatrix[1][1] * pSize / gl_Position.w;\n        gl_Position.xy += projectionMatrix[1][1] * offset * vec2(viewSize.y / viewSize.x, 1.0);\n    #else\n\t\tgl_PointSize = pSize * pixelRatio;\n        gl_Position.xy += offset * vec2(viewSize.y / viewSize.x, 1.0) * gl_Position.w;\n    #endif\n    \n    vUv = pointUv;\n    \n    #include <clipping_planes_vertex>\n}`;\n\nexport interface WVPointsMaterialParameters extends MaterialParameters {\n    color?: Color | string | number;\n    map?: Texture;\n    size?: number;\n    offset?: Vector2;\n    sizeAttenuation?: boolean;\n    useSizeBuffer?: boolean;\n}\n\nexport class WVPointsMaterial extends WVMaterial {\n\n    // Called by WebGLRenderer.setProgram to refresh material before rendering\n    get isPointsMaterial(): boolean {\n\n        // if points are attenuated - size is in world units, pixels otherwise\n        if (!this.sizeAttenuation && this.offset) {\n            const height = this.uniforms.viewSize.value.y;\n            (this.uniforms.offset.value as Vector2)\n                .copy(this.offset)\n                .multiplyScalar(window.devicePixelRatio / height);\n\n        } else if (this.offset) {\n            if (this._parameters.map.image)\n                (this.uniforms.offset.value as Vector2).copy(this.offset);\n        }\n\n        this.updateTransparency();\n        return false;\n    }\n\n    offset: Vector2;\n    sizeAttenuation: boolean;\n\n    private _parameters: WVPointsMaterialParameters;\n\n    constructor(parameters: WVPointsMaterialParameters, globalUniforms: GlobalMaterialUniforms) {\n        const uniforms = Object.assign(UniformsUtils.clone(ShaderLib.points.uniforms), {\n            diffuse: { value: new Color(parameters.color) },\n            map: { type: 't', value: parameters.map },\n            offset: { value: new Vector2() },\n            size: { value: parameters.size },\n            opacity: { value: parameters.opacity !== undefined ? parameters.opacity : 1},\n            transparent: {value: parameters.transparent !== undefined ? parameters.transparent : false}\n        }, globalUniforms);\n\n        const params = Object.assign({\n            uniforms: uniforms,\n            defines: { USE_MAP: true, USE_SIZEBUFFER: !!parameters.useSizeBuffer, ALPHA_FORMAT: !!(parameters.map && parameters.map.format === AlphaFormat) },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader\n        }, parameters);\n        delete params.color;\n        delete params.map;\n        delete params.size;\n        delete params.sizeAttenuation;\n        delete params.useSizeBuffer;\n        delete params.offset;\n\n        super(params, globalUniforms);\n\n        this._parameters = parameters;\n        this.offset = parameters.offset;\n        this.sizeAttenuation = parameters.sizeAttenuation;\n        this.alphaTest = 0.001;\n    }\n\n    clone(): this {\n        const m = new WVPointsMaterial(this._parameters, this._globalUniforms);\n        m.sizeAttenuation = this.sizeAttenuation;\n        return m as this;\n    }\n}\n","import {\n    BufferAttribute,\n    BufferGeometry,\n    Points,\n    Texture,\n    Vector2,\n    Object3D, Material\n} from \"three\";\nimport { PointIconClusterer, PointIconCluster } from \"./PointIconClusterer\";\nimport { WVCamera } from \"@technology/webgl-viewer/dist/esnext/Rendering/WVCamera\";\nimport { createGeometryAttribute } from \"@technology/webgl-viewer/dist/esnext/Helpers/utils\";\nimport { RaycastablePoints } from \"@technology/webgl-viewer/dist/esnext/CustomObjects/RaycastablePoints\";\nimport { WVPointsMaterial } from \"@technology/webgl-viewer/dist/esnext/Rendering/WVPointsMaterial\";\nimport { GlobalMaterialUniforms, RenderingManager } from \"@technology/webgl-viewer/dist/esnext/Rendering/RenderingManager\";\nimport {IconsSettings, PointIcon} from \"./IconsPlugin\";\n\nexport class PointIconBatch extends Object3D {\n    icons: RaycastablePoints<Material>;\n    private badges: Points;\n    private _data: PointIcon[];\n    private _clusterer: PointIconClusterer;\n\n    constructor(\n        private _camera: WVCamera,\n        private _container: HTMLElement,\n        private _renderingManager: RenderingManager,\n        private badgeTextureAtlas: Texture,\n        private badgeAtlasSize: number,\n        private iconsAtlas: Texture,\n        private iconPaths: string[],\n        private settings: IconsSettings\n    ) {\n        super();\n        this._data = [];\n        this._clusterer = new PointIconClusterer(this._camera, this._container, this.settings);\n    }\n\n    clearData(): void {\n        this._data = [];\n    }\n\n    addIconData(icon: PointIcon): void {\n        this._data.push(icon);\n    }\n\n    isEmpty(): boolean {\n        return this._data.length === 0;\n    }\n\n    public update(): void {\n        if (!this.icons) this.createIcons(this._data[0]);\n        if (!this.badges) this.createBadges(this._data[0]);\n\n        this.updateGeometry(this._data);\n    }\n\n    private getGlobalUniformsWithoutOpacity(): GlobalMaterialUniforms {\n        const globalUniforms = Object.assign({}, this._renderingManager.uniforms);\n        // Ignore global opacity\n        delete globalUniforms.globalOpacity;\n        delete globalUniforms.globalTransparent;\n        return globalUniforms;\n    }\n\n    private createIcons(refObj: PointIcon): void {\n        const material = new WVPointsMaterial({\n            size: refObj.size,\n            map: this.iconsAtlas,\n            transparent: true,\n            clippingPlanes: this._renderingManager.clippingPlanes\n        }, this.getGlobalUniformsWithoutOpacity());\n        material.depthTest = false;\n        material.depthWrite = false;\n        const pointsObject = new RaycastablePoints<Material>(this._camera, this._container, refObj.size, material);\n\n        this.add(pointsObject);\n        this.icons = pointsObject;\n    }\n\n    private createBadges(refObj: PointIcon): void {\n        const material = new WVPointsMaterial({\n            size: 16,\n            map: this.badgeTextureAtlas,\n            offset: new Vector2(0, refObj.size * 1.4),\n            transparent: true,\n            clippingPlanes: this._renderingManager.clippingPlanes\n        }, this.getGlobalUniformsWithoutOpacity());\n        material.depthTest = false;\n        material.depthWrite = false;\n        const geometry = new BufferGeometry();\n        const pointsObject = new Points(geometry, material);\n\n        this.add(pointsObject);\n        this.badges = pointsObject;\n    }\n\n    private fillIconUVs(uvs: Float32Array): void {\n        for (let i = 0; i < this._clusterer.clustersCount; i++) {\n            const icon = this._clusterer.getCluster(i).mainIcon;\n            const iconIndex = this.iconPaths.indexOf(icon.iconPath);\n            const io = i * 4;\n            uvs[io] = iconIndex / this.iconPaths.length;\n            uvs[io + 1] = 0;\n            uvs[io + 2] = (iconIndex + 1) / this.iconPaths.length;\n            uvs[io + 3] = 1;\n        }\n    }\n\n    getCluster(index: number): PointIconCluster {\n        return this._clusterer.getCluster(index);\n    }\n\n    private updateGeometry(data: PointIcon[]): void {\n        const length = data.length;\n        const iconsGeometry = this.icons.geometry;\n        const iconsPositions = createGeometryAttribute(iconsGeometry, \"position\", Math.min(data.length, 500), 3, Float32Array).array as Float32Array;\n\n        const clusterer = this._clusterer;\n        clusterer.reset(iconsPositions);\n        for (let i = 0; i < length; i++)\n            clusterer.addPoint(data[i], this.position);\n\n        {\n            const posAttr = iconsGeometry.getAttribute(\"position\") as BufferAttribute;\n            const uvAttr = createGeometryAttribute(iconsGeometry, \"pointUv\", clusterer.clustersCount, 4, Float32Array);\n            this.fillIconUVs(uvAttr.array as Float32Array);\n            posAttr.count = clusterer.clustersCount;\n            posAttr.updateRange.count = clusterer.clustersCount * 3;\n            posAttr.needsUpdate = true;\n            uvAttr.count = clusterer.clustersCount;\n            uvAttr.updateRange.count = clusterer.clustersCount * 4;\n            uvAttr.needsUpdate = true;\n            iconsGeometry.computeBoundingSphere();\n            iconsGeometry.computeBoundingBox();\n        }\n        {\n            const badgesGeometry = this.badges.geometry;\n            const posAttr = createGeometryAttribute(badgesGeometry, \"position\", clusterer.clustersCount, 3, Float32Array);\n            const uvAttr = createGeometryAttribute(badgesGeometry, \"pointUv\", clusterer.clustersCount, 4, Float32Array);\n            const badgeCount = clusterer.fillBadgeAttributes(posAttr.array as Float32Array, uvAttr.array as Float32Array, this.badgeAtlasSize);\n            posAttr.count = badgeCount;\n            posAttr.updateRange.count = badgeCount * 3;\n            posAttr.needsUpdate = true;\n            uvAttr.count = badgeCount;\n            uvAttr.updateRange.count = badgeCount * 4;\n            uvAttr.needsUpdate = true;\n        }\n    };\n}\n","import { Model, PickableModel } from \"@technology/webgl-viewer/dist/esnext/Model\";\nimport { IIntersection } from \"@technology/webgl-viewer/dist/esnext/Picker/IIntersection\";\nimport {\n    Box3,\n    Texture,\n    Vector3\n} from \"three\";\nimport { Caster } from \"@technology/webgl-viewer/dist/esnext/Picker/Caster\";\nimport { WVCamera } from \"@technology/webgl-viewer/dist/esnext/Rendering/WVCamera\";\nimport { RenderingManager } from \"@technology/webgl-viewer/dist/esnext/Rendering/RenderingManager\";\nimport { PointIconBatch } from \"./PointIconBatch\";\nimport {IconsSettings, PointIcon} from \"./IconsPlugin\";\n\nexport class PointIconModel extends Model implements PickableModel {\n    static get ModelId(): string { return \"icons\" };\n\n    private readonly batchSize = 400;\n    private readonly badgeAtlasSize = 11;\n    private readonly iconSizeInAtlas = 128;\n    private iconPaths: string[];\n    private badgeTextureAtlas: Texture;\n    private iconsAtlas = new Texture();\n    private canvas2d = document.createElement(\"canvas\");\n    private context2d = this.canvas2d.getContext(\"2d\");\n    private updatingAtlas = false;\n    private vec3 = new Vector3();\n\n    constructor(\n        private _data: PointIcon[],\n        private _camera: WVCamera,\n        private _container: HTMLElement,\n        private _renderingManager: RenderingManager,\n        private _settings: IconsSettings\n    ) {\n        super(PointIconModel.ModelId);\n        this.badgeTextureAtlas = this.createBadgeTextureAtlas();\n    }\n\n    private get batches(): PointIconBatch[] {\n        return this.children as PointIconBatch[];\n    }\n\n    pick = (() => {\n        return (caster: Caster): Promise<IIntersection> => {\n            if (this.batches.length === 0)\n                return;\n\n            const intersection = caster.intersectObjects(this.batches.map(b => b.icons), false)[0];\n            if (intersection) {\n                const cluster = this.batches.find(b => b.icons === intersection.object).getCluster(intersection.index);\n                const result = { model: this, id: cluster.mainIcon.id, childrenIds: cluster.iconIds, object: null, ray: caster.ray, pickPriority: 1 } as IIntersection;\n                return Promise.resolve(Object.assign(result, intersection));\n            }\n        };\n    })();\n\n    private createBadgeTextureAtlas(): Texture {\n        const size = 64;\n        const canvas2d = document.createElement(\"canvas\");\n        const context2d = canvas2d.getContext(\"2d\");\n\n        canvas2d.width = size * this.badgeAtlasSize;\n        canvas2d.height = size;\n\n        context2d.font = (size * 0.8) + \"px Arial\";\n        context2d.textAlign = \"center\";\n        context2d.textBaseline = \"middle\";\n        for (let i = 0; i < this.badgeAtlasSize; i++) {\n            context2d.fillStyle = \"white\";\n            context2d.beginPath();\n            context2d.rect(size * i, 0, size, size);\n            context2d.fill();\n            context2d.lineWidth = 6;\n            context2d.strokeStyle = \"gray\";\n            context2d.stroke();\n            context2d.fillStyle = \"black\";\n            context2d.fillText(i === this.badgeAtlasSize - 1 ? \"•\" : i.toString(), size * (i + 0.5), size * 0.5 + 5);\n        }\n        const texture = new Texture(canvas2d);\n        texture.needsUpdate = true;\n        return texture;\n    }\n\n    public update(): void {\n        if (this._data.length === 0) {\n            this.clear();\n            this._renderingManager.redraw();\n            return;\n        }\n\n        for (const batch of this.batches)\n            batch.clearData();\n        for (const icon of this._data) {\n            const batchPosition = this.vec3.copy(icon.position).divideScalar(this.batchSize).round().multiplyScalar(this.batchSize);\n            let batch = this.batches.find(b => b.position.distanceToSquared(batchPosition) < 0.01);\n            if (!batch) {\n                batch = new PointIconBatch(\n                    this._camera,\n                    this._container,\n                    this._renderingManager,\n                    this.badgeTextureAtlas,\n                    this.badgeAtlasSize,\n                    this.iconsAtlas,\n                    this.iconPaths,\n                    this._settings\n                );\n                batch.position.copy(batchPosition);\n                this.add(batch);\n            }\n            batch.addIconData(icon);\n        }\n        for (const batch of this.batches) {\n            if (!batch.isEmpty()) batch.update();\n            else this.remove(batch);\n        }\n        this.computeBoundingBox();\n        this._renderingManager.redraw();\n    }\n\n    public async updateIconTextureAtlas(): Promise<void> {\n        const iconPaths = Array.from(new Set(this._data.map(p => p.iconPath)));\n        if (this.iconPaths && !iconPaths.find(p => !this.iconPaths.includes(p)) && this.iconPaths.length === iconPaths.length)\n            return;\n\n        if (this.updatingAtlas) throw new Error(\"Unable to update atlas texture is parallel, make sure you are awaiting the Promise\");\n        this.updatingAtlas = true;\n\n        if (!this.iconPaths) {\n            this.iconPaths = iconPaths;\n        }\n        else {\n            this.iconPaths.length = 0;\n            this.iconPaths.push(...iconPaths);\n        }\n\n        this.canvas2d.width = this.iconSizeInAtlas * iconPaths.length;\n        this.canvas2d.height = this.iconSizeInAtlas;\n\n        for (let i = 0; i < iconPaths.length; i++)\n            this.context2d.drawImage(await this.createImage(iconPaths[i]), this.iconSizeInAtlas * i, 0, this.iconSizeInAtlas, this.iconSizeInAtlas);\n\n        this.iconsAtlas.image = this.canvas2d;\n        this.iconsAtlas.needsUpdate = true;\n        this.updatingAtlas = false;\n    }\n\n    private async createImage(url: string): Promise<HTMLImageElement> {\n        return new Promise<HTMLImageElement>((resolve) => {\n            const img = new Image();\n            img.onload = () => resolve(img);\n            img.crossOrigin = \"anonymous\";\n            img.src = url;\n        });\n    }\n\n    private computeBoundingBox(): void {\n        this.boundingBox.value.makeEmpty();\n\n        const tempBox = new Box3();\n        this.batches.forEach(batch => {\n            if (batch.icons.geometry.boundingBox) {\n                tempBox.copy(batch.icons.geometry.boundingBox).min.add(batch.position);\n                tempBox.max.add(batch.position);\n                this.boundingBox.value.union(tempBox);\n            }\n        });\n\n        this.boundingBox.next(this.boundingBox.value);\n    }\n}\n","import {\n\tOrthographicCamera,\n\tPlaneGeometry,\n\tMesh\n} from '../../../build/three.module.js';\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\n// Important: It's actually a hack to put FullScreenQuad into the Pass namespace. This is only\n// done to make examples/js code work. Normally, FullScreenQuad should be exported\n// from this module like Pass.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","import {\n\tColor\n} from '../../../build/three.module.js';\nimport { Pass } from '../postprocessing/Pass.js';\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\tthis._oldClearColor = new Color();\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tvar oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","import { Api } from \"./Api\";\nimport { version } from \"./Version\";\nimport {QualityPreset} from \"./common\";\n\nexport abstract class WebglViewerPlugin {\n    get version(): string {\n        return version;\n    }\n\n    abstract get name(): string;\n    abstract set api(api: Api);\n}\n\nexport interface QualityAwarePlugin {\n    applyQualityPreset(quality: QualityPreset): void;\n}\n","export const version = \"DEV_BUILD\";\n","import {PointIconModel} from \"./PointIconModel\";\nimport {Scene, Vector3} from \"three\";\nimport {Api} from \"@technology/webgl-viewer/dist/esnext/Api\";\nimport {WebglViewerPlugin} from \"@technology/webgl-viewer/dist/esnext/WebglViewerPlugin\";\nimport {WebglViewerEventName} from \"@technology/webgl-viewer/dist/esnext/common\";\nimport {RenderPass} from \"three/examples/jsm/postprocessing/RenderPass\";\n\nexport interface PointIcon {\n    id: number;\n    iconPath: string;\n    position: Vector3;\n    size: number;\n}\n\nexport interface IconsSettings {\n    clusterRadius: number;\n}\n\nexport class IconsPlugin extends WebglViewerPlugin {\n    private _api: Api;\n    private _data: PointIcon[] = [];\n    protected _model: PointIconModel;\n    settings: IconsSettings;\n\n    get name(): string {\n        return \"icons\";\n    }\n\n    constructor(settings?: IconsSettings) {\n        super();\n        this.settings = settings || {clusterRadius: 120};\n    }\n\n    set api(api: Api) {\n        this._api = api;\n    }\n\n    getIcons(): PointIcon[] {\n        return this._data;\n    }\n\n    private getModel(): PointIconModel {\n        if (this._model) return this._model;\n\n        this._model = new PointIconModel(\n            this._data,\n            this._api.camera,\n            this._api.container,\n            this._api.renderingManager,\n            this.settings\n        );\n        this._api.models.add(this._model, false);\n        this.createRenderPass();\n        this._api.eventDispatcher.subscribe(WebglViewerEventName.NavigationEnd, () => this._model.update());\n        return this._model;\n    }\n\n    private createRenderPass(): void {\n        const scene = new Scene();\n        scene.add(this._model);\n        const pass = new RenderPass(scene, this._api.camera);\n        pass.clear = false;\n        this._api.renderingManager.composer.addPassAfterSelection(pass);\n    }\n\n    public async add(pointIcon: PointIcon | PointIcon[]): Promise<void> {\n        const objects = pointIcon instanceof Array ? pointIcon : [pointIcon];\n        objects.forEach(p => this._data.push(p));\n        await this.getModel().updateIconTextureAtlas();\n        this.getModel().update();\n    }\n\n    public async remove(pointIcon: PointIcon | PointIcon[]): Promise<void> {\n        const objects = pointIcon instanceof Array ? pointIcon : [pointIcon];\n        objects.forEach(p => this._data.splice(this._data.indexOf(p), 1));\n        await this.getModel().updateIconTextureAtlas();\n        this.getModel().update();\n    }\n\n    public clear(): void {\n        this._data.length = 0;\n        this.getModel().update();\n    }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","config","Promise","value","closed","next","UnsubscriptionErrorImpl","Error","errors","name","Subscription","unsubscribe","_ctorUnsubscribe","x","_a","_parentOrParents","isFunction","isArray","index","sub","e","add","subscription","indexOf","subscriptions","subscriptionIndex","empty","rxSubscriber","Subscriber","_super","_this","destination","destinationOrNext","syncErrorThrowable","tslib_1.__extends","error","subscriber","isStopped","_next","_error","_complete","SafeSubscriber","context","observerOrNext","complete","_context","_parentSubscriber","useDeprecatedSynchronousErrorHandling","__tryOrSetError","__tryOrUnsub","syncErrorValue","wrappedComplete","parent","syncErrorThrown","hostReportError","fns","input","Observable","subscribe","lift","operator","observable","source","sink","nextOrObserver","_subscribe","closed_1","canReportError","forEach","promiseCtor","reject","operations","length","toPromise","getPromiseCtor","ObjectUnsubscribedErrorImpl","message","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","len","i","hasError","thrownError","asObservable","AnonymousSubject","BehaviorSubject","Vector3Const","freeze","Vector3","Model","Object3D","[object Object]","super","boundingBox","Box3","up","copy","modelId","ids","resolve","callback","matrix","newTransform","Matrix4","fromArray","elements","oldTransform","matrixWorld","clone","decompose","position","quaternion","scale","bbTransform","multiply","invert","applyMatrix4","updateMatrixWorld","PointIconClusterer","camera","container","settings","clustersCount","_clustersCount","point","parentPosition","tmpPosition","y","z","tmpScreenPosition","project","clientWidth","clientHeight","cluster","findClosestCluster","id","positions","_clusters","PointIconCluster","push","reset","screenPosition","distance","a","Math","abs","closest","prev","prevD","currD","clusterRadius","uvs","atlasSize","badgeSize","c","iconsCount","ip","io","min","Vector2","_screenPosition","mainIcon","worldPosition","iconIds","clusteredIconId","v","createGeometryAttribute","geometry","attributeName","itemSize","arrayType","array","attribute","getIndex","getAttribute","count","updateRange","needsUpdate","BufferAttribute","setIndex","setAttribute","RaycastablePoints","Points","_camera","_container","pointSize","material","BufferGeometry","Sphere","raycaster","intersects","boundingSphere","computeBoundingSphere","sphere","radius","_getWorldSize","center","distanceTo","ray","intersectsSphere","posAttribute","attributes","l","vec3","_raycastPoint","getViewWorldSize","size","distanceSqToPoint","intersectPoint","closestPointToPoint","origin","near","far","face","object","DepthPeelingMaterial","ShaderMaterial","parameters","globalUniforms","_globalUniforms","origOpacity","uniforms","opacity","origTransparent","transparent","undefined","globalTransparent","globalOpacity","Number","blending","NormalBlending","NoBlending","WVMaterial","clipping","morphTargets","lights","state","clipIntersection","color","diffuse","WVPointsMaterial","assign","UniformsUtils","ShaderLib","points","Color","map","type","offset","params","defines","USE_MAP","USE_SIZEBUFFER","useSizeBuffer","ALPHA_FORMAT","format","AlphaFormat","vertexShader","fragmentShader","sizeAttenuation","_parameters","alphaTest","isPointsMaterial","height","viewSize","multiplyScalar","window","devicePixelRatio","image","updateTransparency","m","PointIconBatch","_renderingManager","badgeTextureAtlas","badgeAtlasSize","iconsAtlas","iconPaths","_data","_clusterer","icon","icons","createIcons","badges","createBadges","updateGeometry","refObj","clippingPlanes","getGlobalUniformsWithoutOpacity","depthTest","depthWrite","pointsObject","getCluster","iconIndex","iconPath","data","iconsGeometry","iconsPositions","Float32Array","clusterer","addPoint","posAttr","uvAttr","fillIconUVs","computeBoundingBox","badgesGeometry","badgeCount","fillBadgeAttributes","PointIconModel","_settings","ModelId","Texture","document","createElement","canvas2d","getContext","caster","batches","intersection","intersectObjects","find","result","model","childrenIds","pickPriority","createBadgeTextureAtlas","children","context2d","width","font","textAlign","textBaseline","fillStyle","beginPath","rect","fill","lineWidth","strokeStyle","stroke","fillText","toString","texture","clear","redraw","batch","clearData","batchPosition","divideScalar","batchSize","round","distanceToSquared","addIconData","isEmpty","remove","update","from","Set","includes","updatingAtlas","iconSizeInAtlas","drawImage","createImage","url","img","Image","onload","crossOrigin","src","makeEmpty","tempBox","max","union","Pass","enabled","needsSwap","renderToScreen","FullScreenQuad","setSize","render","console","OrthographicCamera","PlaneGeometry","_mesh","Mesh","defineProperty","get","set","dispose","renderer","RenderPass","scene","overrideMaterial","clearColor","clearAlpha","call","clearDepth","_oldClearColor","writeBuffer","readBuffer","oldClearAlpha","oldOverrideMaterial","oldAutoClear","autoClear","getClearColor","getClearAlpha","setClearColor","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","version","api","_api","_model","renderingManager","models","createRenderPass","eventDispatcher","Scene","pass","composer","addPassAfterSelection","pointIcon","getModel","updateIconTextureAtlas","splice"],"mappings":"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"}