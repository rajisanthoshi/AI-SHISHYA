{"version":3,"file":"dda0cbb5.mjs","sources":["../../../webgl-viewer/src/Helpers/common-utils.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../node_modules/rxjs/src/internal/config.ts","../../../../node_modules/rxjs/src/internal/Observer.ts","../../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../../node_modules/rxjs/src/internal/Subscription.ts","../../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../../node_modules/rxjs/src/internal/Observable.ts","../../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../../node_modules/rxjs/src/internal/util/canReportError.ts","../../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../../node_modules/rxjs/src/internal/Subject.ts","../../../../node_modules/rxjs/src/internal/BehaviorSubject.ts","../../../webgl-viewer/src/Model.ts","../../../webgl-viewer/src/Helpers/FrustumHelper.ts","../../src/Model/TrimbimModel.ts"],"sourcesContent":["import {Vector3} from \"three\";\n\n/**\n * A utils file common for main thread and workers.\n * NB: Be careful what you import here, as it will be added to the web worker bundle.\n * In particular, do not use THREE.js here.\n */\n\n// max size of buffer which can be indexed by 16bit integer\nexport const MAX_16BIT_SIZE = 0x10000;\n\nconst DEG_RATIO = 1 / 360;\nexport function getPerspectiveViewWorldSize(fov: number, distance: number): number {\n    return Math.tan(fov * Math.PI * DEG_RATIO) * distance;\n}\n\nexport function iterate<T>(array: T[] | T, loop: (o: T, i: number) => void): void {\n    if (Array.isArray(array)) {\n        for (let i = 0; i < array.length; i++)\n            loop(array[i], i);\n    }\n    else {\n        loop(array, 0);\n    }\n}\n\n// Remove image from RAM after they are transfered to VRAM\nexport function disposeImage(): void {\n    // @ts-ignore\n    this.image = undefined;\n}\n\nexport class Vector3Const {\n    static zero = Object.freeze(new Vector3(0, 0, 0));\n    static one = Object.freeze(new Vector3(1, 1, 1));\n    static up = Object.freeze(new Vector3(0, 0, 1));\n    static down = Object.freeze(new Vector3(0, 0, -1));\n    static forward = Object.freeze(new Vector3(0, 1, 0));\n    static back = Object.freeze(new Vector3(0, -1, 0));\n    static right = Object.freeze(new Vector3(1, 0, 0));\n    static left = Object.freeze(new Vector3(-1, 0, 0));\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export function isObject(x: any): x is Object {\n  return x !== null && typeof x === 'object';\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nconst UnsubscriptionErrorImpl = (() => {\n  function UnsubscriptionErrorImpl(this: any, errors: any[]) {\n    Error.call(this);\n    this.message = errors ?\n      `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n  }\n\n  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n  return UnsubscriptionErrorImpl;\n})();\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (this as any)._ctorUnsubscribe = true;\n      (this as any)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      // It's only possible to null _unsubscribe - to release the reference to\n      // any teardown function passed in the constructor - if the property was\n      // actually assigned in the constructor, as there are some classes that\n      // are derived from Subscriber (which derives from Subscription) that\n      // implement an _unsubscribe method as a mechanism for obtaining\n      // unsubscription notifications and some of those subscribers are\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\n      // from a prototype method to an instance property - see notifyNext in\n      // RetryWhenSubscriber.\n      if (_ctorUnsubscribe) {\n        (this as any)._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber = (() =>\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random())();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { noop } from './noop';\nimport { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   * @deprecated use new Observable() instead\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;\n  /** @deprecated Use an observer instead of an error callback */\n  subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * );\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nconst ObjectUnsubscribedErrorImpl = (() => {\n  function ObjectUnsubscribedErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n  }\n\n  ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n  return ObjectUnsubscribedErrorImpl;\n})();\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse\n   * @deprecated use new Subject() instead\n  */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import {BehaviorSubject} from \"rxjs\";\nimport {Box3, Line, Matrix4, Mesh, Object3D, Points} from \"three\";\nimport {IIntersection} from \"./Picker/IIntersection\";\nimport {Caster} from \"./Picker/Caster\";\nimport {PointerInput} from \"./InputHandler\";\nimport {SnapType} from \"./common\";\nimport {Vector3Const} from \"./Helpers/common-utils\";\n\nexport type GeometryObject3D = Mesh | Points | Line;\n\nexport interface SelectableModel extends PickableModel {\n    readonly isSelectable: true;\n    areaPick(caster: Caster, containedOnly?: boolean): Promise<IIntersection>;\n    setSelection(ids: number[]): void;\n    clearSelection(): void;\n}\n\nexport interface HoverableModel {\n    setHoveredFromEvent(event: PointerInput): void;\n}\n\nexport interface PickableModel {\n    pick(caster: Caster): Promise<IIntersection>;\n}\n\nexport interface SnappedPickableModel extends PickableModel {\n    pickSnapped(caster: Caster, snapTypes: SnapType[]): Promise<IIntersection[]>;\n}\n\nexport abstract class Model extends Object3D {\n    get modelId(): string {\n        return this.name;\n    }\n\n    protected boundingBox: BehaviorSubject<Box3>;\n\n    constructor(name: string) {\n        super();\n        super.name = name;\n        this.boundingBox = new BehaviorSubject(new Box3());\n        this.up.copy(Vector3Const.up);\n    }\n\n    getBoundingBox(ids?: number[]): Promise<Box3> {\n        return Promise.resolve(this.boundingBox.value);\n    }\n\n    subscribeToBoundingBox(callback: (box: Box3) => void): void {\n        this.boundingBox.subscribe(callback);\n    }\n\n    transform(matrix: Matrix4): void {\n        const newTransform = new Matrix4().fromArray(matrix.elements);\n        const oldTransform = this.matrixWorld.clone();\n        newTransform.decompose(this.position, this.quaternion, this.scale);\n\n        const bbTransform = newTransform.multiply(oldTransform.invert());\n        this.boundingBox.value.applyMatrix4(bbTransform);\n\n        this.updateMatrixWorld(true);\n        this.boundingBox.next(this.boundingBox.value);\n    }\n\n    isLoading(): boolean {\n        return false;\n    }\n\n    dispose(): void {};\n}\n","import {Box3, Frustum, Matrix4, Plane, Vector3} from \"three\";\n\nexport class FrustumHelper {\n    static transformFrustum(frustum: Frustum, matrix: Matrix4, out: Frustum = new Frustum()): Frustum {\n        for (let i = 0; i < out.planes.length; i++)\n            out.planes[i].copy(frustum.planes[i]).applyMatrix4(matrix);\n        return out;\n    }\n\n    static planesIntersectBoxInternal = (() => {\n        const point = new Vector3();\n\n        return (planes: Plane[], box: Box3, contain: boolean) => {\n            for (let i = 0, length = planes.length; i < length; i++) {\n                const normal = planes[i].normal;\n                point.set(\n                    (normal.x >= 0.0) !== contain ? box.max.x : box.min.x,\n                    (normal.y >= 0.0) !== contain ? box.max.y : box.min.y,\n                    (normal.z >= 0.0) !== contain ? box.max.z : box.min.z\n                );\n                if (planes[i].distanceToPoint(point) < 0)\n                    return false;\n            }\n            return true;\n        };\n    })();\n\n    static planesIntersectBox(planes: Plane[], box: Box3): boolean {\n        return FrustumHelper.planesIntersectBoxInternal(planes, box, false);\n    }\n\n    static planesContainBox(planes: Plane[], box: Box3): boolean {\n        return FrustumHelper.planesIntersectBoxInternal(planes, box, true);\n    }\n\n    public static insideNonIntersectingPlanes(point: Vector3, clipPlanes: Plane[]): boolean {\n        let insideClipPlanes = true;\n        for (const clipPlane of clipPlanes)\n            insideClipPlanes = insideClipPlanes && clipPlane.distanceToPoint(point) > 0;\n        return insideClipPlanes;\n    }\n}\n","import {\n    GeometryObject3D,\n    HoverableModel,\n    Model,\n    SelectableModel,\n    SnappedPickableModel\n} from \"@technology/webgl-viewer/dist/esnext/Model\";\nimport {\n    AggregatePropertiesMessage,\n    ICameraUpdateMessage,\n    IGetBoundingBoxesMessage,\n    IGetPropertyDefinitionsMessage,\n    IGetPropertySetNamesMessage,\n    IGetPropertyValuesMessage,\n    IGuidsToEntityIdsMessage,\n    ILoadMessage,\n    IPickMessage,\n    ITextTextureMessage,\n    ITextureMessage,\n    ITrimbimMaterialsMessage,\n    MessageType,\n    UpdateGeometryMessage\n} from \"../GeometryEngine/WorkerMessages\";\nimport {Api} from \"@technology/webgl-viewer/dist/esnext/Api\";\nimport {Box3, Color, Frustum, Matrix4, Object3D, Ray, Vector3} from \"three\";\nimport {IIntersection} from \"@technology/webgl-viewer/dist/esnext/Picker/IIntersection\";\nimport {UUID} from \"../UUID\";\nimport {Caster} from \"@technology/webgl-viewer/dist/esnext/Picker/Caster\";\nimport {TrimbimWorkerMessenger} from \"../GeometryEngine/TrimbimWorkerMessenger\";\nimport {\n    Entity,\n    HierarchyType,\n    IdentifierType,\n    IMetaMaterial,\n    Product,\n    PropertyAggregation,\n    PropertyDefinition,\n    PropertySet,\n    TrimbimGeometryType,\n    TrimbimPickPriority,\n    TrimbimSettings,\n    WorkerCamera\n} from \"../common\";\n\nimport {ModelBuilder} from \"./ModelBuilder\";\nimport {PointerInput} from \"@technology/webgl-viewer/dist/esnext/InputHandler\";\nimport {flatbuffers} from \"flatbuffers\";\nimport {ClipPlaneTool} from \"../Tools/ClipPlaneTool\";\nimport {Hit} from \"../GeometryEngine/HitPoint\";\nimport {TrimbimWorkerProtocol} from \"./TrimbimWorkerProtocol\";\nimport {SnapType} from \"@technology/webgl-viewer/dist/esnext/common\";\nimport {FrustumHelper} from \"@technology/webgl-viewer/dist/esnext/Helpers/FrustumHelper\";\n\nexport class TrimbimModel extends Model implements TrimbimWorkerProtocol, SelectableModel, HoverableModel, SnappedPickableModel {\n    private readonly _inverseTransform: Matrix4;\n\n    _batches: Map<string | number, GeometryObject3D> = new Map();\n\n    private _updatingGeometry: boolean = false;\n    private _loaded: boolean;\n\n    readonly isSelectable = true;\n\n    private transformedRay = new Ray();\n    private transformedFrustum = new Frustum();\n\n    private _clipping = true;\n    private _pauseGeometryUpdate: boolean;\n\n    get pauseGeometryUpdate(): boolean {\n        return !!this._pauseGeometryUpdate;\n    }\n\n    set pauseGeometryUpdate(value: boolean) {\n        this._pauseGeometryUpdate = value;\n        if (!value) this.updateCamera();\n    }\n\n    constructor(\n        name: string,\n        private _api: Api,\n        private _modelBuilder: ModelBuilder,\n        private _clipPlaneTool: ClipPlaneTool,\n        private _settings: TrimbimSettings,\n        protected _messenger: TrimbimWorkerMessenger,\n        private _trimbimModels: Map<string, TrimbimModel>\n    ) {\n        super(name);\n        this._inverseTransform = new Matrix4();\n    }\n\n    async load(buffer: ArrayBuffer, editing: boolean): Promise<void> {\n        await this._loadFromBuffer(this.name, buffer, editing);\n        this._loaded = true;\n        this._updatingGeometry = true;\n    }\n\n    isLoading(): boolean {\n        return !this._loaded || this._updatingGeometry || this._modelBuilder.isProcessingQueue();\n    }\n\n    set clipping(clipping: boolean) {\n        this._clipping = clipping;\n        this._modelBuilder.setModelClipping(this.modelId, clipping);\n        this._api.camera.callListeners();\n    }\n\n    async getLayers(): Promise<string[]> {\n        return await this._messenger.call(this.modelId, \"getLayers\", arguments);\n    }\n\n    async findLayersByEntities(entityIds: number[]): Promise<string[]> {\n        return await this._messenger.call(this.modelId, \"findLayersByEntities\", arguments);\n    }\n\n    async setLayerVisibility(layerName: string, visible: boolean): Promise<void> {\n        await this._messenger.call(this.modelId, \"setLayerVisibility\", arguments);\n    }\n\n    async getLayerVisibility(layerName: string): Promise<boolean> {\n        return await this._messenger.call(this.modelId, \"getLayerVisibility\", arguments);\n    }\n\n    transform(matrix: Matrix4): void {\n        super.transform(matrix);\n        this._api.renderingManager.redraw();\n        this.updateCamera();\n    }\n\n    async getBoundingBox(entityIds?: number[]): Promise<Box3> {\n        if (!entityIds)\n            return this.boundingBox.value;\n\n        const request: IGetBoundingBoxesMessage = {\n            type: MessageType.GET_BOUNDINGBOXES,\n            modelId: this.name,\n            entityIdGroups: [entityIds]\n        };\n        const box = (await this._messenger.request(request)).boundingBoxes[0];\n        return new Box3().copy(box).applyMatrix4(this.matrixWorld);\n    }\n\n    expandBoundingBox(object: Object3D): void {\n        this.boundingBox.value.expandByObject(object);\n        this.boundingBox.next(this.boundingBox.value);\n    }\n\n    async getBoundingBoxes(entityIds?: number[]): Promise<Box3[]> {\n        const boxes = await this.getUntransformedBoundingBoxes(entityIds);\n        for (const box of boxes)\n            box.applyMatrix4(this.matrixWorld);\n        return boxes;\n    }\n\n    async getUntransformedBoundingBoxes(entityIds?: number[]): Promise<Box3[]> {\n        const message: IGetBoundingBoxesMessage = {\n            type: MessageType.GET_BOUNDINGBOXES,\n            modelId: this.name,\n            entityIdGroups: entityIds ? entityIds.map(id => [id]) : undefined\n        };\n        const boxes = (await this._messenger.request(message)).boundingBoxes;\n        return boxes.map(b => new Box3().copy(b));\n    }\n\n    updateCamera = (() => {\n        const position = new Vector3();\n\n        return async (): Promise<void> => {\n            if (this.pauseGeometryUpdate) return;\n\n            this._updatingGeometry = true;\n            // nuke all unprocessed \"update finished\" actions, as we are triggering a new geometry update sequence\n            this._modelBuilder.removePendingUpdateFinishedAction(this.name);\n            this._inverseTransform.copy(this.matrixWorld).invert();\n\n            if (this._api.camera.orthoLodPosition) position.copy(this._api.camera.orthoLodPosition); // Ortho mode specific lod calculation\n            else this._api.camera.getWorldPosition(position); // VRManager places camera on the rig, so we can not use camera.position\n\n            // Recommended gpu memory usage. 200 bytes per pixel calculated using Google Maps technique for 2560x1440x1GB optimal usage\n            // Check for details https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#Estimate_a_per-pixel_VRAM_Budget\n            // Note: this is geometry memory only, textures are not taken into account\n            const gpuMemoryUsage = this._settings.gpuMemoryUsage !== undefined ? this._settings.gpuMemoryUsage :\n                screen.width * screen.height * window.devicePixelRatio * window.devicePixelRatio * 200;\n\n            const message = {\n                type: MessageType.CAMERA_UPDATE,\n                modelId: this.name,\n                camera: {\n                    frustum: FrustumHelper.transformFrustum(this._api.camera.frustum, this._inverseTransform),\n                    position: position.applyMatrix4(this._inverseTransform),\n                    fieldOfView: this._api.camera.fov,\n                    resolution: Math.max(this._api.renderingManager.clientWidth, this._api.renderingManager.clientHeight),\n                    vr: this._api.renderingManager.vr.enabled,\n                    trimbimSettings: Object.assign({gpuMemoryUsage: gpuMemoryUsage}, this._settings),\n                    clipPlanes: this._clipping ? this._clipPlaneTool.getClipPlanes().map(p => p.plane.clone().applyMatrix4(this._inverseTransform)) : undefined\n                } as WorkerCamera\n            } as ICameraUpdateMessage;\n\n            await this._messenger.request(message);\n        };\n    })();\n\n    onGeometryUpdateFinished(): void {\n        this._updatingGeometry = false;\n    }\n\n    async setSelection(entityIds: number[]): Promise<void> {\n        return await this._messenger.call(this.modelId, \"setSelection\", arguments);\n    }\n\n    private toIntersection(hit: Hit, childrenEntityIds: number[], caster: Caster): IIntersection {\n        return {\n            point: new Vector3().copy(hit.point).applyMatrix4(this.matrixWorld),\n            normal: hit.normal ? new Vector3().copy(hit.normal).transformDirection(this.matrixWorld).normalize() : undefined,\n            distance: Math.sqrt(hit.cameraDistanceSq),\n            distanceToRay: hit.distanceSqToRay !== undefined ? Math.sqrt(hit.distanceSqToRay) : undefined,\n            id: hit.entityId,\n            childrenIds: childrenEntityIds,\n            object: this,\n            model: this,\n            caster: caster,\n            pickPriority: hit.pickPriority,\n            snapGeometryType: hit.snapGeometryType,\n            snapType: hit.snapType,\n            snapLineStart: hit.snapLineStart ? new Vector3().copy(hit.snapLineStart).applyMatrix4(this.matrixWorld) : undefined,\n            snapLineEnd: hit.snapLineEnd ? new Vector3().copy(hit.snapLineEnd).applyMatrix4(this.matrixWorld) : undefined,\n        } as IIntersection\n    }\n\n    private createPickMessage(caster: Caster): IPickMessage {\n        if (!caster.frustum.intersectsBox(this.boundingBox.value))\n            return;\n\n        this._inverseTransform.copy(this.matrixWorld).invert();\n\n        const message = { type: MessageType.PICK, navigation: caster.navigation} as IPickMessage;\n        message.modelId = this.name;\n\n        if (caster.ray) {\n            this.transformedRay.copy(caster.ray).applyMatrix4(this._inverseTransform);\n            (message as IPickMessage).ray = this.transformedRay;\n        }\n        FrustumHelper.transformFrustum(caster.frustum, this._inverseTransform, this.transformedFrustum);\n        message.frustum = this.transformedFrustum;\n        return message;\n    }\n\n    async pick(caster: Caster): Promise<IIntersection> {\n        const message = this.createPickMessage(caster);\n        if (!message) return;\n        const response = await this._messenger.request(message);\n        if (response.hits && response.hits.length) {\n            // only single hit is returned for non-snapped pick\n            return this.toIntersection(response.hits[0], response.childrenEntityIds, caster);\n        }\n    }\n\n    async pickSnapped(caster: Caster, snapTypes: SnapType[]): Promise<IIntersection[]> {\n        const message = this.createPickMessage(caster);\n        if (!message) return;\n\n        message.snapTypes = snapTypes;\n        const response = await this._messenger.request(message);\n        if (response.hits) {\n            return response.hits.map(h => this.toIntersection(h, response.childrenEntityIds, caster));\n        }\n    }\n\n    private pickOnLineBusy = false;\n    async pickOnLine(entityId: number, ray: Ray): Promise<Hit> {\n        if (this.pickOnLineBusy) return;\n        this.pickOnLineBusy = true;\n\n        this._inverseTransform.copy(this.matrixWorld).invert();\n        ray.applyMatrix4(this._inverseTransform);\n\n        const hit = await this._messenger.call(this.modelId, \"pickOnLine\", arguments);\n        hit.point = new Vector3().copy(hit.point).applyMatrix4(this.matrixWorld);\n        hit.snapLineStart = new Vector3().copy(hit.snapLineStart).applyMatrix4(this.matrixWorld);\n        hit.snapLineEnd = new Vector3().copy(hit.snapLineEnd).applyMatrix4(this.matrixWorld);\n\n        this.pickOnLineBusy = false;\n        return hit;\n    }\n\n    async areaPick(caster: Caster, containedOnly: boolean): Promise<IIntersection> {\n        delete caster.ray; // only frustum should be included\n        const message = this.createPickMessage(caster);\n        if (!message) return;\n\n        message.frustumPickContainedOnly = containedOnly;\n        const response = await this._messenger.request(message);\n        return {\n            id: response.childrenEntityIds && response.childrenEntityIds.length > 0 ? response.childrenEntityIds[0] : null,\n            childrenIds: response.childrenEntityIds,\n            object: this,\n            model: this\n        } as IIntersection;\n    }\n\n    setHoveredFromEvent(event: PointerInput): void {\n        this.setHovered(event ? [event.intersection.id] : []);\n    }\n\n    async setHovered(entityIds: number[]): Promise<void> {\n        return await this._messenger.call(this.modelId, \"setHovered\", arguments);\n    }\n\n    async setVisibility(entityIds: number[], visible: boolean): Promise<void> {\n        return await this._messenger.call(this.modelId, \"setVisibility\", arguments);\n    }\n\n    async getVisibleEntityIds(visible: boolean, hierarchical?: boolean): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"getVisibleEntityIds\", arguments);\n    }\n\n    async resetVisibility(): Promise<void> {\n        return await this._messenger.call(this.modelId, \"resetVisibility\", arguments);\n    }\n\n    async setCustomMaterial(entityIds: number[], customMaterial: IMetaMaterial): Promise<void> {\n        await this._messenger.call(this.modelId, \"setCustomMaterial\", arguments);\n    }\n\n    async resetCustomMaterials(entityIds?: number[]): Promise<void> {\n        await this._messenger.call(this.modelId, \"resetCustomMaterials\", arguments);\n    }\n\n    async getCustomMaterials(entityIds?: number[]): Promise<IMetaMaterial[]> {\n        const materials = await this._messenger.call(this.modelId, \"getCustomMaterials\", arguments);\n        this.restoreColors(materials);\n        return materials;\n    }\n\n    async getCustomMaterialEntityIds(): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"getCustomMaterialEntityIds\", arguments);\n    }\n\n    async setPickPriority(entityIds: number[], pickPriority: TrimbimPickPriority): Promise<void> {\n        return await this._messenger.call(this.modelId, \"setPickPriority\", arguments);\n    }\n\n    async resetPickPriority(): Promise<void> {\n        return await this._messenger.call(this.modelId, \"resetPickPriority\", arguments);\n    }\n\n    async getEntityIdsByPickPriority(pickPriority: TrimbimPickPriority, hierarchical?: boolean): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"getEntityIdsByPickPriority\", arguments);\n    }\n\n    async getHierarchyRoots(hierarchyType?: HierarchyType): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"getHierarchyRoots\", arguments);\n    }\n\n    async getEntityIdsWithGeometry(): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"getEntityIdsWithGeometry\", arguments);\n    }\n\n    async getHierarchyParents(entityIds: number[], hierarchyType?: HierarchyType, recursive?: boolean): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"getHierarchyParents\", arguments);\n    }\n\n    async getHierarchyChildren(entityIds: number[], recursive?: boolean): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"getHierarchyChildren\", arguments);\n    }\n\n    guidsToEntityIds(guids: string[]): Promise<number[]> {\n        const request: IGuidsToEntityIdsMessage = {\n            type: MessageType.GUIDS_TO_ENTITYIDS,\n            modelId: this.name,\n            guids: guids\n        };\n\n        return this._messenger.request(request).then(message => {\n            return message.entityIds;\n        });\n    }\n\n    getPropertySetNames(): Promise<string[]> {\n        const request: IGetPropertySetNamesMessage = {\n            type: MessageType.PROPERTY_GETSETNAMES,\n            modelId: this.name,\n        };\n\n        return this._messenger.request(request).then(message => {\n            return <string[]>(<IGetPropertySetNamesMessage>message).names;\n        });\n    }\n\n    getPropertyDefinitions(setName: string): Promise<PropertyDefinition[]> {\n        const request: IGetPropertyDefinitionsMessage = {\n            type: MessageType.PROPERTY_GETPROPERTYDEFINITIONS,\n            modelId: this.name,\n            setName\n        };\n\n        return this._messenger.request(request).then(message => {\n            return <PropertyDefinition[]>(<IGetPropertyDefinitionsMessage>message).properties;\n        });\n    }\n\n    getPropertyValues(propertyName: string): Promise<Array<string | number | flatbuffers.Long>> {\n        const request: IGetPropertyValuesMessage = {\n            type: MessageType.PROPERTY_GETPROPERTYVALUES,\n            modelId: this.name,\n            propertyName\n        };\n\n        return this._messenger.request(request).then(message => {\n            return (<IGetPropertyValuesMessage>message).properties;\n        });\n    }\n\n    async aggregateProperties(entityIds: number[], aggregations: PropertyAggregation[]): Promise<PropertyAggregation[]> {\n        const message = {\n            type: MessageType.AGGREGATE_PROPERTIES,\n            modelId: this.name,\n            entityIds: entityIds,\n            aggregations: aggregations\n        } as AggregatePropertiesMessage;\n        return (await this._messenger.request(message)).aggregations;\n    }\n\n    async getEntitiesLength(): Promise<number> {\n        return await this._messenger.call(this.modelId, \"getEntitiesLength\", arguments);\n    }\n\n    async getEntities(entityIds?: number[]): Promise<Entity[]> {\n        const entities = await this._messenger.call(this.modelId, \"getEntities\", arguments);\n        for (const entity of entities) {\n            if (entity.identifierType === IdentifierType.Guid)\n                entity.identifier = new UUID({ data: (entity.identifier as any).data });\n        }\n        return entities;\n    }\n\n    async getProducts(entityIds: number[]): Promise<Product[]> {\n        return await this._messenger.call(this.modelId, \"getProducts\", arguments);\n    }\n\n    async getProperties(entityId: number): Promise<PropertySet[]> {\n        return await this._messenger.call(this.modelId, \"getProperties\", arguments);\n    }\n\n    async findEntitiesByProperty(propertyName: string | RegExp, propertyValue: string | RegExp | number): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"findEntitiesByProperty\", arguments);\n    }\n\n    async findEntitiesByGeometryType(geometryType: TrimbimGeometryType): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"findEntitiesByGeometryType\", arguments);\n    }\n\n    async findEntitiesByClass(entityClass: string): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"findEntitiesByClass\", arguments);\n    }\n\n    async findEntitiesByLayer(layerName: string): Promise<number[]> {\n        return await this._messenger.call(this.modelId, \"findEntitiesByLayer\", arguments);\n    }\n\n    updateGeometry(message: UpdateGeometryMessage): void {\n        this._modelBuilder.addToQueue(message.actions);\n\n        // avoid sending back\n        message.actions = undefined;\n    }\n\n    addMaterial(message: ITrimbimMaterialsMessage): void {\n        this.restoreColors(message.materials);\n        this._modelBuilder.addMaterials(message.modelId, message.materials);\n\n        // avoid sending back\n        message.materials = undefined;\n    }\n\n    async addTexture(message: ITextureMessage): Promise<void> {\n        await this._modelBuilder.addTexture(message);\n    }\n\n    addTextTextures(message: ITextTextureMessage): void {\n        this._modelBuilder.addTextTextures(message);\n    }\n\n    private restoreColors(materials: IMetaMaterial[]): void {\n        // restore color objects, reduced by thread messaging\n        for (const m of materials) {\n            if (m && m.color && !m.color.isColor)\n                m.color = new Color(m.color.r, m.color.g, m.color.b);\n        }\n    }\n\n    private async _loadFromBuffer(name: string, buffer: ArrayBuffer, editing: boolean): Promise<void> {\n        const geometry = {\n            type: MessageType.LOAD,\n            modelId: name,\n            buffer: buffer,\n            editing: editing\n        } as ILoadMessage;\n\n        const response = await this._messenger.request(geometry, [geometry.buffer]);\n\n        this.boundingBox.value.min.copy(response.boundingBox.min);\n        this.boundingBox.value.max.copy(response.boundingBox.max);\n        this.boundingBox.next(this.boundingBox.value);\n    }\n\n    async clearSelection(): Promise<void> {\n        await this._messenger.call(this.modelId, \"clearSelection\", arguments);\n    }\n\n    async setEntityTransform(entityId: number, transform: Matrix4): Promise<void> {\n        return await this._messenger.call(this.modelId, \"setEntityTransform\", arguments);\n    }\n\n    /**\n     * Creates a copy of model file buffer, including modifications\n     */\n    async getBuffer(): Promise<ArrayBuffer> {\n        return await this._messenger.call(this.modelId, \"getBuffer\", arguments);\n    }\n\n    async dispose(): Promise<void> {\n        this._trimbimModels.delete(this.name);\n\n        this._loaded = false;\n        await this._messenger.request({ type: MessageType.UNLOAD, modelId: this.name });\n\n        for (const [batchId, batch] of this._batches)\n            this._modelBuilder.removeBatchObject(this, batchId, batch);\n        this._modelBuilder.disposeMaterials(this.name);\n    }\n}\n"],"names":["Vector3Const","Object","freeze","Vector3","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","config","Promise","value","closed","next","x","UnsubscriptionErrorImpl","Error","errors","name","Subscription","unsubscribe","_ctorUnsubscribe","_a","_parentOrParents","isFunction","isArray","index","sub","isObject","e","add","subscription","indexOf","subscriptions","subscriptionIndex","empty","rxSubscriber","Subscriber","_super","_this","destination","destinationOrNext","syncErrorThrowable","tslib_1.__extends","error","subscriber","isStopped","_next","_error","_complete","SafeSubscriber","context","observerOrNext","complete","_context","_parentSubscriber","useDeprecatedSynchronousErrorHandling","__tryOrSetError","__tryOrUnsub","syncErrorValue","wrappedComplete","parent","syncErrorThrown","hostReportError","fns","input","Observable","subscribe","lift","operator","observable","source","sink","nextOrObserver","_subscribe","closed_1","canReportError","forEach","promiseCtor","reject","operations","length","toPromise","getPromiseCtor","ObjectUnsubscribedErrorImpl","message","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","len","i","hasError","thrownError","asObservable","AnonymousSubject","BehaviorSubject","Model","Object3D","[object Object]","super","boundingBox","Box3","up","copy","modelId","ids","resolve","callback","matrix","newTransform","Matrix4","fromArray","elements","oldTransform","matrixWorld","clone","decompose","position","quaternion","scale","bbTransform","multiply","invert","applyMatrix4","updateMatrixWorld","FrustumHelper","frustum","out","Frustum","planes","box","planesIntersectBoxInternal","point","clipPlanes","insideClipPlanes","clipPlane","distanceToPoint","contain","normal","set","max","min","y","z","_api","_modelBuilder","_clipPlaneTool","_settings","_messenger","_trimbimModels","Map","Ray","async","pauseGeometryUpdate","_updatingGeometry","removePendingUpdateFinishedAction","_inverseTransform","camera","orthoLodPosition","getWorldPosition","gpuMemoryUsage","undefined","screen","width","height","window","devicePixelRatio","type","transformFrustum","fieldOfView","fov","resolution","Math","renderingManager","clientWidth","clientHeight","vr","enabled","trimbimSettings","assign","_clipping","getClipPlanes","map","plane","request","_pauseGeometryUpdate","updateCamera","buffer","editing","_loadFromBuffer","_loaded","isProcessingQueue","clipping","setModelClipping","callListeners","call","arguments","entityIds","layerName","visible","transform","redraw","entityIdGroups","boundingBoxes","object","expandByObject","boxes","getUntransformedBoundingBoxes","id","hit","childrenEntityIds","caster","transformDirection","normalize","distance","sqrt","cameraDistanceSq","distanceToRay","distanceSqToRay","entityId","childrenIds","model","pickPriority","snapGeometryType","snapType","snapLineStart","snapLineEnd","intersectsBox","navigation","ray","transformedRay","transformedFrustum","createPickMessage","response","hits","toIntersection","snapTypes","h","pickOnLineBusy","containedOnly","frustumPickContainedOnly","event","setHovered","intersection","hierarchical","customMaterial","materials","restoreColors","hierarchyType","recursive","guids","then","names","setName","properties","propertyName","aggregations","entities","entity","identifierType","IdentifierType","Guid","identifier","UUID","data","propertyValue","geometryType","entityClass","addToQueue","actions","addMaterials","addTexture","addTextTextures","m","color","isColor","Color","r","g","geometry","delete","batchId","batch","_batches","removeBatchObject","disposeMaterials","image"],"mappings":"oFAgCaA,GACFA,OAAOC,OAAOC,OAAO,IAAIC,UAAQ,EAAG,EAAG,IACvCH,MAAMC,OAAOC,OAAO,IAAIC,UAAQ,EAAG,EAAG,IACtCH,KAAKC,OAAOC,OAAO,IAAIC,UAAQ,EAAG,EAAG,IACrCH,OAAOC,OAAOC,OAAO,IAAIC,UAAQ,EAAG,GAAI,IACxCH,UAAUC,OAAOC,OAAO,IAAIC,UAAQ,EAAG,EAAG,IAC1CH,OAAOC,OAAOC,OAAO,IAAIC,UAAQ,GAAI,EAAG,IACxCH,QAAQC,OAAOC,OAAO,IAAIC,UAAQ,EAAG,EAAG,IACxCH,OAAOC,OAAOC,OAAO,IAAIC,WAAS,EAAG,EAAG;;;;;;;;;;;;;;;ACxBnD,IAAIC,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBH,OAAOM,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUJ,EAAGC,GAAKD,EAAEG,UAAYF,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAII,KAAKJ,EAAOA,EAAEK,eAAeD,KAAIL,EAAEK,GAAKJ,EAAEI,MACpDL,EAAGC,IAGrB,SAASM,EAAUP,EAAGC,GAEzB,SAASO,IAAOC,KAAKC,YAAcV,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEW,UAAkB,OAANV,EAAaL,OAAOgB,OAAOX,IAAMO,EAAGG,UAAYV,EAAEU,UAAW,IAAIH,4CCpBnF,SAKSK,GAUPC,4DAEIC,0ICjBJC,UACAC,wCAEIJ,+KCRiBK,iECSdC,YACLC,gCAGIC,0HACJZ,KAAKa,2BACLb,mBAMA,OADFU,gDCmBAI,2BARUd,eAEFA,2BAONA,yBACGe,IACAf,KAAagB,mFAahB,IAAIJ,MACFZ,aAKF,IAAIiB,wFACJjB,KAAKO,UAGLP,KAAKkB,sBAELlB,yBACEkB,aAA4BJ,gCAEvBI,8BAEUA,qBAcfC,MACGH,6FAUHI,KACA,CAAIC,SAAJ,uBAIE,IAAIC,UACFC,kCAIEX,QACEY,sDAURZ,+BAyBgCa,gBAElC,IAAIC,oFAUEA,oFAGAA,uBAESA,iBACT,SACAA,gHAUN,IAAIR,+BAGFA,qDAIEA,6DAOoBS,oCAQxB,IAAIC,oCACFA,sEAgBF,IAAIA,yBACFA,GACA,IAAIC,oBACFA,8CAjMJC,6HCpBFC,uGCgBiCC,WAAYC,qBAwB5B,gCACAC,sBACAA,mBAAkB,EAEzBA,wBAgBRA,aAAkB,2BAGdA,EAAMC,iCAGe,CACnBD,EAAMC,2CAIJC,gBACAF,EAAKG,wCACLH,2BAGAA,EAAKG,8DAMTH,EAAKG,sBACLH,EAAMC,2CA5BZG,OAvBON,eAEU,4CACmBO,KAClC,YAAgC/B,EAAM+B,YACtCC,sIAyEExC,KAAKyC,WAAY,oEAajBzC,KAAKyC,WAAY,iCAKF1B,uBACff,cAGFA,gBAAM,mDAIW0C,wDAIAC,OAAS,YAC1B3C,KAAKmC,qDAIYS,qBACjB5C,KAAKmC,yFAML,IAAIjB,OAAwBA,wBAC5BlB,KAAKkB,sBACLlB,KAAKe,cACLf,KAAKO,QAAS,EACdP,KAAKyC,aACLzC,oCASmC6C,WAAaZ,uBAI9B,IAOdzB,uBADJ0B,sBAGA,IAAIY,EAAUZ,SACZf,aAGAX,IAA6CA,KAC7C+B,EAAQQ,QACRC,aACED,QAEE5B,GADF2B,qGAQJZ,EAAKe,WACLf,EAAKQ,QACLR,EAAKS,OAASJ,yBA3BhBD,wBA+B8B,4CAE1B,IAAIY,uFAGGlD,uGAMYuC,sCAEX,IAAAW,yBACJC,6CACFnD,KAAK2C,gCAKH3C,KAAKoD,sDAHLpD,KAAKqD,aAAarD,gEAalBmD,GACAD,EAAkBI,uEAPpBtD,mBACEmD,kDAgBN,IAAIjB,2BAEF,IAAIgB,4BACFlD,gBAEA,IAAIuD,sBAA6CX,2FAK/C5C,KAAKoD,0CAHLpD,KAAKqD,aAAaE,gIAgBtBvD,mBACEI,yDAQOF,mCAAsCsD,2HAO7CpD,EAAO+C,uCACPK,EAAOF,iBACPE,EAAOC,wBAGPC,uDASJ,IAAIR,yBACJlD,KAAKiD,cACLjD,sLClR0C,IAA1C2D,eAIAA,uBAIkBC,wDCGpBC,2BACE7D,kBACE8D,0CA4BiBC,cAAoBC,GACvC,MAAiB,aACjBC,EAAWC,YACXD,sCA4I0B,gBAC1B,IAAMD,gBAEFG,qBCzMJC,MACEA,2BAIAA,mEDqMAJ,qCAIOhE,aAAgBI,+DACrBJ,KAAKqE,qCAKPjE,yCACE+D,EAAK9B,qBACL8B,sBAA0B,EACxBA,iIAcF/D,0CACA+D,EAAKV,6DErOT,IAAIxC,gDACFqD,GAAY7B,+CFuOV8B,CAAeJ,4CAgCpBK,sBAjBC,sBAEAC,uBAIE,mDAKIC,KACEhD,kEAUR,MAAa1B,wCAsBNE,2EAqCJ,2DAEDyE,EAAkBC,oCAmBrBC,sBANC,sBAEAJ,uBAEE,wGAhTKtE,kDA6TJ2E,sGG3WEC,WACLpE,iBACAX,KAAKgF,8BACLhF,UAAY,+BAMZ,OADF+E,gDCR0CE,WAAYhD,mBAGnC,aAAmBjC,mBAASkC,UAAUgD,EAFzDhD,oCAEAI,8CAMItC,aAKFA,aAAgB,EAChB,IAAMkF,eAEFC,iBAEJnF,KAAKkF,uDAML,IAAIE,kCACFA,0BCvBoCC,WAAapD,iBAC/B,2DAAtBK,aAc8BgD,WAAarD,gBAM3C,gCAEAC,eAEAA,UAAS,EAETA,eAEAA,YAAW,8BAEXI,uDAYQpC,UAAU6D,iBAChB,8BACAmB,kBAIIhF,8BACFF,+CAIA,IAAMmF,iBACAI,IAAgBX,mBAEfY,IAAOA,wBAMZtF,+BACFF,wBAGFA,KAAKyF,UAAW,EAChBzF,KAAK0F,cACG1F,sBACR,IAAMmF,iBACAI,IAAgBX,mBAEfY,qDAMHtF,iCACFF,wBAGMA,sBACR,IAAMmF,iBACAI,IAAgBX,mBAEfY,MAAWD,iDAMdrF,UAAUa,uBACdf,KAAKyC,aACLzC,KAAKO,QAAS,yBAKVL,uCACFF,yEAQEE,oCACFF,oCAEUyF,UACVjD,wCAEUC,WACVD,uBAGAxC,yCAWIE,UAAUyF,wBACV,MAAkB,aACxB1B,iEAOqC2B,WAAU3D,mBAC3B,gCAEpBC,EAAKC,kCAFPG,oCAOE,IAAIH,mBACFA,oDAMF,IAAIA,mBACFA,KAA2BI,uDAKV,WACnB,IAAIJ,mBACFA,KAA2Ba,qIClKO6C,WAAU5D,iBAE5B,MAAMA,8CAA1BK,4JAWE,IAAIZ,6CACFA,wEAOA1B,6CAEUO,2HCNMuF,UAAcC,WAOhCC,YAAYnF,GACRoF,QACAA,MAAMpF,KAAOA,EACbb,KAAKkG,YAAc,IAAIL,EAAgB,IAAIM,QAC3CnG,KAAKoG,GAAGC,KAAKnH,EAAakH,IAV9BE,cACI,OAAOtG,KAAKa,KAYhBmF,eAAeO,GACX,OAAOlG,QAAQmG,QAAQxG,KAAKkG,YAAY5F,OAG5C0F,uBAAuBS,GACnBzG,KAAKkG,YAAYpC,UAAU2C,GAG/BT,UAAUU,GACN,MAAMC,GAAe,IAAIC,WAAUC,UAAUH,EAAOI,UAC9CC,EAAe/G,KAAKgH,YAAYC,QACtCN,EAAaO,UAAUlH,KAAKmH,SAAUnH,KAAKoH,WAAYpH,KAAKqH,OAE5D,MAAMC,EAAcX,EAAaY,SAASR,EAAaS,UACvDxH,KAAKkG,YAAY5F,MAAMmH,aAAaH,GAEpCtH,KAAK0H,mBAAkB,GACvB1H,KAAKkG,YAAY1F,KAAKR,KAAKkG,YAAY5F,OAG3C0F,YACI,OAAO,EAGXA,kBCjES2B,EACT3B,wBAAwB4B,EAAkBlB,EAAiBmB,EAAe,IAAIC,WAC1E,IAAK,IAAItC,EAAI,EAAGA,EAAIqC,EAAIE,OAAOnD,OAAQY,IACnCqC,EAAIE,OAAOvC,GAAGa,KAAKuB,EAAQG,OAAOvC,IAAIiC,aAAaf,GACvD,OAAOmB,EAqBX7B,0BAA0B+B,EAAiBC,GACvC,OAAOL,EAAcM,2BAA2BF,EAAQC,GAAK,GAGjEhC,wBAAwB+B,EAAiBC,GACrC,OAAOL,EAAcM,2BAA2BF,EAAQC,GAAK,GAG1DhC,mCAAmCkC,EAAgBC,GACtD,IAAIC,GAAmB,EACvB,IAAK,MAAMC,KAAaF,EACpBC,EAAmBA,GAAoBC,EAAUC,gBAAgBJ,GAAS,EAC9E,OAAOE,GA9BJT,6BAA6B,MAChC,MAAMO,EAAQ,IAAI7I,UAElB,MAAO,CAAC0I,EAAiBC,EAAWO,KAChC,IAAK,IAAI/C,EAAI,EAAGZ,EAASmD,EAAOnD,OAAQY,EAAIZ,EAAQY,IAAK,CACrD,MAAMgD,EAAST,EAAOvC,GAAGgD,OAMzB,GALAN,EAAMO,IACDD,EAAO/H,GAAK,IAAS8H,EAAUP,EAAIU,IAAIjI,EAAIuH,EAAIW,IAAIlI,EACnD+H,EAAOI,GAAK,IAASL,EAAUP,EAAIU,IAAIE,EAAIZ,EAAIW,IAAIC,EACnDJ,EAAOK,GAAK,IAASN,EAAUP,EAAIU,IAAIG,EAAIb,EAAIW,IAAIE,GAEpDd,EAAOvC,GAAG8C,gBAAgBJ,GAAS,EACnC,OAAO,EAEf,OAAO,IAdqB,yFC4CNpC,EAyB9BE,YACInF,EACQiI,EACAC,EACAC,EACAC,EACEC,EACFC,GAERlD,MAAMpF,GAPEb,UAAA8I,EACA9I,mBAAA+I,EACA/I,oBAAAgJ,EACAhJ,eAAAiJ,EACEjJ,gBAAAkJ,EACFlJ,oBAAAmJ,EA7BZnJ,cAAmD,IAAIoJ,IAE/CpJ,wBAA6B,EAG5BA,mBAAe,EAEhBA,oBAAiB,IAAIqJ,MACrBrJ,wBAAqB,IAAI8H,UAEzB9H,gBAAY,EAkGpBA,kBAAe,MACX,MAAMmH,EAAW,IAAI9H,UAErB,OAAOiK,UACH,GAAItJ,KAAKuJ,oBAAqB,OAE9BvJ,KAAKwJ,mBAAoB,EAEzBxJ,KAAK+I,cAAcU,kCAAkCzJ,KAAKa,MAC1Db,KAAK0J,kBAAkBrD,KAAKrG,KAAKgH,aAAaQ,SAE1CxH,KAAK8I,KAAKa,OAAOC,iBAAkBzC,EAASd,KAAKrG,KAAK8I,KAAKa,OAAOC,kBACjE5J,KAAK8I,KAAKa,OAAOE,iBAAiB1C,GAKvC,MAAM2C,OAAmDC,IAAlC/J,KAAKiJ,UAAUa,eAA+B9J,KAAKiJ,UAAUa,eAChFE,OAAOC,MAAQD,OAAOE,OAASC,OAAOC,iBAAmBD,OAAOC,iBAAmB,IAEjFpF,EAAU,CACZqF,OACA/D,QAAStG,KAAKa,KACd8I,OAAQ,CACJ/B,QAASD,EAAc2C,iBAAiBtK,KAAK8I,KAAKa,OAAO/B,QAAS5H,KAAK0J,mBACvEvC,SAAUA,EAASM,aAAazH,KAAK0J,mBACrCa,YAAavK,KAAK8I,KAAKa,OAAOa,IAC9BC,WAAYC,KAAKhC,IAAI1I,KAAK8I,KAAK6B,iBAAiBC,YAAa5K,KAAK8I,KAAK6B,iBAAiBE,cACxFC,GAAI9K,KAAK8I,KAAK6B,iBAAiBG,GAAGC,QAClCC,gBAAiB7L,OAAO8L,OAAO,CAACnB,eAAgBA,GAAiB9J,KAAKiJ,WACtEd,WAAYnI,KAAKkL,UAAYlL,KAAKgJ,eAAemC,gBAAgBC,KAAIxL,GAAKA,EAAEyL,MAAMpE,QAAQQ,aAAazH,KAAK0J,0BAAsBK,UAIpI/J,KAAKkJ,WAAWoC,QAAQtG,KAlCvB,GAwGPhF,qBAAiB,EApLrBA,KAAK0J,kBAAoB,IAAI9C,UAnBjC2C,0BACI,QAASvJ,KAAKuL,qBAGlBhC,wBAAwBjJ,GACpBN,KAAKuL,qBAAuBjL,EACvBA,GAAON,KAAKwL,eAgBrBxF,WAAWyF,EAAqBC,SACtB1L,KAAK2L,gBAAgB3L,KAAKa,KAAM4K,EAAQC,GAC9C1L,KAAK4L,SAAU,EACf5L,KAAKwJ,mBAAoB,EAG7BxD,YACI,OAAQhG,KAAK4L,SAAW5L,KAAKwJ,mBAAqBxJ,KAAK+I,cAAc8C,oBAGzEC,aAAaA,GACT9L,KAAKkL,UAAYY,EACjB9L,KAAK+I,cAAcgD,iBAAiB/L,KAAKsG,QAASwF,GAClD9L,KAAK8I,KAAKa,OAAOqC,gBAGrBhG,kBACI,aAAahG,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,YAAa4F,WAGjElG,2BAA2BmG,GACvB,aAAanM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,uBAAwB4F,WAG5ElG,yBAAyBoG,EAAmBC,SAClCrM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,qBAAsB4F,WAGnElG,yBAAyBoG,GACrB,aAAapM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,qBAAsB4F,WAG1ElG,UAAUU,GACNT,MAAMqG,UAAU5F,GAChB1G,KAAK8I,KAAK6B,iBAAiB4B,SAC3BvM,KAAKwL,eAGTxF,qBAAqBmG,GACjB,IAAKA,EACD,OAAOnM,KAAKkG,YAAY5F,MAE5B,MAAMgL,EAAoC,CACtCjB,OACA/D,QAAStG,KAAKa,KACd2L,eAAgB,CAACL,IAEfnE,SAAahI,KAAKkJ,WAAWoC,QAAQA,IAAUmB,cAAc,GACnE,OAAO,IAAItG,QAAOE,KAAK2B,GAAKP,aAAazH,KAAKgH,aAGlDhB,kBAAkB0G,GACd1M,KAAKkG,YAAY5F,MAAMqM,eAAeD,GACtC1M,KAAKkG,YAAY1F,KAAKR,KAAKkG,YAAY5F,OAG3C0F,uBAAuBmG,GACnB,MAAMS,QAAc5M,KAAK6M,8BAA8BV,GACvD,IAAK,MAAMnE,KAAO4E,EACd5E,EAAIP,aAAazH,KAAKgH,aAC1B,OAAO4F,EAGX5G,oCAAoCmG,GAChC,MAAMnH,EAAoC,CACtCqF,OACA/D,QAAStG,KAAKa,KACd2L,eAAgBL,EAAYA,EAAUf,KAAI0B,GAAM,CAACA,UAAO/C,GAG5D,aADqB/J,KAAKkJ,WAAWoC,QAAQtG,IAAUyH,cAC1CrB,KAAI5L,IAAK,IAAI2G,QAAOE,KAAK7G,KAyC1CwG,2BACIhG,KAAKwJ,mBAAoB,EAG7BxD,mBAAmBmG,GACf,aAAanM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,eAAgB4F,WAG5DlG,eAAe+G,EAAUC,EAA6BC,GAC1D,MAAO,CACH/E,OAAO,IAAI7I,WAAUgH,KAAK0G,EAAI7E,OAAOT,aAAazH,KAAKgH,aACvDwB,OAAQuE,EAAIvE,QAAS,IAAInJ,WAAUgH,KAAK0G,EAAIvE,QAAQ0E,mBAAmBlN,KAAKgH,aAAamG,iBAAcpD,EACvGqD,SAAU1C,KAAK2C,KAAKN,EAAIO,kBACxBC,mBAAuCxD,IAAxBgD,EAAIS,gBAAgC9C,KAAK2C,KAAKN,EAAIS,sBAAmBzD,EACpF+C,GAAIC,EAAIU,SACRC,YAAaV,EACbN,OAAQ1M,KACR2N,MAAO3N,KACPiN,OAAQA,EACRW,aAAcb,EAAIa,aAClBC,iBAAkBd,EAAIc,iBACtBC,SAAUf,EAAIe,SACdC,cAAehB,EAAIgB,eAAgB,IAAI1O,WAAUgH,KAAK0G,EAAIgB,eAAetG,aAAazH,KAAKgH,kBAAe+C,EAC1GiE,YAAajB,EAAIiB,aAAc,IAAI3O,WAAUgH,KAAK0G,EAAIiB,aAAavG,aAAazH,KAAKgH,kBAAe+C,GAIpG/D,kBAAkBiH,GACtB,IAAKA,EAAOrF,QAAQqG,cAAcjO,KAAKkG,YAAY5F,OAC/C,OAEJN,KAAK0J,kBAAkBrD,KAAKrG,KAAKgH,aAAaQ,SAE9C,MAAMxC,EAAU,CAAEqF,OAAwB6D,WAAYjB,EAAOiB,YAS7D,OARAlJ,EAAQsB,QAAUtG,KAAKa,KAEnBoM,EAAOkB,MACPnO,KAAKoO,eAAe/H,KAAK4G,EAAOkB,KAAK1G,aAAazH,KAAK0J,mBACtD1E,EAAyBmJ,IAAMnO,KAAKoO,gBAEzCzG,EAAc2C,iBAAiB2C,EAAOrF,QAAS5H,KAAK0J,kBAAmB1J,KAAKqO,oBAC5ErJ,EAAQ4C,QAAU5H,KAAKqO,mBAChBrJ,EAGXgB,WAAWiH,GACP,MAAMjI,EAAUhF,KAAKsO,kBAAkBrB,GACvC,IAAKjI,EAAS,OACd,MAAMuJ,QAAiBvO,KAAKkJ,WAAWoC,QAAQtG,GAC/C,OAAIuJ,EAASC,MAAQD,EAASC,KAAK5J,OAExB5E,KAAKyO,eAAeF,EAASC,KAAK,GAAID,EAASvB,kBAAmBC,QAF7E,EAMJjH,kBAAkBiH,EAAgByB,GAC9B,MAAM1J,EAAUhF,KAAKsO,kBAAkBrB,GACvC,IAAKjI,EAAS,OAEdA,EAAQ0J,UAAYA,EACpB,MAAMH,QAAiBvO,KAAKkJ,WAAWoC,QAAQtG,GAC/C,OAAIuJ,EAASC,KACFD,EAASC,KAAKpD,KAAIuD,GAAK3O,KAAKyO,eAAeE,EAAGJ,EAASvB,kBAAmBC,UADrF,EAMJjH,iBAAiByH,EAAkBU,GAC/B,GAAInO,KAAK4O,eAAgB,OACzB5O,KAAK4O,gBAAiB,EAEtB5O,KAAK0J,kBAAkBrD,KAAKrG,KAAKgH,aAAaQ,SAC9C2G,EAAI1G,aAAazH,KAAK0J,mBAEtB,MAAMqD,QAAY/M,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,aAAc4F,WAMnE,OALAa,EAAI7E,OAAQ,IAAI7I,WAAUgH,KAAK0G,EAAI7E,OAAOT,aAAazH,KAAKgH,aAC5D+F,EAAIgB,eAAgB,IAAI1O,WAAUgH,KAAK0G,EAAIgB,eAAetG,aAAazH,KAAKgH,aAC5E+F,EAAIiB,aAAc,IAAI3O,WAAUgH,KAAK0G,EAAIiB,aAAavG,aAAazH,KAAKgH,aAExEhH,KAAK4O,gBAAiB,EACf7B,EAGX/G,eAAeiH,EAAgB4B,UACpB5B,EAAOkB,IACd,MAAMnJ,EAAUhF,KAAKsO,kBAAkBrB,GACvC,IAAKjI,EAAS,OAEdA,EAAQ8J,yBAA2BD,EACnC,MAAMN,QAAiBvO,KAAKkJ,WAAWoC,QAAQtG,GAC/C,MAAO,CACH8H,GAAIyB,EAASvB,mBAAqBuB,EAASvB,kBAAkBpI,OAAS,EAAI2J,EAASvB,kBAAkB,GAAK,KAC1GU,YAAaa,EAASvB,kBACtBN,OAAQ1M,KACR2N,MAAO3N,MAIfgG,oBAAoB+I,GAChB/O,KAAKgP,WAAWD,EAAQ,CAACA,EAAME,aAAanC,IAAM,IAGtD9G,iBAAiBmG,GACb,aAAanM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,aAAc4F,WAGlElG,oBAAoBmG,EAAqBE,GACrC,aAAarM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,gBAAiB4F,WAGrElG,0BAA0BqG,EAAkB6C,GACxC,aAAalP,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,sBAAuB4F,WAG3ElG,wBACI,aAAahG,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,kBAAmB4F,WAGvElG,wBAAwBmG,EAAqBgD,SACnCnP,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,oBAAqB4F,WAGlElG,2BAA2BmG,SACjBnM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,uBAAwB4F,WAGrElG,yBAAyBmG,GACrB,MAAMiD,QAAkBpP,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,qBAAsB4F,WAEjF,OADAlM,KAAKqP,cAAcD,GACZA,EAGXpJ,mCACI,aAAahG,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,6BAA8B4F,WAGlFlG,sBAAsBmG,EAAqByB,GACvC,aAAa5N,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,kBAAmB4F,WAGvElG,0BACI,aAAahG,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,oBAAqB4F,WAGzElG,iCAAiC4H,EAAmCsB,GAChE,aAAalP,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,6BAA8B4F,WAGlFlG,wBAAwBsJ,GACpB,aAAatP,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,oBAAqB4F,WAGzElG,iCACI,aAAahG,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,2BAA4B4F,WAGhFlG,0BAA0BmG,EAAqBmD,EAA+BC,GAC1E,aAAavP,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,sBAAuB4F,WAG3ElG,2BAA2BmG,EAAqBoD,GAC5C,aAAavP,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,uBAAwB4F,WAG5ElG,iBAAiBwJ,GACb,MAAMlE,EAAoC,CACtCjB,QACA/D,QAAStG,KAAKa,KACd2O,MAAOA,GAGX,OAAOxP,KAAKkJ,WAAWoC,QAAQA,GAASmE,MAAKzK,GAClCA,EAAQmH,YAIvBnG,sBACI,MAAMsF,EAAuC,CACzCjB,QACA/D,QAAStG,KAAKa,MAGlB,OAAOb,KAAKkJ,WAAWoC,QAAQA,GAASmE,MAAKzK,GACMA,EAAS0K,QAIhE1J,uBAAuB2J,GACnB,MAAMrE,EAA0C,CAC5CjB,QACA/D,QAAStG,KAAKa,KACd8O,QAAAA,GAGJ,OAAO3P,KAAKkJ,WAAWoC,QAAQA,GAASmE,MAAKzK,GACqBA,EAAS4K,aAI/E5J,kBAAkB6J,GACd,MAAMvE,EAAqC,CACvCjB,QACA/D,QAAStG,KAAKa,KACdgP,aAAAA,GAGJ,OAAO7P,KAAKkJ,WAAWoC,QAAQA,GAASmE,MAAKzK,GACNA,EAAS4K,aAIpD5J,0BAA0BmG,EAAqB2D,GAC3C,MAAM9K,EAAU,CACZqF,QACA/D,QAAStG,KAAKa,KACdsL,UAAWA,EACX2D,aAAcA,GAElB,aAAc9P,KAAKkJ,WAAWoC,QAAQtG,IAAU8K,aAGpD9J,0BACI,aAAahG,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,oBAAqB4F,WAGzElG,kBAAkBmG,GACd,MAAM4D,QAAiB/P,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,cAAe4F,WACzE,IAAK,MAAM8D,KAAUD,EACbC,EAAOC,iBAAmBC,iBAAeC,OACzCH,EAAOI,WAAa,IAAIC,OAAK,CAAEC,KAAON,EAAOI,WAAmBE,QAExE,OAAOP,EAGX/J,kBAAkBmG,GACd,aAAanM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,cAAe4F,WAGnElG,oBAAoByH,GAChB,aAAazN,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,gBAAiB4F,WAGrElG,6BAA6B6J,EAA+BU,GACxD,aAAavQ,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,yBAA0B4F,WAG9ElG,iCAAiCwK,GAC7B,aAAaxQ,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,6BAA8B4F,WAGlFlG,0BAA0ByK,GACtB,aAAazQ,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,sBAAuB4F,WAG3ElG,0BAA0BoG,GACtB,aAAapM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,sBAAuB4F,WAG3ElG,eAAehB,GACXhF,KAAK+I,cAAc2H,WAAW1L,EAAQ2L,SAGtC3L,EAAQ2L,aAAU5G,EAGtB/D,YAAYhB,GACRhF,KAAKqP,cAAcrK,EAAQoK,WAC3BpP,KAAK+I,cAAc6H,aAAa5L,EAAQsB,QAAStB,EAAQoK,WAGzDpK,EAAQoK,eAAYrF,EAGxB/D,iBAAiBhB,SACPhF,KAAK+I,cAAc8H,WAAW7L,GAGxCgB,gBAAgBhB,GACZhF,KAAK+I,cAAc+H,gBAAgB9L,GAG/BgB,cAAcoJ,GAElB,IAAK,MAAM2B,KAAK3B,EACR2B,GAAKA,EAAEC,QAAUD,EAAEC,MAAMC,UACzBF,EAAEC,MAAQ,IAAIE,QAAMH,EAAEC,MAAMG,EAAGJ,EAAEC,MAAMI,EAAGL,EAAEC,MAAMxR,IAItDwG,sBAAsBnF,EAAc4K,EAAqBC,GAC7D,MAAM2F,EAAW,CACbhH,OACA/D,QAASzF,EACT4K,OAAQA,EACRC,QAASA,GAGP6C,QAAiBvO,KAAKkJ,WAAWoC,QAAQ+F,EAAU,CAACA,EAAS5F,SAEnEzL,KAAKkG,YAAY5F,MAAMqI,IAAItC,KAAKkI,EAASrI,YAAYyC,KACrD3I,KAAKkG,YAAY5F,MAAMoI,IAAIrC,KAAKkI,EAASrI,YAAYwC,KACrD1I,KAAKkG,YAAY1F,KAAKR,KAAKkG,YAAY5F,OAG3C0F,6BACUhG,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,iBAAkB4F,WAG/DlG,yBAAyByH,EAAkBnB,GACvC,aAAatM,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,qBAAsB4F,WAM1ElG,kBACI,aAAahG,KAAKkJ,WAAW+C,KAAKjM,KAAKsG,QAAS,YAAa4F,WAGjElG,gBACIhG,KAAKmJ,eAAemI,OAAOtR,KAAKa,MAEhCb,KAAK4L,SAAU,QACT5L,KAAKkJ,WAAWoC,QAAQ,CAAEjB,OAA0B/D,QAAStG,KAAKa,OAExE,IAAK,MAAO0Q,EAASC,KAAUxR,KAAKyR,SAChCzR,KAAK+I,cAAc2I,kBAAkB1R,KAAMuR,EAASC,GACxDxR,KAAK+I,cAAc4I,iBAAiB3R,KAAKa,iEnBpf7Cb,KAAK4R,WAAQ7H"}