'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-77fbe095.js');
const iconChevronUpThick = require('./icon-chevron-up-thick-11476cb6.js');
const IconMap = require('./IconMap-6beae5b8.js');
require('./icon-upload-cloud-bbd28597.js');
require('./icon-check-28f05d54.js');
require('./icon-info-9b412425.js');
require('./icon-chevron-down-thick-0b9e8fcf.js');
require('./icon-chevron-right-thick-fbe0222c.js');
require('./icon-close-394815fc.js');
require('./icon-help-e043cd22.js');
require('./icon-indeterminate-4000397d.js');
require('./icon-remove-8569cbbd.js');
require('./icon-search-780e6dd3.js');
require('./icon-chevron-left-thick-5835e464.js');
require('./icon-visibility-off-4d0bd823.js');

class ModusDataTableUtilities {
  static convertToTColumns(columns) {
    return columns === null || columns === void 0 ? void 0 : columns.map((column) => {
      var _a, _b, _c, _d, _e, _f, _g;
      return {
        align: (_a = column.align) !== null && _a !== void 0 ? _a : 'left',
        display: (_b = column.display) !== null && _b !== void 0 ? _b : column,
        id: (_e = (_c = column.id) !== null && _c !== void 0 ? _c : (_d = column.display) === null || _d === void 0 ? void 0 : _d.toLocaleLowerCase()) !== null && _e !== void 0 ? _e : column.toLocaleLowerCase(),
        readonly: (_f = column.readonly) !== null && _f !== void 0 ? _f : false,
        width: (_g = column.width) !== null && _g !== void 0 ? _g : '',
      };
    });
  }
  static convertToTRows(data, columns) {
    if ((data === null || data === void 0 ? void 0 : data.length) && !Array.isArray(data[0])) {
      return data;
    }
    return data === null || data === void 0 ? void 0 : data.map((row) => {
      var _a, _b;
      const tRows = {
        _id: (_a = row._id) !== null && _a !== void 0 ? _a : '',
        _selected: (_b = row._selected) !== null && _b !== void 0 ? _b : false,
      };
      row.forEach((cell, rowIndex) => {
        tRows[columns[rowIndex].id] = cell;
      });
      return tRows;
    });
  }
  static sortData(data, columnId, direction) {
    const dataCopy = [...data];
    if (direction === 'asc') {
      return dataCopy.sort((row1, row2) => {
        if (row1[columnId]['_type'] === 'badge') {
          return row1[columnId].text > row2[columnId].text
            ? 1
            : -1;
        }
        if (row1[columnId]['_type'] === 'link') {
          return row1[columnId].display > row2[columnId].display
            ? 1
            : -1;
        }
        return row1[columnId] > row2[columnId] ? 1 : -1;
      });
    }
    else {
      return dataCopy.sort((row1, row2) => {
        if (row1[columnId]['_type'] === 'badge') {
          return row1[columnId].text > row2[columnId].text
            ? -1
            : 1;
        }
        if (row1[columnId]['_type'] === 'link') {
          return row1[columnId].display > row2[columnId].display
            ? -1
            : 1;
        }
        return row1[columnId] > row2[columnId] ? -1 : 1;
      });
    }
  }
}

// eslint-disable-next-line
function convertToSingleSpaceTitleCase(title) {
  return title === null || title === void 0 ? void 0 : title.replace(/\w\S*/g, (word) => {
    return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();
  }).replace(/\s+/g, ' ');
}
const ModusDataTableHeader = (props) => {
  const sortIcon = props.sortState.direction !== 'none' ? (index.h("modus-tooltip", { position: "bottom", text: `${props.sortState.direction === 'asc' ? 'Sort descending' : 'Remove sort'}` },
    index.h("div", { class: "icon-container" },
      index.h("div", { class: "sort-icon" }, props.sortState.direction === 'asc' ? index.h(iconChevronUpThick.IconSortAZ, { size: '16' }) : index.h(iconChevronUpThick.IconSortZA, { size: '16' }))))) : null;
  const sortIconPlaceholder = index.h("div", { style: { width: '16px' } });
  return (index.h("th", { class: `${props.sortOptions.canSort ? 'can-sort' : ''}`, onClick: () => props.onColumnHeaderClick(props.column.id) },
    index.h("div", { class: `column-header align-${props.column.align}` },
      props.column.align === 'right' && props.sortState.columnId !== props.column.id && sortIconPlaceholder,
      props.column.align === 'right' &&
        props.sortState.columnId === props.column.id &&
        props.sortState.direction === 'none' &&
        sortIconPlaceholder,
      props.column.align === 'right' && props.sortState.columnId === props.column.id && sortIcon,
      index.h("div", null, convertToSingleSpaceTitleCase(props.column.display)),
      props.column.align === 'left' && props.sortState.columnId === props.column.id && sortIcon,
      props.column.align === 'center' && props.sortState.columnId === props.column.id && (index.h("div", { style: { position: 'relative' } },
        index.h("div", { style: { display: 'flex', justifyContent: 'flex-end', position: 'absolute' } }, sortIcon))))));
};

// eslint-disable-next-line
const ModusDataTableCellLinkPart = (props) => {
  return (index.h("div", { class: "cell-link", onClick: () => props.onLinkClick(props.link) }, props.link.display));
};

// eslint-disable-next-line
const ModusDataTableCellBadgePart = (props) => {
  return (index.h("div", { class: "cell-badge" },
    index.h("modus-badge", { color: props.badge.color, type: props.badge.type }, props.badge.text)));
};

// eslint-disable-next-line
const ModusDataTableRowActionDropdown = (props) => {
  return (index.h("modus-dropdown", { "toggle-element-id": `dropdownToggle-${props.rowId}`, "animate-list": props.animateDropdown, customPlacement: { left: -194 } },
    index.h("div", { class: "row-action", id: `dropdownToggle-${props.rowId}`, slot: "dropdownToggle" },
      index.h(IconMap.IconMap, { icon: "vertical-ellipsis", size: "24" })),
    index.h("div", { slot: "dropdownList" },
      index.h("div", { class: "list-container" },
        index.h("div", { class: "items-container" }, props.actions.map((action) => (index.h("div", { class: "action-item", onClick: () => props.onRowActionClick(action._id, props.rowId) },
          index.h("div", { class: "action-item-content" },
            action.display.icon && index.h(IconMap.IconMap, { icon: action.display.icon, size: '16' }),
            index.h("div", { class: "display-text" }, action.display.text))))))))));
};

const modusDataTableCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");table{border:0.0625rem var(--modus-table-border-color, #b7b9c3) solid;border-collapse:collapse;width:100%}table th{background-color:var(--modus-table-header-bg, #f1f1f6);border:0.0625rem var(--modus-table-header-border-color, #b7b9c3) solid;color:var(--modus-table-header-color, #464b52);font-size:0.875rem;font-weight:600;min-height:3rem}table th.can-sort{cursor:pointer}table th .column-header{display:flex;flex-direction:row;justify-content:center;min-height:1.25rem;padding:0 0.5rem}table th .column-header.align-left,table th .column-header.align-right{justify-content:space-between}table th .column-header.align-center{justify-content:center}table th .column-header .icon-container{align-items:center;display:flex;height:1rem;justify-content:center}table th .column-header .icon-container .sort-icon{border-radius:0.25rem;display:flex;padding:0.25rem}table th .column-header .icon-container .sort-icon:hover{background-color:var(--modus-btn-icon-only-dark-hover-bg, #e0e1e9)}table th .column-header .icon-container .sort-icon:hover svg path{fill:var(--modus-btn-icon-only-dark-hover-color, #353a40)}table th .column-header .icon-container .sort-icon:active{background-color:var(--modus-btn-icon-only-dark-active-bg, #cbcdd6)}table th .column-header .icon-container .sort-icon:active svg path{fill:var(--modus-btn-icon-only-dark-active-color, #2b2a37)}table th .column-header .icon-container .sort-icon svg path{fill:var(--modus-btn-icon-only-dark-color, #252a2e)}table tr{color:var(--modus-table-color, #464b52);font-size:0.875rem;height:3rem}table tr td{background-color:var(--modus-table-bg, #fff);border:0.0625rem var(--modus-table-border-color, #b7b9c3) solid;padding:0 0.5rem}table tr td.align-center{text-align:center}table tr td.align-center div{display:flex;height:100%;justify-content:center;width:100%}table tr td.align-left{text-align:left}table tr td.align-right{text-align:right}table tr td.readonly{background-color:var(--modus-table-readonly-bg, #e0e1e9);color:var(--modus-table-readonly-color, #464b52)}table tr td.selected{background-color:var(--modus-table-selected-bg, #dcedf9)}table tr td .cell-link{color:var(--modus-link-color, #217cbb);cursor:pointer;display:inline-block;font-weight:600}table tr td .cell-link:hover{text-decoration:underline}table tr td .cell-badge{align-items:center;display:flex;justify-content:center}table.borderless{border:none !important}table.cell-borderless th,table.cell-borderless td{border:none !important}table.row-stripe tr{border-bottom:0.0625rem var(--modus-table-border-color, #b7b9c3) solid}table.size-small th,table.size-small tr{height:2rem}modus-dropdown .row-action{border-radius:50%;cursor:pointer;padding:0.125rem;transition:background-color 0.15s ease-in-out}modus-dropdown .row-action svg{fill:var(--modus-btn-icon-only-dark-color, #252a2e)}modus-dropdown .row-action:hover{background-color:var(--modus-btn-icon-only-dark-hover-bg, #e0e1e9)}modus-dropdown .row-action:hover svg path{fill:var(--modus-btn-icon-only-dark-hover-color, #353a40)}modus-dropdown .row-action:active{background-color:var(--modus-btn-icon-only-dark-active-bg, #cbcdd6)}modus-dropdown .row-action:active svg path{fill:var(--modus-btn-icon-only-dark-active-color, #2b2a37)}modus-dropdown .list-container{position:relative;top:-6px}modus-dropdown .list-container .items-container{display:inline-block;position:sticky;width:200px}modus-dropdown .list-container .items-container .action-item{height:1.5rem;padding:0.5rem;text-align:left;user-select:none;width:200px}modus-dropdown .list-container .items-container .action-item .action-item-content{align-items:center;background-color:var(--modus-list-item-bg, #fff);border:0.0625rem solid var(--modus-list-item-border-color, #e0e1e9);color:var(--modus-list-item-color, #252a2e);display:flex;height:1.5rem;justify-content:flex-start;overflow:hidden;padding:0.5rem 1rem}modus-dropdown .list-container .items-container .action-item .action-item-content svg{margin-right:0.5rem}modus-dropdown .list-container .items-container .action-item .action-item-content svg path{fill:var(--modus-btn-icon-only-dark-color, #252a2e)}modus-dropdown .list-container .items-container .action-item .action-item-content .display-text{display:block;font-size:1rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%}modus-dropdown .list-container .items-container .action-item:hover .action-item-content{background-color:var(--modus-list-item-hover-bg, #e0e1e9)}";

const ModusDataTable = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.cellLinkClick = index.createEvent(this, "cellLinkClick", 7);
    this.rowDoubleClick = index.createEvent(this, "rowDoubleClick", 7);
    this.selection = index.createEvent(this, "selection", 7);
    this.sort = index.createEvent(this, "sort", 7);
    this.rowActionClick = index.createEvent(this, "rowActionClick", 7);
    this.classBySize = new Map([
      ['small', 'size-small'],
      ['large', 'size-large'],
    ]);
    this.columns = undefined;
    this.data = undefined;
    this.displayOptions = {
      animateRowActionsDropdown: false,
      borderless: true,
      cellBorderless: true,
      rowStripe: false,
      size: 'large',
    };
    this.rowActions = [];
    this.selectionOptions = {
      canSelect: false,
      checkboxSelection: false,
    };
    this.sortOptions = {
      canSort: false,
      serverSide: false,
    };
    this.allSelected = false;
    this.sortState = {
      columnId: '',
      direction: 'none',
    };
  }
  dataChanged(_, oldValue) {
    var _a;
    this.originalData = (_a = this.originalData) !== null && _a !== void 0 ? _a : ModusDataTableUtilities.convertToTRows(oldValue, this.columns);
  }
  componentWillLoad() {
    this.convertColumnsAndRows();
    this.updateAllSelected();
  }
  componentDidLoad() {
    this.originalData = ModusDataTableUtilities.convertToTRows(this.data, this.columns);
  }
  componentWillUpdate() {
    this.convertColumnsAndRows();
  }
  convertColumnsAndRows() {
    this.columns = ModusDataTableUtilities.convertToTColumns(this.columns);
    this.data = ModusDataTableUtilities.convertToTRows(this.data, this.columns);
  }
  emitSelection() {
    this.selection.emit(this.data.filter((row) => row._selected).map((row) => row._id));
  }
  handleCheckboxClick(rowId) {
    this.data = this.data.map((row) => {
      return Object.assign(Object.assign({}, row), { _selected: row._id === rowId ? !row._selected : row._selected });
    });
    this.updateAllSelected();
    this.emitSelection();
  }
  handleColumnHeaderClick(columnId) {
    if (!this.sortOptions.canSort) {
      return;
    }
    if (columnId === this.sortState.columnId) {
      this.sortState = Object.assign(Object.assign({}, this.sortState), { direction: this.sortState.direction === 'asc' ? 'desc' : this.sortState.direction === 'desc' ? 'none' : 'asc' });
    }
    else {
      this.sortState = Object.assign(Object.assign({}, this.sortState), { direction: 'asc', columnId: columnId });
    }
    this.sort.emit({
      columnId: this.sortState.columnId,
      direction: this.sortState.direction,
    });
    if (!this.sortOptions.serverSide) {
      this.data =
        this.sortState.direction === 'none'
          ? this.originalData.map((originalRow) => {
            return Object.assign(Object.assign({}, originalRow), { _selected: this.data.find((dataRow) => dataRow._id === originalRow._id)._selected });
          })
          : ModusDataTableUtilities.sortData(this.data, this.sortState.columnId, this.sortState.direction);
      this.updateAllSelected();
    }
  }
  handleHeaderCheckboxClick(selectAll) {
    this.data = this.data.map((row) => {
      return Object.assign(Object.assign({}, row), { _selected: selectAll });
    });
    this.emitSelection();
  }
  handleRowClick(rowId) {
    if (!this.selectionOptions.canSelect || this.selectionOptions.checkboxSelection) {
      return;
    }
    this.data = this.data.map((row) => {
      return Object.assign(Object.assign({}, row), { _selected: row._id === rowId ? !row._selected : row._selected });
    });
    this.emitSelection();
  }
  handleRowDoubleClick(rowId) {
    this.rowDoubleClick.emit(rowId);
  }
  updateAllSelected() {
    var _a;
    this.allSelected = (_a = this.data) === null || _a === void 0 ? void 0 : _a.every((row) => row._selected);
  }
  render() {
    var _a, _b, _c;
    const className = `
      ${this.displayOptions.borderless ? 'borderless' : ''}
      ${this.displayOptions.cellBorderless ? 'cell-borderless' : ''}
      ${this.displayOptions.rowStripe ? 'row-stripe' : ''}
      ${this.classBySize.get(this.displayOptions.size)}
    `;
    return (index.h("table", { class: className }, index.h("colgroup", null, this.selectionOptions.canSelect && this.selectionOptions.checkboxSelection && index.h("col", { style: { width: '34px' } }), (_a = this.columns) === null || _a === void 0 ? void 0 :
      _a.map((column) => index.h("col", { style: { width: column.width } })), !!this.rowActions.length && index.h("col", { style: { width: '34px' } })), index.h("thead", null, index.h("tr", null, this.selectionOptions.canSelect && this.selectionOptions.checkboxSelection && (index.h("th", null, index.h("div", { class: "column-header align-center" }, index.h("modus-checkbox", { checked: this.allSelected, onCheckboxClick: (e) => this.handleHeaderCheckboxClick(e.detail) })))), (_b = this.columns) === null || _b === void 0 ? void 0 :
      _b.map((column) => (index.h(ModusDataTableHeader, { column: column, onColumnHeaderClick: (id) => this.handleColumnHeaderClick(id), sortOptions: this.sortOptions, sortState: this.sortState }))), !!this.rowActions.length && index.h("th", null))), index.h("tbody", null, (_c = this.data) === null || _c === void 0 ? void 0 : _c.map((row) => {
      var _a;
      return (index.h("tr", { onClick: () => this.handleRowClick(row._id), onDblClick: () => this.handleRowDoubleClick(row._id) }, this.selectionOptions.canSelect && this.selectionOptions.checkboxSelection && (index.h("td", { class: `align-center ${row._selected ? 'selected' : ''}`, onClick: (e) => e.stopPropagation(), onDblClick: (e) => e.stopPropagation() }, index.h("div", null, index.h("modus-checkbox", { checked: row._selected, onCheckboxClick: () => this.handleCheckboxClick(row._id) })))), (_a = this.columns) === null || _a === void 0 ? void 0 :
        _a.map((column) => {
          var _a, _b, _c, _d;
          return (index.h("td", { class: `align-${column.align} ${column.readonly ? 'readonly' : ''} ${row._selected ? 'selected' : ''}` }, ((_a = row[column.id]) === null || _a === void 0 ? void 0 : _a._type) === 'link' && (index.h(ModusDataTableCellLinkPart, { link: row[column.id], onLinkClick: () => this.cellLinkClick.emit(row[column.id]) })), ((_b = row[column.id]) === null || _b === void 0 ? void 0 : _b._type) === 'badge' && index.h(ModusDataTableCellBadgePart, { badge: row[column.id] }), !((_c = row[column.id]) === null || _c === void 0 ? void 0 : _c._type) && ((_d = row[column.id]) === null || _d === void 0 ? void 0 : _d.toString())));
        }), !!this.rowActions.length && (index.h("td", { class: `align-center ${row._selected ? 'selected' : ''}`, onClick: (e) => e.stopPropagation(), onDblClick: (e) => e.stopPropagation() }, index.h(ModusDataTableRowActionDropdown, { actions: this.rowActions, animateDropdown: this.displayOptions.animateRowActionsDropdown, onRowActionClick: (actionId, rowId) => this.rowActionClick.emit({ actionId, rowId }), rowId: row._id })))));
    }))));
  }
  static get watchers() { return {
    "data": ["dataChanged"]
  }; }
};
ModusDataTable.style = modusDataTableCss;

exports.modus_data_table = ModusDataTable;
