'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-77fbe095.js');
const iconCheck = require('./icon-check-28f05d54.js');

const modusListItemCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");li{align-items:center;background-color:var(--modus-list-item-bg, #fff);border:1px solid var(--modus-list-item-border-color, #e0e1e9);color:var(--modus-list-item-color, #252a2e);display:flex;fill:var(--modus-list-item-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:1rem;min-height:2.375rem;padding:0 1rem}li .slot{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}li .icon-check{margin-left:auto}li:hover:not(.disabled){background-color:var(--modus-list-item-hover-bg, #e0e1e9);border:1px solid var(--modus-list-item-border-color, #e0e1e9);color:var(--modus-list-item-color, #252a2e);fill:var(--modus-list-item-color, #252a2e)}li.small{font-size:0.75rem;min-height:1.875rem}li.large{min-height:2.875rem}li.disabled{color:var(--modus-list-item-disabled-color, #b7b9c3);fill:var(--modus-list-item-disabled-color, #b7b9c3)}li.selected{background-color:var(--modus-list-item-selected-bg, #dcedf9);border:1px solid var(--modus-list-item-selected-border-color, #dcedf9);color:var(--modus-list-item-color, #252a2e);fill:var(--modus-list-item-color, #252a2e)}";

const ModusListItem = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.itemClick = index.createEvent(this, "itemClick", 7);
    this.classBySize = new Map([
      ['condensed', 'small'],
      ['standard', 'standard'],
      ['large', 'large'],
    ]);
    this.disabled = undefined;
    this.selected = undefined;
    this.size = 'standard';
    this.type = 'standard';
  }
  render() {
    const containerClass = `${this.classBySize.get(this.size)} ${this.disabled ? 'disabled' : ''} ${this.selected ? 'selected' : ''}`;
    const iconSize = this.size === 'condensed' ? '18' : '22';
    return (index.h("li", { class: containerClass, onClick: () => (!this.disabled ? this.itemClick.emit() : null) }, index.h("span", { class: "slot" }, index.h("slot", null)), this.selected && index.h(iconCheck.IconCheck, { size: iconSize })));
  }
};
ModusListItem.style = modusListItemCss;

exports.modus_list_item = ModusListItem;
