'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-77fbe095.js');
const iconChevronDownThick = require('./icon-chevron-down-thick-0b9e8fcf.js');

const modusAccordionItemCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.accordion-item{background-color:var(--modus-accordion-item-bg, #fff);border-bottom:0.0625rem solid var(--modus-accordion-item-border-color, #cbcdd6);color:var(--modus-accordion-item-color, #252a2e);display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}.accordion-item .header{align-items:center;cursor:pointer;display:inline-flex;font-size:1rem;font-weight:600;height:48px}.accordion-item .header.disabled{cursor:auto;opacity:0.4}.accordion-item .header.expanded{color:var(--modus-accordion-item-header-expand-color, #252a2e)}.accordion-item .header:hover:not(.disabled){background-color:var(--modus-accordion-item-header-hover-bg, #e0e1e9)}.accordion-item .header.small{font-size:0.875rem;height:32px}.accordion-item .header .title{padding-left:0.25rem}.accordion-item .header .chevron-container{align-items:center;display:flex;margin-left:auto;transition:transform 0.2s ease-in-out}.accordion-item .header .chevron-container.reverse{transform:rotate(-180deg)}.accordion-item .header .chevron-container .icon-chevron-up-thick path,.accordion-item .header .chevron-container .icon-chevron-down-thick path{fill:var(--modus-chevron-color, #6a6e79)}.accordion-item .body{overflow:hidden}.accordion-item .body .body-content{font-size:0.875rem;padding:1rem 0.5rem}.accordion-item .body.collapse:not(.show){display:none}.accordion-item .body.collapsing{height:0;position:relative;transition:all 0.35s ease-out}@media (prefers-reduced-motion: reduce){.accordion-item .body.collapsing{transition:none}}";

const ModusAccordionItem = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.closed = index.createEvent(this, "closed", 7);
    this.opened = index.createEvent(this, "opened", 7);
    this.classBySize = new Map([
      ['condensed', 'small'],
      ['standard', 'standard'],
    ]);
    // Trick to restart an element's animation
    // see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
    // taken from: https://getbootstrap.com/docs/5.2/dist/js/bootstrap.js
    this.reflow = (element) => {
    };
    this.disabled = undefined;
    this.expanded = undefined;
    this.headerText = undefined;
    this.size = 'standard';
  }
  handleHeaderClick() {
    if (this.disabled) {
      return;
    }
    this.chevronContainerRef.classList.toggle('reverse');
    // Logic to trigger a transition animation and handle it
    // Because transition won't have any effect when using 'display:' on an element
    if (!this.expanded) {
      this.accordionBodyRef.classList.remove('collapse');
      this.accordionBodyRef.classList.add('collapsing');
      // Required to calculate scrollHeight and set the value on 'height' for transition to start
      this.accordionBodyRef.style.height = '0';
      // Timeout to reset collapsing class
      this.accordionOpenTimeout = setTimeout(() => {
        this.accordionBodyRef.classList.remove('collapsing');
        this.accordionBodyRef.classList.add('show');
        this.accordionBodyRef.classList.add('collapse');
        // reset height to original state
        // this.accordionBodyRef.style.height = '';
        clearTimeout(this.accordionOpenTimeout);
        this.expanded = true;
        this.opened.emit();
      }, 350);
      // Triggers transition
      this.accordionBodyRef.style.height = `${this.accordionBodyRef.scrollHeight}px`;
    }
    else {
      this.accordionBodyRef.style.height = `${this.accordionBodyRef.getBoundingClientRect().height}px`;
      this.reflow(this.accordionBodyRef);
      this.accordionBodyRef.classList.add('collapsing');
      this.accordionBodyRef.classList.remove('collapse');
      this.accordionBodyRef.classList.remove('show');
      // Timeout to reset collapsing class
      this.accordionCloseTimeout = setTimeout(() => {
        this.accordionBodyRef.classList.remove('collapsing');
        this.accordionBodyRef.classList.add('collapse');
        clearTimeout(this.accordionCloseTimeout);
        this.expanded = false;
        this.closed.emit();
      }, 350);
      this.accordionBodyRef.style.height = '';
    }
  }
  handleKeydown(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleHeaderClick();
  }
  render() {
    const sizeClass = `${this.classBySize.get(this.size)}`;
    const disabledClass = `${this.disabled ? 'disabled' : ''}`;
    const expandedClass = `${this.expanded ? 'expanded' : ''}`;
    const bodyClass = `body ${sizeClass} collapse${this.expanded ? ' show' : ''}`;
    const headerClass = `header ${sizeClass} ${disabledClass} ${expandedClass}`;
    return (index.h("div", { "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, class: "accordion-item" }, index.h("div", { class: headerClass, onClick: () => this.handleHeaderClick(), onKeyDown: (event) => this.handleKeydown(event), tabIndex: 0 }, index.h("span", { class: "title" }, this.headerText), index.h("div", { class: `chevron-container ${this.expanded ? 'reverse' : ''} `, ref: (el) => (this.chevronContainerRef = el) }, index.h(iconChevronDownThick.IconChevronDownThick, { size: "24" }))), index.h("div", { class: bodyClass, ref: (el) => (this.accordionBodyRef = el) }, index.h("div", { class: "body-content" }, index.h("slot", null)))));
  }
};
ModusAccordionItem.style = modusAccordionItemCss;

exports.modus_accordion_item = ModusAccordionItem;
