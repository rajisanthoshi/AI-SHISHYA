'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-77fbe095.js');
const iconUploadCloud = require('./icon-upload-cloud-bbd28597.js');

const modusFileDropzoneCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-file-dropzone{color:var(--modus-body-color, #252a2e);display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"}.modus-file-dropzone input{display:none}.modus-file-dropzone .header{align-items:start;display:flex;flex-direction:column}.modus-file-dropzone .header label{font-size:1.5rem;font-weight:600;margin-bottom:0.5rem}.modus-file-dropzone .header span{margin-bottom:0.5rem}.modus-file-dropzone .dropzone{align-items:center;background-color:var(--modus-file-upload-dropzone-bg, rgba(241, 241, 246, 0.8));border:0.0625rem dashed var(--modus-file-upload-dropzone-border-color, #6a6e79);border-radius:0.25rem;color:var(--modus-file-upload-dropzone-color, #6a6e79);display:flex;flex-direction:column;font-weight:600;justify-content:center;padding:0.75rem 1rem}.modus-file-dropzone .dropzone .browse{color:var(--modus-file-upload-dropzone-browse-color, #0063a3)}.modus-file-dropzone .dropzone .browse:hover{cursor:pointer}.modus-file-dropzone .dropzone.highlight{background-color:var(--modus-file-upload-dropzone-highlight-bg, #dcedf9);border-color:var(--modus-file-upload-dropzone-highlight-border-color, #0063a3);color:var(--modus-file-upload-dropzone-highlight-color, #0063a3)}.modus-file-dropzone .dropzone.highlight svg{fill:var(--modus-file-upload-dropzone-highlight-color, #0063a3)}.modus-file-dropzone .dropzone.error{background-color:var(--modus-file-upload-dropzone-error-bg, #fbd4d7);border-color:var(--modus-file-upload-dropzone-error-border-color, #ab1f26);color:var(--modus-file-upload-dropzone-error-color, #ab1f26)}.modus-file-dropzone .dropzone.error svg{fill:var(--modus-file-upload-dropzone-error-color, #ab1f26)}.modus-file-dropzone .dropzone .error-messages{align-items:center;display:flex;flex-direction:column}.modus-file-dropzone .dropzone svg{fill:var(--modus-file-upload-dropzone-color, #6a6e79);margin-bottom:0.25rem}";

const ModusFileDropzone = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.files = index.createEvent(this, "files", 7);
    this.onDragLeave = (event) => {
      this.fileDraggedOver = false;
      event.preventDefault();
    };
    this.onDragOver = (event) => {
      if (this.error) {
        return;
      }
      this.fileDraggedOver = true;
      event.preventDefault();
    };
    this.onDrop = (event) => {
      this.fileDraggedOver = false;
      event.preventDefault();
      this.dropzoneFiles = [...this.dropzoneFiles, ...Array.from(event.dataTransfer.files)];
      this.updateDropzoneState();
      this.files.emit([this.dropzoneFiles, this.error]);
      this.fileInput.value = null;
    };
    this.onFileChange = () => {
      this.dropzoneFiles = [...this.dropzoneFiles, ...Array.from(this.fileInput.files)];
      this.updateDropzoneState();
      this.files.emit([this.dropzoneFiles, this.error]);
      this.fileInput.value = null;
    };
    this.openBrowse = () => {
      this.fileInput.click();
    };
    this.updateDropzoneState = () => {
      // Raise error if having multiple files is invalid.
      if (!this.multiple && this.dropzoneFiles.length > 1) {
        this.error = 'maxFileCount';
        this.errorMessageTop = 'Multiple files are not allowed.';
        return;
      }
      // Raise error if the max file count has been exceeded.
      if (this.maxFileCount && this.maxFileCount < this.dropzoneFiles.length) {
        this.error = 'maxFileCount';
        this.errorMessageTop = `You can only upload ${this.maxFileCount} ${this.maxFileCount > 1 ? 'files' : 'file'}.`;
        return;
      }
      // Raise error if the max file name length has been exceeded.
      if (this.dropzoneFiles.some((file) => file.name.length > this.maxFileNameLength)) {
        this.error = 'maxFileNameLength';
        this.errorMessageTop = `File name exceeds length limit: ${this.dropzoneFiles.find((file) => file.name.length > this.maxFileNameLength).name}`;
        return;
      }
      // Raise error if the max total file size has been exceeded.
      const totalFileSize = this.dropzoneFiles.reduce((total, file) => total + file.size, 0);
      if (this.maxTotalFileSizeBytes && this.maxTotalFileSizeBytes < totalFileSize) {
        this.error = 'maxTotalFileSize';
        this.errorMessageTop = 'File exceeds size limit.';
        this.errorMessageBottom = `You can only upload a total file size of ${this.maxTotalFileSizeBytes} bytes.`;
        return;
      }
      this.error = null;
      this.errorMessageTop = '';
      this.errorMessageBottom = '';
    };
    this.dropzoneFiles = [];
    this.error = null;
    this.fileDraggedOver = false;
    this.ariaLabel = undefined;
    this.description = undefined;
    this.dropzoneHeight = undefined;
    this.dropzoneWidth = undefined;
    this.includeStateIcon = true;
    this.label = undefined;
    this.maxFileCount = undefined;
    this.maxFileNameLength = undefined;
    this.maxTotalFileSizeBytes = undefined;
    this.multiple = true;
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.fileInput.click();
        break;
    }
  }
  /** Add a file to the dropzone. */
  async addFile(file) {
    this.dropzoneFiles.push(file);
    this.updateDropzoneState();
    this.files.emit([this.dropzoneFiles, this.error]);
  }
  /** Get the dropzone's error. */
  async getError() {
    return this.error;
  }
  /** Get the dropzone's files. */
  async getFiles() {
    return this.dropzoneFiles;
  }
  /** Remove a file from the dropzone. */
  async removeFile(fileName) {
    const file = this.dropzoneFiles.find((f) => f.name === fileName);
    const index = this.dropzoneFiles.indexOf(file);
    if (index > -1) {
      this.dropzoneFiles.splice(index, 1);
      this.dropzoneFiles = [...this.dropzoneFiles];
    }
    this.updateDropzoneState();
    this.files.emit([this.dropzoneFiles, this.error]);
  }
  render() {
    return (index.h(index.Host, { "aria-label": this.ariaLabel, role: "button" }, index.h("div", { class: "modus-file-dropzone" }, index.h("input", { onChange: this.onFileChange, multiple: this.multiple, ref: (el) => (this.fileInput = el), type: "file" }), index.h("div", { class: "header" }, index.h("label", null, this.label), index.h("span", null, this.description)), index.h("div", { class: `dropzone ${this.fileDraggedOver ? 'highlight' : null} ${this.error ? 'error' : null}`, onDragLeave: (e) => this.onDragLeave(e), onDragOver: (e) => this.onDragOver(e), onDrop: (e) => this.onDrop(e), style: { height: this.dropzoneHeight, width: this.dropzoneWidth }, tabIndex: 0 }, this.includeStateIcon && (this.error ? index.h(iconUploadCloud.IconCancel, { size: '36' }) : index.h(iconUploadCloud.IconUploadCloud, { size: '36' })), !this.error && (index.h("div", null, "Drag files here", !this.fileDraggedOver && (index.h("span", null, ' ', "or", index.h("span", { class: "browse", onClick: this.openBrowse }, ' ', "browse"), ' ', "to upload")), ".")), this.error && (index.h("div", { class: "error-messages" }, this.errorMessageTop && index.h("span", null, this.errorMessageTop), this.errorMessageBottom && index.h("span", null, this.errorMessageBottom)))))));
  }
};
ModusFileDropzone.style = modusFileDropzoneCss;

exports.modus_file_dropzone = ModusFileDropzone;
