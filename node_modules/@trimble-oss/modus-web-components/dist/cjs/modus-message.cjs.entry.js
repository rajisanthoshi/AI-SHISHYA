'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-77fbe095.js');
const iconInfo = require('./icon-info-9b412425.js');
const iconHelp = require('./icon-help-e043cd22.js');
const IconMap = require('./IconMap-6beae5b8.js');
require('./icon-upload-cloud-bbd28597.js');
require('./icon-check-28f05d54.js');
require('./icon-chevron-down-thick-0b9e8fcf.js');
require('./icon-chevron-right-thick-fbe0222c.js');
require('./icon-close-394815fc.js');
require('./icon-indeterminate-4000397d.js');
require('./icon-remove-8569cbbd.js');
require('./icon-search-780e6dd3.js');
require('./icon-chevron-up-thick-11476cb6.js');
require('./icon-chevron-left-thick-5835e464.js');
require('./icon-visibility-off-4d0bd823.js');

const modusMessageCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-message{align-items:center;border-radius:0.125rem;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;padding:0.5rem}.modus-message .icon{align-items:center;display:flex;margin-right:0.5rem}.modus-message.info{background-color:var(--modus-message-info-bg, #dcedf9);color:var(--modus-message-info-color, #0063a3)}.modus-message.info svg path{fill:var(--modus-message-info-color, #0063a3) !important}.modus-message.question{background-color:var(--modus-message-question-bg, #f1f1f6);color:var(--modus-message-question-color, #6a6e79)}.modus-message.question svg path{fill:var(--modus-message-question-color, #6a6e79) !important}";

const ModusMessage = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.classByType = new Map([
      ['info', 'info'],
      ['question', 'question'],
    ]);
    this.ariaLabel = undefined;
    this.icon = undefined;
    this.type = 'info';
  }
  render() {
    const className = `modus-message ${this.classByType.get(this.type)}`;
    return (index.h("div", { "aria-label": this.ariaLabel, class: className, role: "note" }, index.h("span", { class: "icon" }, this.icon ? (index.h(IconMap.IconMap, { icon: this.icon, size: "18" })) : this.type === 'info' ? (index.h(iconInfo.IconInfo, { size: "18" })) : this.type === 'question' ? (index.h(iconHelp.IconHelp, { size: "18" })) : null), index.h("span", { class: "message" }, index.h("slot", null))));
  }
};
ModusMessage.style = modusMessageCss;

exports.modus_message = ModusMessage;
