'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-77fbe095.js');
const modusTable_constants = require('./modus-table.constants-43b34557.js');

const modusTableColumnsVisibilityCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.columns-visibility-menu .column-visibility-header{color:var(--modus-primary, #019aeb);font-size:0.875rem;font-weight:700;line-height:18px;margin:12px;margin-bottom:5px}.columns-visibility-menu .column-visibility-item{padding:5px 5px 5px 12px}.columns-visibility-menu .column-visibility-item:focus,.columns-visibility-menu .column-visibility-item:hover{background:var(--modus-group-item-hover-bg, #e0e1e9);outline:none}.columns-visibility-menu .column-visibility-item:last-child{margin-bottom:10px}.columns-visibility-menu .column-visibility-buttons-container{margin-bottom:12px}modus-button{padding:12px 0 0 12px}";

const ModusTableColumnsVisibility = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.refItemContent = [];
    this.table = undefined;
    this.columnsVisibility = undefined;
    this.showDropdown = undefined;
    this.menuIconContainerRef = undefined;
    this.toggleDropdown = undefined;
    this.columnsVisibilityState = new Map();
  }
  applyColumnsVisibility() {
    this.table.getAllLeafColumns().forEach((column) => {
      if (this.columnsVisibilityState.has(column.id)) {
        column.toggleVisibility(this.columnsVisibilityState.get(column.id));
      }
    });
    this.toggleDropdown(!this.showDropdown);
    this.menuIconContainerRef.focus();
  }
  closeDropdown() {
    this.columnsVisibilityState = new Map();
    this.toggleDropdown(!this.showDropdown);
    this.menuIconContainerRef.focus();
  }
  handleApplyKeyDown(event) {
    if (event.key.toLowerCase() === modusTable_constants.KEYBOARD_TAB && !event.shiftKey) {
      this.toggleDropdown(false);
    }
  }
  /**
   * Handling columns dropdown keyboard(arrowUp/arrowDown) navigation
   * @param event keyboard event
   * @param columnIndex column index
   */
  handleColumnItemKeyDown(event, columnIndex) {
    let currentRefItemIndex;
    const recursiveTillAnotherFocusItem = (refItemIndex, isIncrement) => {
      this.refItemContent[refItemIndex]
        ? this.refItemContent[refItemIndex].focus()
        : recursiveTillAnotherFocusItem(isIncrement ? refItemIndex + 1 : refItemIndex - 1, isIncrement);
    };
    const eventKey = event.key.toLowerCase();
    if (eventKey === modusTable_constants.KEYBOARD_ENTER || eventKey === modusTable_constants.KEYBOARD_SPACE) {
      this.toggleColumnVisibility(columnIndex);
    }
    else if (eventKey === modusTable_constants.KEYBOARD_DOWN) {
      currentRefItemIndex = columnIndex + 1 < this.refItemContent.length ? columnIndex + 1 : this.refItemContent.length - 1;
      recursiveTillAnotherFocusItem(currentRefItemIndex, true);
      event.preventDefault();
    }
    else if (eventKey === modusTable_constants.KEYBOARD_UP) {
      currentRefItemIndex = columnIndex - 1 >= 0 ? columnIndex - 1 : 0;
      recursiveTillAnotherFocusItem(currentRefItemIndex, false);
      event.preventDefault();
    }
  }
  /**
   * Adding column item refs(not disabled)
   */
  handleRefColumnItemContent(el, i, requiredColumn) {
    if (!requiredColumn) {
      this.refItemContent[i] = el;
    }
  }
  toggleColumnVisibility(columnIndex) {
    const shadowRootChildren = this.refItemContent[columnIndex].children[0].shadowRoot
      .children;
    const modusCheckboxElement = shadowRootChildren[shadowRootChildren.length - 1];
    modusCheckboxElement.click();
  }
  /**
   * Returns true if the column is required column
   */
  checkIfRequiredColumn(columnId) {
    var _a, _b;
    return (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(columnId);
  }
  renderColumnsChecklist() {
    const columnVisibilityItemControls = (columnId, columnIndex) => {
      return {
        key: columnId,
        tabIndex: this.checkIfRequiredColumn(columnId) ? -1 : 0,
        ref: (el) => {
          this.handleRefColumnItemContent(el, columnIndex, this.checkIfRequiredColumn(columnId));
        },
        onClick: () => this.toggleColumnVisibility(columnIndex),
        onKeyDown: (event) => this.handleColumnItemKeyDown(event, columnIndex),
      };
    };
    return this.table.getAllLeafColumns().map((column, index$1) => {
      var _a, _b;
      return (index.h("div", Object.assign({}, columnVisibilityItemControls(column.id, index$1), { class: "column-visibility-item" }), index.h("modus-checkbox", { ariaLabel: column.columnDef.header, label: column.columnDef.header, checked: column.getIsVisible(), onCheckboxClick: (e) => this.columnsVisibilityState.set(column.id, e.detail), disabled: (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(column.id), stopPropagation: true })));
    });
  }
  renderCancelApplyButtons() {
    return (index.h("div", { class: "column-visibility-buttons-container" }, index.h("modus-button", { size: "small", buttonStyle: "outline", onClick: () => this.closeDropdown() }, "Cancel"), index.h("modus-button", { size: "small", onClick: () => this.applyColumnsVisibility(), onKeyDown: (event) => this.handleApplyKeyDown(event) }, "Apply")));
  }
  render() {
    return (index.h("div", { class: "columns-visibility-menu" }, index.h("div", { class: "column-visibility-header" }, this.columnsVisibility.title || 'Columns'), index.h("div", null, this.renderColumnsChecklist()), this.renderCancelApplyButtons()));
  }
};
ModusTableColumnsVisibility.style = modusTableColumnsVisibilityCss;

// eslint-disable-next-line
const IconHorizontalEllipsis = (props) => {
  var _a, _b, _c;
  return (index.h("svg", { xmlns: "http://www.w3.org/2000/svg", width: (_a = props.size) !== null && _a !== void 0 ? _a : 16, height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? () => props.onClick() : null, fill: (_c = props.color) !== null && _c !== void 0 ? _c : '#6A6976', viewBox: "0 0 24 24" },
    index.h("path", { d: "M10.59 10.59c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Zm7 0c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Zm-14 0c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Z" })));
};

const modusTableDropdownMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.dropdown-menu-container{display:inline-block;padding-left:12px;position:relative}.dropdown-menu-container .dropdown-menu-icon{border-radius:3px;cursor:pointer;display:flex;padding:4px}.dropdown-menu-container .dropdown-menu-icon svg{fill:var(--modus-icon-colour, #252a2e)}.dropdown-menu-container .dropdown-menu-icon:hover{background:var(--modus-group-item-hover-bg, #e0e1e9)}.dropdown-menu-container .dropdown-menu{background-color:var(--modus-group-item-bg, #fff);border:1px solid var(--modus-group-item-border-color, #e0e1e9);box-shadow:0 0 4px var(--modus-card-shadow-color, #3635454d);display:none;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:absolute;right:0;top:28px;width:240px;z-index:99}.dropdown-menu-container .dropdown-menu.visible{display:block}";

const ModusTableDropdownMenu = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.table = undefined;
    this.options = undefined;
    this.show = false;
  }
  handleClickOutside(event) {
    // Closing the dropdown when click outside
    const withinBoundaries = event.composedPath();
    if (!withinBoundaries.find((item) => item['className'] === 'dropdown-menu-container')) {
      this.show = false;
    }
  }
  handleIconKeyDown(event) {
    const eventKey = event.key.toLowerCase();
    if (eventKey === modusTable_constants.KEYBOARD_ENTER || eventKey === modusTable_constants.KEYBOARD_SPACE) {
      this.show = true;
      event.preventDefault();
    }
    else if (eventKey === modusTable_constants.KEYBOARD_ESCAPE) {
      this.show = false;
      event.preventDefault();
    }
  }
  handleDropdownKeyDown(event) {
    if (event.key.toLowerCase() === modusTable_constants.KEYBOARD_ESCAPE) {
      this.show = false;
      this.menuIconContainerRef.focus();
      event.preventDefault();
    }
  }
  render() {
    var _a;
    return (index.h("div", { class: "dropdown-menu-container" }, index.h("div", { tabIndex: 0, class: "dropdown-menu-icon", onClick: () => (this.show = !this.show), onKeyDown: (event) => this.handleIconKeyDown(event), ref: (el) => (this.menuIconContainerRef = el) }, index.h(IconHorizontalEllipsis, { size: "20" })), index.h("div", { onKeyDown: (event) => this.handleDropdownKeyDown(event), class: `dropdown-menu ${this.show ? 'visible' : ''}` }, index.h("modus-table-columns-visibility", { table: this.table, columnsVisibility: (_a = this.options) === null || _a === void 0 ? void 0 : _a.columnsVisibility, showDropdown: this.show, menuIconContainerRef: this.menuIconContainerRef, toggleDropdown: (show) => (this.show = show) }))));
  }
  get element() { return index.getElement(this); }
};
ModusTableDropdownMenu.style = modusTableDropdownMenuCss;

exports.modus_table_columns_visibility = ModusTableColumnsVisibility;
exports.modus_table_dropdown_menu = ModusTableDropdownMenu;
