'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-77fbe095.js');
const iconCheck = require('./icon-check-28f05d54.js');
const iconIndeterminate = require('./icon-indeterminate-4000397d.js');

const modusCheckboxCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{align-items:center;display:flex}.modus-checkbox{align-items:center;color:var(--modus-checkbox-label-color, #464b52);cursor:pointer;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.75rem;height:1.5rem;text-align:center;white-space:nowrap}.modus-checkbox .checkbox{align-items:center;background-color:var(--modus-checkbox-bg, #fff);border:0.125rem solid var(--modus-checkbox-border-color, #90939f);border-radius:0.125rem;display:flex;height:1rem;justify-content:center;margin:0 0.28rem;transition:background-color 0.15s ease-in-out;width:1rem}.modus-checkbox .checkbox:focus,.modus-checkbox .checkbox:focus-visible{box-shadow:0 0 0 0.2rem var(--modus-checkbox-focus-box-shadow-color, rgba(33, 124, 187, 0.34));outline:0}.modus-checkbox .checkbox.blue-background{background-color:var(--modus-checkbox-selected-border-color, #217cbb) !important;border:0.125rem solid var(--modus-checkbox-selected-border-color, #217cbb) !important}.modus-checkbox .checkbox.disabled{cursor:default;opacity:var(--modus-checkbox-disabled-opacity, 0.3)}.modus-checkbox .checkbox .checkmark{align-items:center;display:flex;justify-content:center;transform:scale(0);transition:transform 0.25s ease-in-out;visibility:hidden}.modus-checkbox .checkbox .checkmark.checked{transform:scale(0.75);visibility:visible}.modus-checkbox input{display:none}.modus-checkbox label{align-items:center;display:flex}.modus-checkbox label.disabled{opacity:0.3}.modus-checkbox:hover .checkbox:not(.checked):not(.disabled){border:0.125rem solid var(--modus-checkbox-hover-border-color, #217cbb)}.modus-checkbox:active .checkbox:not(.checked):not(.disabled){border:0.125rem solid var(--modus-checkbox-selected-border-color, #217cbb)}";

const ModusCheckbox = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.checkboxClick = index.createEvent(this, "checkboxClick", 7);
    this.ariaLabel = undefined;
    this.checked = undefined;
    this.disabled = undefined;
    this.indeterminate = undefined;
    this.label = undefined;
    this.tabIndexValue = 0;
    this.stopPropagation = undefined;
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.handleCheckboxClick(event);
        break;
      case 'Space':
        this.handleCheckboxClick(event);
        break;
    }
  }
  /** Focus the checkbox input */
  async focusCheckbox() {
    this.checkboxContainer.focus();
  }
  componentDidRender() {
    this.checkboxInput.indeterminate = this.indeterminate;
  }
  handleCheckboxClick(event) {
    if (this.disabled) {
      return;
    }
    this.updateChecked();
    this.checkboxClick.emit(this.checked);
    if (this.stopPropagation) {
      event.stopPropagation();
      event.preventDefault();
    }
  }
  updateChecked() {
    this.checked = !this.checked;
    this.checkboxInput.checked = this.checked;
    this.indeterminate = false;
  }
  render() {
    const className = 'modus-checkbox';
    const tabIndexValue = this.disabled ? -1 : this.tabIndexValue;
    return (index.h("div", { class: className, onClick: (event) => {
        this.handleCheckboxClick(event);
      } }, index.h("div", { tabindex: tabIndexValue, class: `${this.checked || this.indeterminate ? 'checkbox blue-background checked' : 'checkbox'} ${this.disabled ? 'disabled' : ''}`, ref: (el) => (this.checkboxContainer = el) }, this.indeterminate ? (index.h("div", { class: 'checkmark checked' }, index.h(iconIndeterminate.IconIndeterminate, { color: "#FFFFFF", size: "24" }))) : (index.h("div", { class: this.checked ? 'checkmark checked' : 'checkmark' }, index.h(iconCheck.IconCheck, { color: "#FFFFFF", size: "24" })))), index.h("input", { "aria-checked": this.checked, "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel, checked: this.checked, disabled: this.disabled, ref: (el) => (this.checkboxInput = el), type: "checkbox" }), this.label ? index.h("label", { class: this.disabled ? 'disabled' : null }, this.label) : null));
  }
};
ModusCheckbox.style = modusCheckboxCss;

exports.modus_checkbox = ModusCheckbox;
