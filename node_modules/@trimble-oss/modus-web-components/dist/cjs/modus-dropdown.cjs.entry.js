'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-77fbe095.js');

const modusDropdownCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}:host .dropdown:hover{cursor:pointer}:host .dropdown-list{border-radius:0.125rem;display:none;max-height:200px;max-width:300px;opacity:1;overflow-x:hidden;overflow-y:auto;position:absolute;transition:opacity 0.2s ease-in-out;z-index:1}:host .dropdown-list.animate-list{display:block;opacity:0;visibility:hidden}:host .dropdown-list.visible{display:block;opacity:1;overflow:visible;visibility:visible}:host .dropdown-list.top{bottom:0}:host .dropdown-list.right{top:0}:host .dropdown-list.left{right:0;top:0}";

const ModusDropdown = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.dropdownClose = index.createEvent(this, "dropdownClose", 7);
    this.classByPlacement = new Map([
      ['top', 'top'],
      ['right', 'right'],
      ['bottom', 'bottom'],
      ['left', 'left'],
    ]);
    this.dropdownToggleClicked = false;
    this.animateList = false;
    this.ariaLabel = undefined;
    this.customPlacement = undefined;
    this.disabled = undefined;
    this.placement = 'bottom';
    this.toggleElementId = undefined;
    this.visible = undefined;
  }
  componentDidRender() {
    this.toggleElement = this.el.querySelector(`#${this.toggleElementId}`);
    if (!this.toggleElement) {
      throw Error('matching element not found for toggle-element-id');
    }
  }
  documentClickHandler(event) {
    // Close the dropdown when click is outside the current element.
    if (this.dropdownToggleClicked || event.target.closest(`#${this.toggleElementId}`)) {
      // Reset dropdown toggle click
      this.dropdownToggleClicked = false;
      return;
    }
    if (this.visible) {
      this.visible = false;
      this.dropdownClose.emit();
    }
  }
  handleDropdownClick(event) {
    if (event.target.closest(`#${this.toggleElementId}`)) {
      this.visible = !this.visible;
    }
    else {
      this.visible = false;
    }
    if (!this.visible) {
      this.dropdownClose.emit();
    }
    else {
      this.dropdownToggleClicked = true;
    }
  }
  render() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    const listContainerClass = `dropdown-list ${this.visible ? 'visible' : 'hidden'} ${this.animateList ? 'animate-list' : ''} ${this.classByPlacement.get(this.placement)}`;
    const left = this.placement === 'right' ? `${(_a = this.toggleElement) === null || _a === void 0 ? void 0 : _a.offsetWidth}px` : 'unset';
    const width = `${((_b = this.toggleElement) === null || _b === void 0 ? void 0 : _b.offsetWidth) ? (_c = this.toggleElement) === null || _c === void 0 ? void 0 : _c.offsetWidth : 0}px`;
    return (index.h("div", { "aria-label": this.ariaLabel, class: "dropdown", role: "listbox", onClick: (event) => this.handleDropdownClick(event) }, index.h("slot", { name: "dropdownToggle" }), index.h("div", { class: listContainerClass, style: {
        top: ((_d = this.customPlacement) === null || _d === void 0 ? void 0 : _d.top) ? `${(_e = this.customPlacement) === null || _e === void 0 ? void 0 : _e.top}px` : '',
        right: ((_f = this.customPlacement) === null || _f === void 0 ? void 0 : _f.right) ? `${(_g = this.customPlacement) === null || _g === void 0 ? void 0 : _g.right}px` : '',
        left: ((_h = this.customPlacement) === null || _h === void 0 ? void 0 : _h.left) ? `${(_j = this.customPlacement) === null || _j === void 0 ? void 0 : _j.left}px` : left,
        bottom: ((_k = this.customPlacement) === null || _k === void 0 ? void 0 : _k.bottom) ? `${(_l = this.customPlacement) === null || _l === void 0 ? void 0 : _l.bottom}px` : '',
        'min-width': width,
      } }, index.h("slot", { name: "dropdownList" }))));
  }
  get el() { return index.getElement(this); }
};
ModusDropdown.style = modusDropdownCss;

exports.modus_dropdown = ModusDropdown;
