'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-77fbe095.js');
const IconMap = require('./IconMap-6beae5b8.js');
const iconSearch = require('./icon-search-780e6dd3.js');
const iconHelp = require('./icon-help-e043cd22.js');
const utils = require('./utils-5141529e.js');
require('./icon-upload-cloud-bbd28597.js');
require('./icon-check-28f05d54.js');
require('./icon-info-9b412425.js');
require('./icon-chevron-down-thick-0b9e8fcf.js');
require('./icon-chevron-right-thick-fbe0222c.js');
require('./icon-close-394815fc.js');
require('./icon-indeterminate-4000397d.js');
require('./icon-remove-8569cbbd.js');
require('./icon-chevron-up-thick-11476cb6.js');
require('./icon-chevron-left-thick-5835e464.js');
require('./icon-visibility-off-4d0bd823.js');

// eslint-disable-next-line
const ModusNavbarProductLogo = ({ logos, onClick }) => {
  var _a, _b;
  const { primary, secondary } = logos || {};
  return (index.h("div", { onClick: onClick, class: "product-logo" },
    primary && (index.h("img", { class: secondary && 'product-logo-primary', height: (_a = primary.height) !== null && _a !== void 0 ? _a : '24', src: primary.url, alt: "Modus Navbar primary product logo", "data-test-id": "primary-logo" })),
    secondary && (index.h("img", { class: primary && 'product-logo-secondary', height: (_b = secondary.height) !== null && _b !== void 0 ? _b : '24', src: secondary.url, alt: "Modus Navbar secondary product logo", "data-test-id": "secondary-logo" }))));
};

const ModusNavbarButtonList = ({ buttons, reverse, onClick, openButtonMenuId }) => {
  const navbarButtons = buttons || [];
  return navbarButtons.map((button, index$1) => {
    var _a;
    return (index.h("div", { onClick: (event) => onClick(event, button) },
      index.h("modus-dropdown", { "toggle-element-id": 'navbar-button-' + index$1 },
        index.h("div", { class: "navbar-button", id: 'navbar-button-' + index$1, slot: "dropdownToggle" },
          index.h("span", { class: "navbar-button-icon", tabIndex: 0 },
            index.h("modus-tooltip", { text: (_a = button.tooltip) === null || _a === void 0 ? void 0 : _a.text, position: "bottom" },
              index.h("div", { class: "icon-button" },
                index.h(IconMap.IconMap, { icon: button.icon, size: "24", pressed: openButtonMenuId === button.id }))))),
        !button.hideMenu && (index.h("modus-navbar-button-menu", { slot: "dropdownList", reverse: reverse },
          index.h("slot", { name: button.id }))))));
  });
};

const modusNavbarCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");nav{align-items:center;background-color:var(--modus-navbar-bg, #fff);display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:56px}nav.reverse{flex-direction:row-reverse}nav.shadow{box-shadow:0 0 4px rgba(36, 35, 45, 0.3)}nav .icon-search,nav .icon-notifications,nav .icon-help,nav .icon-apps,nav .icon-menu,nav .icon-close,nav .icon-button svg{border-radius:0.125rem;padding:0.75rem}nav .icon-search path,nav .icon-notifications path,nav .icon-help path,nav .icon-apps path,nav .icon-menu path,nav .icon-close path,nav .icon-button svg path{fill:var(--modus-navbar-icon-color, #252a2e)}nav .icon-search:hover:not(.pressed),nav .icon-notifications:hover:not(.pressed),nav .icon-help:hover:not(.pressed),nav .icon-apps:hover:not(.pressed),nav .icon-menu:hover:not(.pressed),nav .icon-close:hover:not(.pressed),nav .icon-button svg:hover:not(.pressed){background-color:var(--modus-navbar-icon-hover-bg, #e0e1e9)}nav .icon-search:hover:not(.pressed) path,nav .icon-notifications:hover:not(.pressed) path,nav .icon-help:hover:not(.pressed) path,nav .icon-apps:hover:not(.pressed) path,nav .icon-menu:hover:not(.pressed) path,nav .icon-close:hover:not(.pressed) path,nav .icon-button svg:hover:not(.pressed) path{fill:var(--modus-navbar-icon-hover-color, #3c444a)}nav .icon-search:active,nav .icon-search.pressed,nav .icon-notifications:active,nav .icon-notifications.pressed,nav .icon-help:active,nav .icon-help.pressed,nav .icon-apps:active,nav .icon-apps.pressed,nav .icon-menu:active,nav .icon-menu.pressed,nav .icon-close:active,nav .icon-close.pressed,nav .icon-button svg:active,nav .icon-button svg.pressed{background-color:var(--modus-navbar-icon-active-bg, #cbcdd6)}nav .icon-search:active path,nav .icon-search.pressed path,nav .icon-notifications:active path,nav .icon-notifications.pressed path,nav .icon-help:active path,nav .icon-help.pressed path,nav .icon-apps:active path,nav .icon-apps.pressed path,nav .icon-menu:active path,nav .icon-menu.pressed path,nav .icon-close:active path,nav .icon-close.pressed path,nav .icon-button svg:active path,nav .icon-button svg.pressed path{fill:var(--modus-navbar-icon-active-color, #0e1012)}nav .main-menu-button{padding:0 0.5rem}nav .navbar-button{position:relative}nav .navbar-button:hover{cursor:pointer}nav .navbar-button .navbar-button-icon,nav .navbar-button .icon-button,nav .navbar-button modus-tooltip{display:flex}nav .navbar-button-list{display:flex}nav .right,nav .left{align-items:center;display:inline-flex;height:100%}nav .right.expand,nav .left.expand{display:none}nav .right.collapse,nav .left.collapse{display:inline-flex}nav .right.reverse,nav .left.reverse{flex-direction:row-reverse}nav .left img.product-logo-primary{filter:var(--modus-navbar-brand-logo-filter);max-height:32px;padding:0 0.5rem;user-select:none}nav .left img.product-logo-secondary{filter:var(--modus-navbar-brand-logo-filter)}nav .right{margin-left:auto}nav .right.reverse{margin-left:0;margin-right:auto}nav .right .search{align-items:center;display:inline-flex}nav .right .pendo-placeholder{height:40px;width:40px}nav .right .profile-menu{align-items:center;cursor:default;display:inline-flex;height:40px;justify-content:center;margin:0 0.5rem;position:relative;width:40px}nav .right .profile-menu modus-tooltip img.avatar{background-color:var(--modus-navbar-icon-color, #252a2e);border-radius:50%;height:32px;width:32px}nav .right .profile-menu modus-tooltip .initials{align-items:center;background-color:var(--modus-navbar-icon-color, #252a2e);border-radius:50%;color:var(--modus-navbar-profile-icon-initials-color, #fff);display:flex;font-size:0.875rem;font-weight:600;height:32px;justify-content:center;user-select:none;width:32px}nav .right .profile-menu modus-tooltip>:first-child:hover,nav .right .profile-menu modus-tooltip>:first-child:focus{border:0.25rem solid var(--modus-navbar-icon-color, #252a2e)}nav .right .profile-menu modus-tooltip>:first-child:active{outline:0.25rem solid var(--modus-navbar-profile-icon-active-border-color, #d6d5db)}nav .right .profile-menu modus-tooltip:hover{cursor:pointer}nav .overlay{width:100%}nav.nav-blue{background-color:var(--modus-navbar-blue-bg, #0e416c)}nav.nav-blue .icon-search path,nav.nav-blue .icon-notifications path,nav.nav-blue .icon-help path,nav.nav-blue .icon-apps path,nav.nav-blue .icon-menu path,nav.nav-blue .icon-close path,nav.nav-blue .icon-button svg path{fill:var(--modus-navbar-blue-icon-color, #fff)}nav.nav-blue .icon-search:hover:not(.pressed),nav.nav-blue .icon-notifications:hover:not(.pressed),nav.nav-blue .icon-help:hover:not(.pressed),nav.nav-blue .icon-apps:hover:not(.pressed),nav.nav-blue .icon-menu:hover:not(.pressed),nav.nav-blue .icon-close:hover:not(.pressed),nav.nav-blue .icon-button svg:hover:not(.pressed){background-color:var(--modus-navbar-blue-icon-hover-bg, #217cbb);outline:0.0625rem solid var(--modus-navbar-blue-icon-hover-border-color, #019aeb)}nav.nav-blue .icon-search:hover:not(.pressed) path,nav.nav-blue .icon-notifications:hover:not(.pressed) path,nav.nav-blue .icon-help:hover:not(.pressed) path,nav.nav-blue .icon-apps:hover:not(.pressed) path,nav.nav-blue .icon-menu:hover:not(.pressed) path,nav.nav-blue .icon-close:hover:not(.pressed) path,nav.nav-blue .icon-button svg:hover:not(.pressed) path{fill:var(--modus-navbar-blue-icon-hover-color, #fff)}nav.nav-blue .icon-search:active,nav.nav-blue .icon-search.pressed,nav.nav-blue .icon-notifications:active,nav.nav-blue .icon-notifications.pressed,nav.nav-blue .icon-help:active,nav.nav-blue .icon-help.pressed,nav.nav-blue .icon-apps:active,nav.nav-blue .icon-apps.pressed,nav.nav-blue .icon-menu:active,nav.nav-blue .icon-menu.pressed,nav.nav-blue .icon-close:active,nav.nav-blue .icon-close.pressed,nav.nav-blue .icon-button svg:active,nav.nav-blue .icon-button svg.pressed{background-color:var(--modus-navbar-blue-icon-active-bg, #019aeb)}nav.nav-blue .icon-search:active path,nav.nav-blue .icon-search.pressed path,nav.nav-blue .icon-notifications:active path,nav.nav-blue .icon-notifications.pressed path,nav.nav-blue .icon-help:active path,nav.nav-blue .icon-help.pressed path,nav.nav-blue .icon-apps:active path,nav.nav-blue .icon-apps.pressed path,nav.nav-blue .icon-menu:active path,nav.nav-blue .icon-menu.pressed path,nav.nav-blue .icon-close:active path,nav.nav-blue .icon-close.pressed path,nav.nav-blue .icon-button svg:active path,nav.nav-blue .icon-button svg.pressed path{fill:var(--modus-navbar-blue-icon-active-color, #fff)}nav.nav-blue .profile-menu modus-tooltip img.avatar,nav.nav-blue .profile-menu modus-tooltip .initials{background-color:var(--modus-navbar-blue-icon-color, #fff)}nav.nav-blue .profile-menu modus-tooltip .initials{color:var(--modus-navbar-blue-profile-icon-initials-color, #0e416c)}nav.nav-blue .profile-menu modus-tooltip>:first-child:hover,nav.nav-blue .profile-menu modus-tooltip>:first-child:focus{border-color:var(--modus-navbar-blue-icon-color, #fff)}nav.nav-blue .profile-menu modus-tooltip>:first-child:active{outline:0.25rem solid var(--modus-navbar-blue-profile-icon-active-border-color, #019aeb)}nav .product-logo{user-select:none}@media screen and (width > 576px){nav .product-logo .product-logo-secondary{display:none}}@media screen and (width <= 576px){nav .product-logo .product-logo-primary{display:none}}";

const ModusNavbar = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.appsMenuOpen = index.createEvent(this, "appsMenuOpen", 7);
    this.appsMenuAppOpen = index.createEvent(this, "appsMenuAppOpen", 7);
    this.buttonClick = index.createEvent(this, "buttonClick", 7);
    this.helpOpen = index.createEvent(this, "helpOpen", 7);
    this.mainMenuClick = index.createEvent(this, "mainMenuClick", 7);
    this.notificationsMenuOpen = index.createEvent(this, "notificationsMenuOpen", 7);
    this.productLogoClick = index.createEvent(this, "productLogoClick", 7);
    this.profileMenuLinkClick = index.createEvent(this, "profileMenuLinkClick", 7);
    this.profileMenuOpen = index.createEvent(this, "profileMenuOpen", 7);
    this.profileMenuSignOutClick = index.createEvent(this, "profileMenuSignOutClick", 7);
    this.searchChange = index.createEvent(this, "searchChange", 7);
    this.searchMenuClick = index.createEvent(this, "searchMenuClick", 7);
    this.SLOT_MAIN = 'main';
    this.SLOT_NOTIFICATIONS = 'notifications';
    this.apps = undefined;
    this.buttons = undefined;
    this.enableSearchOverlay = undefined;
    this.logoOptions = undefined;
    this.profileMenuOptions = undefined;
    this.reverse = undefined;
    this.searchTooltip = undefined;
    this.showAppsMenu = undefined;
    this.showMainMenu = undefined;
    this.showNotifications = undefined;
    this.showPendoPlaceholder = undefined;
    this.showSearch = undefined;
    this.showShadow = undefined;
    this.showHelp = undefined;
    this.helpUrl = undefined;
    this.variant = 'default';
    this.appsMenuVisible = undefined;
    this.mainMenuVisible = undefined;
    this.notificationsMenuVisible = undefined;
    this.profileMenuVisible = undefined;
    this.slots = [];
    this.componentId = utils.createGuid();
    this.searchOverlayVisible = undefined;
    this.openButtonMenuId = undefined;
  }
  async hideMainMenu() {
    this.mainMenuVisible = false;
  }
  documentClickHandler(event) {
    // Individual menus can prevent this listener from closing them.
    if (event.defaultPrevented) {
      return;
    }
    this.hideMenus();
  }
  linkClickHandler(linkClickEvent) {
    linkClickEvent.stopPropagation();
    this.profileMenuLinkClick.emit(linkClickEvent.detail);
  }
  signOutClickHandler(event) {
    this.profileMenuSignOutClick.emit(event);
  }
  componentDidRender() {
    var _a, _b, _c;
    // If there is an error loading the avatar image, remove it so that the initials show.
    (_a = this.profileAvatarElement) === null || _a === void 0 ? void 0 : _a.addEventListener('error', () => {
      this.profileMenuOptions = Object.assign(Object.assign({}, this.profileMenuOptions), { avatarUrl: null });
    });
    const slotElements = this.element.querySelectorAll('[slot]');
    const slotNames = Array.from(slotElements).map((s) => s.slot) || [];
    const isUpdated = ((_b = this.slots) === null || _b === void 0 ? void 0 : _b.length) !== slotNames.length || ((_c = this.slots) === null || _c === void 0 ? void 0 : _c.filter((s) => !slotNames.includes(s)).length);
    if (isUpdated)
      this.slots = [...slotNames];
  }
  appsMenuClickHandler(event) {
    event.preventDefault();
    this.appsMenuToggle();
  }
  appsMenuKeydownHandler(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.appsMenuToggle();
  }
  appsMenuToggle() {
    if (this.appsMenuVisible) {
      this.appsMenuVisible = false;
    }
    else {
      this.hideMenus();
      this.appsMenuVisible = true;
      this.appsMenuOpen.emit();
    }
  }
  handleAppsMenuAppOpen(event) {
    event.stopPropagation();
    this.appsMenuAppOpen.emit(event.detail);
  }
  mainMenuClickHandler(event) {
    event.preventDefault();
    this.mainMenuToggle(event);
  }
  mainMenuKeydownHandler(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.mainMenuToggle(event);
  }
  mainMenuToggle(event) {
    var _a;
    if ((_a = this.slots) === null || _a === void 0 ? void 0 : _a.includes(this.SLOT_MAIN)) {
      if (this.mainMenuVisible) {
        this.mainMenuVisible = false;
      }
      else {
        this.hideMenus();
        this.mainMenuVisible = true;
      }
    }
    this.mainMenuClick.emit(event);
  }
  notificationsMenuClickHandler(event) {
    event.preventDefault();
    this.notificationsMenuToggle();
  }
  notificationsMenuKeydownHandler(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.notificationsMenuToggle();
  }
  notificationsMenuToggle() {
    if (this.notificationsMenuVisible) {
      this.notificationsMenuVisible = false;
    }
    else {
      this.hideMenus();
      this.notificationsMenuVisible = true;
      this.notificationsMenuOpen.emit();
    }
  }
  profileMenuClickHandler(event) {
    event.preventDefault();
    this.profileMenuToggle();
  }
  profileMenuKeydownHandler(event) {
    if (event.code !== 'Enter') {
      return;
    }
    this.profileMenuToggle();
  }
  profileMenuToggle() {
    if (this.profileMenuVisible) {
      this.profileMenuVisible = false;
    }
    else {
      this.hideMenus();
      this.profileMenuVisible = true;
      this.profileMenuOpen.emit();
    }
  }
  hideMenus() {
    this.appsMenuVisible = false;
    this.mainMenuVisible = false;
    this.notificationsMenuVisible = false;
    this.profileMenuVisible = false;
    this.openButtonMenuId = undefined;
  }
  helpMenuClickHandler(event) {
    event.preventDefault();
    if (this.helpUrl)
      window.open(this.helpUrl, '_blank');
    this.helpOpen.emit();
  }
  searchMenuClickHandler(event) {
    event.preventDefault();
    if (this.enableSearchOverlay) {
      this.searchOverlayVisible = true;
    }
    else {
      this.searchMenuClick.emit();
    }
  }
  searchMenuKeydownHandler(event) {
    if (event.code !== 'Enter') {
      return;
    }
    if (this.enableSearchOverlay) {
      this.searchOverlayVisible = true;
    }
    else {
      this.searchMenuClick.emit();
    }
  }
  searchOverlayCloseEventHandler() {
    this.searchOverlayVisible = false;
    setTimeout(() => {
      var _a;
      (_a = this.searchButton) === null || _a === void 0 ? void 0 : _a.focus();
    }, 100);
  }
  buttonMenuClickHandler(event, button) {
    event.preventDefault();
    this.buttonClick.emit(button.id);
    if (this.openButtonMenuId == button.id) {
      this.hideMenus();
    }
    else {
      this.hideMenus();
      this.openButtonMenuId = button.id;
    }
  }
  render() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    const direction = this.reverse ? 'reverse' : '';
    const shadow = this.showShadow ? 'shadow' : '';
    const variant = `${this.variant === 'default' ? '' : 'nav-' + this.variant}`;
    const sortedButtonList = (_a = this.buttons) === null || _a === void 0 ? void 0 : _a.sort((a, b) => a.orderIndex - b.orderIndex);
    const overlay = this.searchOverlayVisible && (index.h("modus-navbar-search-overlay", { class: "overlay", onClose: () => this.searchOverlayCloseEventHandler(), onSearch: (event) => this.searchChange.emit(event.detail) }));
    return (index.h(index.Host, { id: this.componentId }, index.h("nav", { class: `${direction} ${shadow} ${variant}` }, !this.searchOverlayVisible && (index.h(index.Fragment, null, index.h("div", { class: `left ${direction}` }, this.showMainMenu && (index.h("div", { class: "navbar-button main-menu-button" }, index.h("span", { class: "navbar-button-icon", onKeyDown: (event) => this.mainMenuKeydownHandler(event), tabIndex: 0 }, index.h(IconMap.IconMenu, { size: "24", pressed: this.mainMenuVisible, onClick: (event) => this.mainMenuClickHandler(event) })))), this.mainMenuVisible && (index.h("modus-navbar-main-menu", { navbarId: this.componentId }, index.h("slot", { name: this.SLOT_MAIN }))), this.logoOptions && (index.h(ModusNavbarProductLogo, { logos: this.logoOptions, onClick: (event) => this.productLogoClick.emit(event) }))), index.h("div", { class: `right ${direction}` }, this.showSearch && (index.h("div", { class: "navbar-button search", "data-test-id": "search-menu" }, index.h("span", { class: "navbar-button-icon", onKeyDown: (event) => this.searchMenuKeydownHandler(event), tabIndex: 0, id: "search-button", ref: (el) => (this.searchButton = el) }, index.h("modus-tooltip", { text: (_b = this.searchTooltip) === null || _b === void 0 ? void 0 : _b.text, "aria-label": (_c = this.searchTooltip) === null || _c === void 0 ? void 0 : _c.ariaLabel, position: "bottom" }, index.h(iconSearch.IconSearch, { size: "24", onClick: (event) => this.searchMenuClickHandler(event), pressed: this.searchOverlayVisible }))))), index.h(ModusNavbarButtonList, { buttons: sortedButtonList, reverse: this.reverse, openButtonMenuId: this.openButtonMenuId, onClick: (event, button) => this.buttonMenuClickHandler(event, button) }), this.showNotifications && (index.h("div", { class: "navbar-button", "data-test-id": "notifications-menu" }, index.h("span", { class: "navbar-button-icon", onKeyDown: (event) => this.notificationsMenuKeydownHandler(event), tabIndex: 0 }, index.h(IconMap.IconNotifications, { size: "24", onClick: (event) => this.notificationsMenuClickHandler(event), pressed: this.notificationsMenuVisible })), this.notificationsMenuVisible && (index.h("modus-navbar-notifications-menu", { reverse: this.reverse }, index.h("slot", { name: this.SLOT_NOTIFICATIONS }))))), this.showPendoPlaceholder && index.h("div", { class: 'pendo-placeholder' }), this.showHelp && (index.h("div", { class: "navbar-button", "data-test-id": "help-menu" }, index.h("span", { class: "navbar-button-icon" }, index.h(iconHelp.IconHelp, { size: "24", onClick: (event) => this.helpMenuClickHandler(event) })))), this.showAppsMenu && (index.h("div", { class: "navbar-button", "data-test-id": "apps-menu" }, index.h("span", { class: "navbar-button-icon", onKeyDown: (event) => this.appsMenuKeydownHandler(event), tabIndex: 0 }, index.h(IconMap.IconApps, { size: "24", pressed: this.appsMenuVisible, onClick: (event) => this.appsMenuClickHandler(event) })), this.appsMenuVisible && (index.h("modus-navbar-apps-menu", { apps: this.apps, reverse: this.reverse, onAppOpen: (event) => this.handleAppsMenuAppOpen(event) })))), index.h("div", { class: "profile-menu" }, index.h("modus-tooltip", { text: (_e = (_d = this.profileMenuOptions) === null || _d === void 0 ? void 0 : _d.tooltip) === null || _e === void 0 ? void 0 : _e.text, "aria-label": (_g = (_f = this.profileMenuOptions) === null || _f === void 0 ? void 0 : _f.tooltip) === null || _g === void 0 ? void 0 : _g.ariaLabel, disabled: this.profileMenuVisible, position: "bottom" }, ((_h = this.profileMenuOptions) === null || _h === void 0 ? void 0 : _h.avatarUrl) ? (index.h("img", { class: "avatar", height: "32", src: (_j = this.profileMenuOptions) === null || _j === void 0 ? void 0 : _j.avatarUrl, alt: "Modus navbar profile menu avatar", onClick: (event) => this.profileMenuClickHandler(event), onKeyDown: (event) => this.profileMenuKeydownHandler(event), tabIndex: 0, ref: (el) => (this.profileAvatarElement = el) })) : (index.h("span", { class: "initials", onClick: (event) => this.profileMenuClickHandler(event), onKeyDown: (event) => this.profileMenuKeydownHandler(event), tabIndex: 0 }, (_k = this.profileMenuOptions) === null || _k === void 0 ? void 0 : _k.initials))), this.profileMenuVisible && (index.h("modus-navbar-profile-menu", { "avatar-url": (_l = this.profileMenuOptions) === null || _l === void 0 ? void 0 : _l.avatarUrl, email: (_m = this.profileMenuOptions) === null || _m === void 0 ? void 0 : _m.email, initials: (_o = this.profileMenuOptions) === null || _o === void 0 ? void 0 : _o.initials, links: (_p = this.profileMenuOptions) === null || _p === void 0 ? void 0 : _p.links, reverse: this.reverse, username: (_q = this.profileMenuOptions) === null || _q === void 0 ? void 0 : _q.username, variant: this.variant })))))), overlay)));
  }
  get element() { return index.getElement(this); }
};
ModusNavbar.style = modusNavbarCss;

exports.modus_navbar = ModusNavbar;
