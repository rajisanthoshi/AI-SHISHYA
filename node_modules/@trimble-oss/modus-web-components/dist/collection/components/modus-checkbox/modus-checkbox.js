import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from '@stencil/core';
import { IconCheck } from '../icons/icon-check';
import { IconIndeterminate } from '../icons/icon-indeterminate';
export class ModusCheckbox {
  constructor() {
    this.ariaLabel = undefined;
    this.checked = undefined;
    this.disabled = undefined;
    this.indeterminate = undefined;
    this.label = undefined;
    this.tabIndexValue = 0;
    this.stopPropagation = undefined;
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.handleCheckboxClick(event);
        break;
      case 'Space':
        this.handleCheckboxClick(event);
        break;
    }
  }
  /** Focus the checkbox input */
  async focusCheckbox() {
    this.checkboxContainer.focus();
  }
  componentDidRender() {
    this.checkboxInput.indeterminate = this.indeterminate;
  }
  handleCheckboxClick(event) {
    if (this.disabled) {
      return;
    }
    this.updateChecked();
    this.checkboxClick.emit(this.checked);
    if (this.stopPropagation) {
      event.stopPropagation();
      event.preventDefault();
    }
  }
  updateChecked() {
    this.checked = !this.checked;
    this.checkboxInput.checked = this.checked;
    this.indeterminate = false;
  }
  render() {
    const className = 'modus-checkbox';
    const tabIndexValue = this.disabled ? -1 : this.tabIndexValue;
    return (h("div", { class: className, onClick: (event) => {
        this.handleCheckboxClick(event);
      } }, h("div", { tabindex: tabIndexValue, class: `${this.checked || this.indeterminate ? 'checkbox blue-background checked' : 'checkbox'} ${this.disabled ? 'disabled' : ''}`, ref: (el) => (this.checkboxContainer = el) }, this.indeterminate ? (h("div", { class: 'checkmark checked' }, h(IconIndeterminate, { color: "#FFFFFF", size: "24" }))) : (h("div", { class: this.checked ? 'checkmark checked' : 'checkmark' }, h(IconCheck, { color: "#FFFFFF", size: "24" })))), h("input", { "aria-checked": this.checked, "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel, checked: this.checked, disabled: this.disabled, ref: (el) => (this.checkboxInput = el), type: "checkbox" }), this.label ? h("label", { class: this.disabled ? 'disabled' : null }, this.label) : null));
  }
  static get is() { return "modus-checkbox"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-checkbox.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-checkbox.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The checkbox's aria-label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "checked": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the checkbox is checked."
        },
        "attribute": "checked",
        "reflect": false
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the checkbox is disabled."
        },
        "attribute": "disabled",
        "reflect": false
      },
      "indeterminate": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the checkbox is indeterminate."
        },
        "attribute": "indeterminate",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The checkbox label."
        },
        "attribute": "label",
        "reflect": false
      },
      "tabIndexValue": {
        "type": "any",
        "mutable": true,
        "complexType": {
          "original": "string | number",
          "resolved": "number | string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Tab Index for the checkbox"
        },
        "attribute": "tab-index-value",
        "reflect": false,
        "defaultValue": "0"
      },
      "stopPropagation": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) If you wish to prevent the propagation of your event, you may opt for this."
        },
        "attribute": "stop-propagation",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "checkboxClick",
        "name": "checkboxClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on checkbox click."
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "focusCheckbox": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Focus the checkbox input",
          "tags": []
        }
      }
    };
  }
  static get listeners() {
    return [{
        "name": "keydown",
        "method": "elementKeydownHandler",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
