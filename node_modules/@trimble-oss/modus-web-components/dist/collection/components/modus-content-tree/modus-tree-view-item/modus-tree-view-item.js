var __rest = (this && this.__rest) || function (s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from '@stencil/core';
import { IconMap } from '../../icons/IconMap';
import { TREE_ITEM_SIZE_CLASS } from '../modus-content-tree.constants';
/**
 * @slot collapseIcon - Slot for custom collapse icon
 * @slot dragIcon - Slot for custom drag icon
 * @slot expandIcon - Slot for custom expand icon
 * @slot itemIcon - Slot for custom item icon
 * @slot label - Slot for custom label element
 */
export class ModusTreeViewItem {
  constructor() {
    this.SLOT_COLLAPSE_ICON = 'collapseIcon';
    this.SLOT_DRAG_ICON = 'dragIcon';
    this.SLOT_EXPAND_ICON = 'expandIcon';
    this.SLOT_ITEM_ICON = 'itemIcon';
    this.SLOT_LABEL = 'label';
    this.CustomSlot = (_a) => {
      var { name, className, defaultContent, display = true } = _a, props = __rest(_a, ["name", "className", "defaultContent", "display"]);
      const showDefault = !this.slots.has(name) && defaultContent;
      return (h("div", Object.assign({}, props, { class: `${className || ''} ${display ? '' : 'd-none'}` }), h("slot", { name: name, onSlotchange: () => this.handleDefaultSlotChange() }), showDefault && defaultContent));
    };
    this.disabled = undefined;
    this.draggableItem = undefined;
    this.droppableItem = undefined;
    this.editable = undefined;
    this.label = undefined;
    this.nodeId = undefined;
    this.tabIndexValue = 0;
    this.childrenIds = undefined;
    this.forceUpdate = {};
    this.slots = new Map();
  }
  connectedCallback() {
    // the element is moved in the DOM, register it on the root
    // example, drag and drop
    if (this.options) {
      this.options.onItemAdd(this.element);
    }
  }
  componentDidRender() {
    // Needed for retaining focus on the label input while in edit mode
    if (this.refLabelInput && this.editable) {
      this.refLabelInput.focusInput();
    }
  }
  componentWillLoad() {
    this.itemAdded.emit(this.element);
    this.handleDefaultSlotChange();
  }
  disconnectedCallback() {
    var _a;
    // the element has been moved or deleted in the DOM, deregister it on the root
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.onItemDelete(this.nodeId);
  }
  /** Focus the tree item */
  async focusItem() {
    this.refItemContent.focus();
  }
  /** Focus the checkbox inside a tree item */
  async focusCheckbox() {
    if (this.refCheckbox)
      this.refCheckbox.focusCheckbox();
  }
  getChildrenIds() {
    return Array.from(this.element.children)
      .map((i) => i.nodeId)
      .filter((i) => i);
  }
  handleCheckboxClick(e) {
    if (this.shouldHandleEvent(e)) {
      const { onCheckboxSelection, hasItemChecked } = this.options;
      onCheckboxSelection(this.nodeId);
      this.checkboxClick.emit(hasItemChecked(this.nodeId));
    }
  }
  handleDefaultKeyDown(e, handler) {
    switch (e.code) {
      case 'Space':
      case 'Enter':
        handler();
        e.preventDefault();
        break;
    }
  }
  handleDefaultSlotChange() {
    const slotElements = this.element.querySelectorAll('[slot]');
    const newSlots = new Map();
    // look for icon/label slot added/removed
    let isUpdated = slotElements.length !== this.slots.size;
    slotElements.forEach((e) => {
      newSlots.set(e.slot, true);
      isUpdated = !this.slots.get(e.slot) || isUpdated;
    });
    if (isUpdated)
      this.slots = new Map(newSlots);
  }
  handleDrag(e) {
    if (this.shouldHandleEvent(e)) {
      e.preventDefault();
      const dragContent = this.refItemContent.cloneNode(true);
      this.options.onItemDrag(this.nodeId, dragContent, e);
    }
  }
  handleExpandToggle(e) {
    if (this.shouldHandleEvent(e)) {
      const { onItemExpandToggle, hasItemExpanded } = this.options;
      onItemExpandToggle(this.nodeId);
      this.itemExpandToggle.emit(hasItemExpanded(this.nodeId));
    }
  }
  handleFocus() {
    const { onItemFocus, hasItemFocus } = this.options || {};
    if (!hasItemFocus(this.nodeId)) {
      onItemFocus(this.nodeId);
    }
  }
  handleItemClick(e) {
    if (this.shouldHandleEvent(e)) {
      const { onItemSelection, hasItemSelected } = this.options;
      onItemSelection(this.nodeId, e);
      this.itemClick.emit(hasItemSelected(this.nodeId));
    }
  }
  handleKeyDownTreeItem(e) {
    if (e.defaultPrevented) {
      return; // Do nothing if event already handled
    }
    switch (e.code) {
      case 'Space':
        this.handleExpandToggle(e);
        e.preventDefault();
        e.stopPropagation();
        break;
      case 'Enter':
        this.handleItemClick(e);
        e.stopPropagation();
        break;
    }
  }
  handleLabelInputClick(e) {
    e.stopPropagation();
  }
  handleLabelInputBlur() {
    this.updateLabelInput();
  }
  handleLabelInputKeyDown(e) {
    switch (e.code) {
      case 'Enter':
        e.preventDefault();
        this.updateLabelInput();
        break;
    }
  }
  handlePropDisabledChange(newValue) {
    var _a;
    // sync root
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.onItemUpdate({ nodeId: this.nodeId, disabled: newValue });
  }
  handlePropNodeIdChange(newValue, oldValue) {
    var _a;
    // sync root
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.onItemUpdate({ nodeId: newValue }, { nodeId: oldValue });
  }
  handleRefItemContent(ref) {
    var _a;
    this.refItemContent = ref;
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.onItemUpdate({ nodeId: this.nodeId, content: ref });
  }
  handleTreeSlotChange() {
    var _a, _b;
    const newChildren = this.getChildrenIds();
    const isUpdated = this.childrenIds && newChildren
      ? this.childrenIds.length !== newChildren.filter((c) => this.childrenIds.includes(c)).length
      : ((_a = this.childrenIds) === null || _a === void 0 ? void 0 : _a.length) !== (newChildren === null || newChildren === void 0 ? void 0 : newChildren.length);
    if (this.options) {
      const { onItemUpdate, multiCheckboxSelection, onCheckboxSelection } = this.options;
      // sync root
      onItemUpdate({ nodeId: this.nodeId, children: [...newChildren] });
      // sync the checkboxes if there is any child added/removed
      if (((_b = this.childrenIds) === null || _b === void 0 ? void 0 : _b.length) && this.childrenIds.length !== (newChildren === null || newChildren === void 0 ? void 0 : newChildren.length) && multiCheckboxSelection) {
        onCheckboxSelection(this.nodeId, true);
      }
    }
    // avoid re-render if the value is not updated
    this.childrenIds = isUpdated ? [...newChildren] : this.childrenIds;
  }
  /**
   * @internal
   */
  async initTreeViewItem(newValue) {
    this.options = Object.assign({}, newValue);
    this.handleTreeSlotChange();
    this.updateComponent();
    this.tabIndexValue = this.options.disableTabbing ? -1 : this.tabIndexValue;
  }
  rootOptions() {
    var _a;
    if (this.options) {
      const { checkboxSelection, multiCheckboxSelection, showSelectionIndicator, size, getLevel, hasItemSelected, hasItemDisabled, hasItemIndeterminate, hasItemExpanded, hasItemChecked, } = this.options;
      const selected = hasItemSelected(this.nodeId);
      const checked = hasItemChecked(this.nodeId);
      const indeterminate = hasItemIndeterminate(this.nodeId);
      const expanded = hasItemExpanded(this.nodeId);
      const level = getLevel(this.nodeId);
      const isDisabled = hasItemDisabled(this.nodeId);
      const selectionIndicator = showSelectionIndicator(this.nodeId);
      return {
        selected,
        checked,
        indeterminate,
        expanded,
        expandable: Boolean((_a = this.childrenIds) === null || _a === void 0 ? void 0 : _a.length),
        level,
        checkboxSelection,
        multiCheckboxSelection,
        size,
        isDisabled,
        selectionIndicator,
      };
    }
    else
      return {
        level: 1,
      };
  }
  shouldHandleEvent(e) {
    if (e)
      e.stopPropagation();
    // Do not handle the event when the item is disabled
    return this.options && !this.options.hasItemDisabled(this.nodeId);
  }
  /**
   * @internal
   */
  async updateComponent() {
    this.forceUpdate = Object.assign({}, this.forceUpdate);
  }
  updateLabelInput() {
    if (this.refLabelInput) {
      this.label = this.refLabelInput.value;
    }
    this.refLabelInput = null;
    this.editable = false;
  }
  render() {
    const { selected, checked, indeterminate, expanded, expandable, level, checkboxSelection, multiCheckboxSelection, size, isDisabled, selectionIndicator, } = this.rootOptions();
    const ariaControls = Object.assign(Object.assign({ 'aria-level': level, 'aria-selected': selected ? 'true' : 'false', 'aria-disabled': isDisabled ? 'true' : 'false' }, (expandable ? { 'aria-expanded': expanded ? 'true' : 'false' } : {})), { role: 'treeitem' });
    const sizeClass = `${TREE_ITEM_SIZE_CLASS.get(size || 'standard')}`;
    const tabIndex = isDisabled ? -1 : this.tabIndexValue;
    const treeItemClass = `tree-item ${selected ? 'selected' : ''} ${sizeClass} ${isDisabled ? 'disabled' : ''} `;
    const treeItemChildrenClass = `tree-item-group ${sizeClass} ${expanded ? 'expanded' : ''}`;
    return (h("li", Object.assign({}, ariaControls, { class: `tree-item-container${selectionIndicator ? ' selected-indicator' : ''}` }), h("div", { class: treeItemClass, onFocus: () => this.handleFocus(), onClick: (e) => this.handleItemClick(e), onKeyDown: (e) => this.handleKeyDownTreeItem(e), ref: (el) => this.handleRefItemContent(el), tabindex: tabIndex }, h(this.CustomSlot, { className: `icon-slot drag-icon${!this.draggableItem ? ' hidden' : ''}`, defaultContent: h(IconMap, { icon: "drag" }), name: this.SLOT_DRAG_ICON, onMouseDown: (e) => this.handleDrag(e) }), h("div", { "aria-disabled": "true", style: { paddingLeft: `${(level - 1) * 0.5}rem` } }), h("div", { class: `icon-slot${!expandable ? ' hidden' : ''}`, onClick: (e) => this.handleExpandToggle(e), onKeyDown: (e) => this.handleDefaultKeyDown(e, () => this.handleExpandToggle(e)), tabindex: expandable ? tabIndex : -1 }, h(this.CustomSlot, { className: "inline-flex rotate-right", defaultContent: h(IconMap, { icon: "chevron-down-thick", size: "24" }), display: !expanded, name: this.SLOT_EXPAND_ICON }), h(this.CustomSlot, { className: "inline-flex", defaultContent: h(IconMap, { icon: "chevron-down-thick", size: "24" }), display: expanded, name: this.SLOT_COLLAPSE_ICON })), (checkboxSelection || multiCheckboxSelection) && (h("div", { class: "icon-slot" }, h("modus-checkbox", { checked: checked, disabled: isDisabled, indeterminate: indeterminate, onClick: (e) => this.handleCheckboxClick(e), onKeyDown: (e) => this.handleDefaultKeyDown(e, () => this.handleCheckboxClick(e)), ref: (el) => (this.refCheckbox = el), tabIndexValue: tabIndex }))), h(this.CustomSlot, { className: "icon-slot", name: this.SLOT_ITEM_ICON, display: this.slots.has(this.SLOT_ITEM_ICON) }), h("div", { role: "heading", "aria-level": level, class: "label-slot" }, h(this.CustomSlot, { role: "button", name: this.SLOT_LABEL, defaultContent: this.editable ? (h("modus-text-input", { size: size == 'large' ? 'large' : 'medium', autoFocusInput: true, tabindex: 0, ref: (el) => (this.refLabelInput = el), value: this.label, onClick: (e) => this.handleLabelInputClick(e), onBlur: () => this.handleLabelInputBlur(), onKeyDown: (e) => this.handleLabelInputKeyDown(e) })) : (this.label) }))), h("ul", { class: treeItemChildrenClass, role: "tree" }, h("slot", { onSlotchange: () => this.handleTreeSlotChange() }))));
  }
  static get is() { return "modus-tree-view-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-tree-view-item.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-tree-view-item.css"]
    };
  }
  static get properties() {
    return {
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Disables the tree item"
        },
        "attribute": "disabled",
        "reflect": false
      },
      "draggableItem": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Allows the item to be dragged across the tree"
        },
        "attribute": "draggable-item",
        "reflect": false
      },
      "droppableItem": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Allows the item to be a drop zone so other tree items can be dropped above it"
        },
        "attribute": "droppable-item",
        "reflect": false
      },
      "editable": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Changes the label field into a text box"
        },
        "attribute": "editable",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(required) Label for the tree item"
        },
        "attribute": "label",
        "reflect": true
      },
      "nodeId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(required) Unique tree item identifier"
        },
        "attribute": "node-id",
        "reflect": true
      },
      "tabIndexValue": {
        "type": "any",
        "mutable": true,
        "complexType": {
          "original": "string | number",
          "resolved": "number | string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Tab Index for the tree item"
        },
        "attribute": "tab-index-value",
        "reflect": false,
        "defaultValue": "0"
      }
    };
  }
  static get states() {
    return {
      "childrenIds": {},
      "forceUpdate": {},
      "slots": {}
    };
  }
  static get events() {
    return [{
        "method": "checkboxClick",
        "name": "checkboxClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on tree item checkbox click"
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "itemClick",
        "name": "itemClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on tree item click"
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "itemExpandToggle",
        "name": "itemExpandToggle",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on tree item expand/collapse"
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "itemAdded",
        "name": "itemAdded",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "HTMLElement",
          "resolved": "HTMLElement",
          "references": {
            "HTMLElement": {
              "location": "global"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "focusItem": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Focus the tree item",
          "tags": []
        }
      },
      "focusCheckbox": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Focus the checkbox inside a tree item",
          "tags": []
        }
      },
      "initTreeViewItem": {
        "complexType": {
          "signature": "(newValue: TreeViewItemOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "TreeViewItemOptions": {
              "location": "import",
              "path": "../modus-content-tree.types"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      },
      "updateComponent": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "disabled",
        "methodName": "handlePropDisabledChange"
      }, {
        "propName": "nodeId",
        "methodName": "handlePropNodeIdChange"
      }];
  }
}
