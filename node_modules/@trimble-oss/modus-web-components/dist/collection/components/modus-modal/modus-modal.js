// eslint-disable-next-line
import { h } from '@stencil/core';
import { IconClose } from '../icons/icon-close';
import { FocusWrap, ModalFocusWrapping } from './modal-focus-wrapping';
export class ModusModal {
  constructor() {
    this.ignoreOverlayClick = false;
    this.ariaLabel = undefined;
    this.headerText = undefined;
    this.primaryButtonAriaLabel = undefined;
    this.primaryButtonDisabled = undefined;
    this.primaryButtonText = undefined;
    this.secondaryButtonAriaLabel = undefined;
    this.secondaryButtonDisabled = undefined;
    this.secondaryButtonText = undefined;
    this.zIndex = '1';
    this.backdrop = 'default';
    this.visible = undefined;
  }
  /** Closes the Modal */
  async close() {
    this.visible = false;
    this.closed.emit();
    return Promise.resolve();
  }
  /** Opens the Modal */
  async open() {
    this.visible = true;
    this.opened.emit();
    return Promise.resolve();
  }
  handleModalContentMouseDown() {
    // If Mouse was dragged off from the Modal content, ignore mouse up on overlay preventing Modal to close
    this.ignoreOverlayClick = true;
  }
  documentKeyHandler(event) {
    if (event.code.toUpperCase() === 'ESCAPE')
      this.close();
  }
  handleOverlayClick(event) {
    switch (this.backdrop) {
      case 'static':
        return;
      case 'default':
        if (this.ignoreOverlayClick || !event.target.classList.contains('overlay')) {
          this.ignoreOverlayClick = false;
          return;
        }
        this.close();
    }
  }
  handleEnterKeydown(event, callback) {
    switch (event.code) {
      case 'Enter':
        callback();
        break;
    }
  }
  handleCloseKeydown(event) {
    this.handleEnterKeydown(event, () => this.close());
  }
  handlePrimaryKeydown(event) {
    this.handleEnterKeydown(event, () => this.primaryButtonClick.emit());
  }
  handleSecondaryKeydown(event) {
    this.handleEnterKeydown(event, () => this.secondaryButtonClick.emit());
  }
  componentDidRender() {
    if (this.modalContentRef && this.startTrapRef)
      this.focusWrapping = new ModalFocusWrapping(this.modalContentRef, this.startTrapRef);
  }
  renderModal() {
    return (h("div", { class: "content", ref: (el) => (this.modalContentRef = el), onMouseDown: () => this.handleModalContentMouseDown() }, h(FocusWrap, { id: "startTrap", ref: (el) => (this.startTrapRef = el), onFocus: () => { var _a; return (_a = this.focusWrapping) === null || _a === void 0 ? void 0 : _a.onStartWrapFocus(); } }), this.renderModalHeader(), h("div", { class: "body" }, h("slot", null)), this.renderModalFooter(), h(FocusWrap, { id: "endTrap", onFocus: () => { var _a; return (_a = this.focusWrapping) === null || _a === void 0 ? void 0 : _a.onEndWrapFocus(); } })));
  }
  renderModalHeader() {
    return (h("div", { class: "header" }, this.headerText, h("div", { role: "button", tabindex: 0, "aria-label": "Close", onClick: () => this.close(), onKeyDown: (event) => this.handleCloseKeydown(event) }, h(IconClose, { size: "20" }))));
  }
  renderModalFooter() {
    return (h("div", { class: "footer" }, this.secondaryButtonText && (h("modus-button", { disabled: this.secondaryButtonDisabled, "button-style": "outline", color: "secondary", ariaLabel: this.secondaryButtonAriaLabel, onButtonClick: () => this.secondaryButtonClick.emit(), onKeyDown: (event) => this.handlePrimaryKeydown(event) }, this.secondaryButtonText)), this.primaryButtonText && (h("modus-button", { disabled: this.primaryButtonDisabled, color: "primary", ariaLabel: this.primaryButtonAriaLabel, onButtonClick: () => this.primaryButtonClick.emit(), onKeyDown: (event) => this.handleSecondaryKeydown(event) }, this.primaryButtonText))));
  }
  render() {
    return (h("div", { "aria-hidden": this.closed, "aria-label": this.ariaLabel, class: `modus-modal overlay ${this.visible ? 'visible' : 'hidden'}`, onClick: (event) => this.handleOverlayClick(event), role: "dialog", style: { zIndex: this.zIndex } }, this.renderModal()));
  }
  static get is() { return "modus-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-modal.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-modal.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The modal's aria-label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "headerText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The modal's primary button text."
        },
        "attribute": "header-text",
        "reflect": false
      },
      "primaryButtonAriaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The modal's primary button aria-label."
        },
        "attribute": "primary-button-aria-label",
        "reflect": false
      },
      "primaryButtonDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Disable primary button."
        },
        "attribute": "primary-button-disabled",
        "reflect": false
      },
      "primaryButtonText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The modal's primary button text."
        },
        "attribute": "primary-button-text",
        "reflect": false
      },
      "secondaryButtonAriaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The modal's secondary button aria-label."
        },
        "attribute": "secondary-button-aria-label",
        "reflect": false
      },
      "secondaryButtonDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Disable secondary button."
        },
        "attribute": "secondary-button-disabled",
        "reflect": false
      },
      "secondaryButtonText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The modal's secondary button text."
        },
        "attribute": "secondary-button-text",
        "reflect": false
      },
      "zIndex": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The modal's z-index."
        },
        "attribute": "z-index",
        "reflect": false,
        "defaultValue": "'1'"
      },
      "backdrop": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'default' | 'static'",
          "resolved": "\"default\" | \"static\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The modal's backdrop. Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content"
        },
        "attribute": "backdrop",
        "reflect": false,
        "defaultValue": "'default'"
      }
    };
  }
  static get states() {
    return {
      "visible": {}
    };
  }
  static get events() {
    return [{
        "method": "closed",
        "name": "closed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on modal close."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "opened",
        "name": "opened",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on modal open."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "primaryButtonClick",
        "name": "primaryButtonClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on primary button click."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "secondaryButtonClick",
        "name": "secondaryButtonClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on secondary button click."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "close": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Closes the Modal",
          "tags": []
        }
      },
      "open": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Opens the Modal",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
  static get listeners() {
    return [{
        "name": "keydown",
        "method": "documentKeyHandler",
        "target": "document",
        "capture": false,
        "passive": false
      }];
  }
}
