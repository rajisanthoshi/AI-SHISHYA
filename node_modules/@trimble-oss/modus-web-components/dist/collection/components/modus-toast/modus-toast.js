// eslint-disable-next-line
import { h } from '@stencil/core';
import { IconInfo } from '../icons/icon-info';
import { IconWarning } from '../icons/icon-warning';
import { IconCheckCircle } from '../icons/icon-check-circle';
import { IconError } from '../icons/icon-error';
import { IconHelp } from '../icons/icon-help';
import { IconClose } from '../icons/icon-close';
export class ModusToast {
  constructor() {
    this.iconByType = new Map([
      ['danger', h(IconWarning, { color: '#C81922', size: '18' })],
      ['dark', h(IconInfo, { color: 'white', size: '18' })],
      ['default', h(IconInfo, { size: '18' })],
      ['primary', h(IconInfo, { color: '#0D6AA8', size: '18' })],
      ['secondary', h(IconHelp, { size: '18' })],
      ['success', h(IconCheckCircle, { color: '#5E9331', size: '18' })],
      ['tertiary', h(IconInfo, { size: '18' })],
      ['warning', h(IconError, { color: '#FFBE00', size: '18' })],
    ]);
    this.classByType = new Map([
      ['danger', 'danger'],
      ['dark', 'dark'],
      ['default', 'default'],
      ['primary', 'primary'],
      ['secondary', 'secondary'],
      ['success', 'success'],
      ['tertiary', 'tertiary'],
      ['warning', 'warning'],
    ]);
    this.ariaLabel = undefined;
    this.dismissible = undefined;
    this.showIcon = true;
    this.type = 'default';
  }
  render() {
    const icon = this.iconByType.get(this.type);
    const className = `modus-toast ${this.classByType.get(this.type)}`;
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "status" }, this.showIcon && h("div", { class: "icon" }, icon), h("span", { class: 'text' }, h("slot", null)), h("span", { class: 'close' }, this.dismissible && h(IconClose, { size: '18', onClick: () => this.dismissClick.emit() }))));
  }
  static get is() { return "modus-toast"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-toast.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-toast.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The toast's aria-label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "dismissible": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the toast has a dismiss button."
        },
        "attribute": "dismissible",
        "reflect": false
      },
      "showIcon": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether to show the toasts' icon."
        },
        "attribute": "show-icon",
        "reflect": false,
        "defaultValue": "true"
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'danger' | 'dark' | 'default' | 'primary' | 'secondary' | 'success' | 'warning'",
          "resolved": "\"danger\" | \"dark\" | \"default\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The toasts' type."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "'default'"
      }
    };
  }
  static get events() {
    return [{
        "method": "dismissClick",
        "name": "dismissClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires when the toast is dismissed"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
}
