// eslint-disable-next-line
import { h } from '@stencil/core';
import { IconClose } from '../icons/icon-close';
import { IconError } from '../icons/icon-error';
import { IconWarning } from '../icons/icon-warning';
import { IconCheckCircle } from '../icons/icon-check-circle';
import { IconInfo } from '../icons/icon-info';
export class ModusAlert {
  constructor() {
    this.classByType = new Map([
      ['error', 'type-error'],
      ['info', 'type-info'],
      ['info-gray', 'type-info-gray'],
      ['info-gray-dark', 'type-info-gray-dark'],
      ['success', 'type-success'],
      ['warning', 'type-warning'],
    ]);
    this.infoTypes = ['info', 'info-gray', 'info-gray-dark'];
    this.ariaLabel = undefined;
    this.dismissible = undefined;
    this.message = undefined;
    this.type = 'info';
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Escape':
        if (!this.dismissible) {
          return;
        }
        this.dismissClick.emit();
        break;
    }
  }
  render() {
    const className = `alert ${this.classByType.get(this.type)}`;
    const iconSize = '24';
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "alert", tabIndex: 0 }, this.type === 'error' ? h(IconError, { size: iconSize }) : null, this.infoTypes.includes(this.type) ? h(IconInfo, { size: iconSize }) : null, this.type === 'success' ? h(IconCheckCircle, { size: iconSize }) : null, this.type === 'warning' ? h(IconWarning, { size: iconSize }) : null, h("div", { class: "message" }, this.message, h("slot", null)), this.dismissible ? h(IconClose, { size: "18", onClick: () => this.dismissClick.emit() }) : null));
  }
  static get is() { return "modus-alert"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-alert.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-alert.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The alert's aria-label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "dismissible": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the alert has a dismiss button"
        },
        "attribute": "dismissible",
        "reflect": false
      },
      "message": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The alert message"
        },
        "attribute": "message",
        "reflect": false
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'error' | 'info' | 'info-gray' | 'info-gray-dark' | 'success' | 'warning'",
          "resolved": "\"error\" | \"info\" | \"info-gray\" | \"info-gray-dark\" | \"success\" | \"warning\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The type of alert, sets the color and icon to render"
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "'info'"
      }
    };
  }
  static get events() {
    return [{
        "method": "dismissClick",
        "name": "dismissClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires when the alert is dismissed"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get listeners() {
    return [{
        "name": "keyup",
        "method": "elementKeyupHandler",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
