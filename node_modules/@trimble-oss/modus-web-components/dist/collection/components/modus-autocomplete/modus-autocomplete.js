/* eslint-disable @typescript-eslint/no-explicit-any */
// eslint-disable-next-line
import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from '@stencil/core';
import { IconSearch } from '../icons/icon-search';
const DATA_ID = 'data-id';
const DATA_SEARCH_VALUE = 'data-search-value';
export class ModusAutocomplete {
  constructor() {
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
    this.displayNoResults = () => {
      var _a, _b, _c;
      return this.showNoResultsFoundMessage &&
        this.hasFocus &&
        !((_a = this.visibleOptions) === null || _a === void 0 ? void 0 : _a.length) &&
        !((_b = this.visibleCustomOptions) === null || _b === void 0 ? void 0 : _b.length) &&
        ((_c = this.value) === null || _c === void 0 ? void 0 : _c.length) > 0;
    };
    this.displayOptions = () => { var _a; return this.hasFocus && ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length) > 0 && !this.disabled; };
    this.handleCustomOptionClick = (option) => {
      const optionValue = option.getAttribute(DATA_SEARCH_VALUE);
      const optionId = option.getAttribute(DATA_ID);
      this.handleSearchChange(optionValue);
      this.hasFocus = false;
      this.optionSelected.emit(optionId);
    };
    this.handleOptionClick = (option) => {
      this.handleSearchChange(option.value);
      this.hasFocus = false;
      this.optionSelected.emit(option.id);
    };
    this.handleSearchChange = (search) => {
      this.updateVisibleOptions(search);
      this.updateVisibleCustomOptions(search);
      this.value = search;
      this.valueChange.emit(search);
    };
    this.handleTextInputValueChange = (event) => {
      // Cancel the modus-text-input's value change event or else it will bubble to consumer.
      event.stopPropagation();
      this.handleSearchChange(event.detail);
    };
    this.updateVisibleCustomOptions = (search) => {
      var _a, _b;
      const slotted = (_a = this.el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('slot');
      if (!slotted || typeof slotted.assignedNodes !== 'function') {
        return;
      }
      this.customOptions = slotted.assignedNodes().filter((node) => node.nodeName !== '#text');
      if (!search || search.length === 0) {
        this.visibleCustomOptions = this.customOptions;
        return;
      }
      this.visibleCustomOptions = (_b = this.customOptions) === null || _b === void 0 ? void 0 : _b.filter((o) => {
        return o.getAttribute(DATA_SEARCH_VALUE).toLowerCase().includes(search.toLowerCase());
      });
      this.containsSlottedElements = this.customOptions.length > 0;
    };
    this.updateVisibleOptions = (search) => {
      var _a;
      if (!search || search.length === 0) {
        this.visibleOptions = this.options;
        return;
      }
      this.visibleOptions = (_a = this.options) === null || _a === void 0 ? void 0 : _a.filter((o) => {
        return o.value.toLowerCase().includes(search.toLowerCase());
      });
    };
    // Do not display the slot for the custom options. We use this hidden slot to reference the slot's children.
    this.CustomOptionsSlot = () => (h("div", { style: { display: 'none' } }, h("slot", { onSlotchange: () => this.updateVisibleCustomOptions(this.value) })));
    this.TextInput = () => (h("modus-text-input", { clearable: this.clearable, errorText: this.hasFocus ? '' : this.errorText, includeSearchIcon: this.includeSearchIcon, label: this.label, onValueChange: (searchEvent) => this.handleTextInputValueChange(searchEvent), placeholder: this.placeholder, required: this.required, size: this.size, value: this.value }));
    this.ariaLabel = undefined;
    this.clearable = false;
    this.disabled = undefined;
    this.dropdownMaxHeight = '300px';
    this.dropdownZIndex = '1';
    this.errorText = undefined;
    this.includeSearchIcon = true;
    this.label = undefined;
    this.noResultsFoundText = 'No results found';
    this.noResultsFoundSubtext = 'Check spelling or try a different keyword';
    this.options = undefined;
    this.placeholder = undefined;
    this.readOnly = undefined;
    this.required = undefined;
    this.showNoResultsFoundMessage = true;
    this.size = 'medium';
    this.value = undefined;
    this.containsSlottedElements = false;
    this.hasFocus = false;
    this.visibleOptions = [];
    this.customOptions = [];
    this.visibleCustomOptions = [];
  }
  watchOptions() {
    this.convertOptions();
    this.updateVisibleOptions(this.value);
  }
  componentWillLoad() {
    this.convertOptions();
    if (!this.value) {
      this.visibleOptions = this.options;
    }
    else {
      this.updateVisibleOptions(this.value);
    }
  }
  componentDidLoad() {
    this.updateVisibleCustomOptions(this.value);
  }
  outsideElementClickHandler(event) {
    if (this.el !== event.target || !this.el.contains(event.target)) {
      this.hasFocus = false;
    }
  }
  convertOptions() {
    var _a;
    if (this.options && this.options.length > 0) {
      if (typeof this.options[0] === 'string') {
        this.options = (_a = this.options) === null || _a === void 0 ? void 0 : _a.map((option) => ({
          id: option,
          value: option,
        }));
      }
    }
  }
  render() {
    var _a, _b;
    const classes = `autocomplete ${this.classBySize.get(this.size)}`;
    return (h("div", { "aria-disabled": this.disabled ? 'true' : undefined, "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel, "aria-readonly": this.readOnly, "aria-required": this.required, class: classes, onFocusin: () => (this.hasFocus = true) }, this.TextInput(), h("div", { class: "options-container", style: { maxHeight: this.dropdownMaxHeight, zIndex: this.dropdownZIndex, overflowY: 'auto' } }, h("ul", null, this.displayOptions() &&
      ((_a = this.visibleOptions) === null || _a === void 0 ? void 0 : _a.map((option) => {
        return (h("li", { class: "text-option", onClick: () => this.handleOptionClick(option) }, option.value));
      })), this.displayOptions() &&
      ((_b = this.visibleCustomOptions) === null || _b === void 0 ? void 0 : _b.map((option) => (h("li", { class: "custom-option", onClick: () => this.handleCustomOptionClick(option), innerHTML: option.outerHTML }))))), this.displayNoResults() && h(NoResultsFound, { text: this.noResultsFoundText, subtext: this.noResultsFoundSubtext })), this.CustomOptionsSlot()));
  }
  static get is() { return "modus-autocomplete"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-autocomplete.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-autocomplete.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's aria label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "clearable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether the input has a clear button."
        },
        "attribute": "clearable",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether the input is disabled."
        },
        "attribute": "disabled",
        "reflect": false
      },
      "dropdownMaxHeight": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's dropdown's max height."
        },
        "attribute": "dropdown-max-height",
        "reflect": false,
        "defaultValue": "'300px'"
      },
      "dropdownZIndex": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's dropdown z-index."
        },
        "attribute": "dropdown-z-index",
        "reflect": false,
        "defaultValue": "'1'"
      },
      "errorText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's error text."
        },
        "attribute": "error-text",
        "reflect": false
      },
      "includeSearchIcon": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether the search icon is included."
        },
        "attribute": "include-search-icon",
        "reflect": false,
        "defaultValue": "true"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's label."
        },
        "attribute": "label",
        "reflect": false
      },
      "noResultsFoundText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's no results text."
        },
        "attribute": "no-results-found-text",
        "reflect": false,
        "defaultValue": "'No results found'"
      },
      "noResultsFoundSubtext": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's no results sub-text."
        },
        "attribute": "no-results-found-subtext",
        "reflect": false,
        "defaultValue": "'Check spelling or try a different keyword'"
      },
      "options": {
        "type": "unknown",
        "mutable": true,
        "complexType": {
          "original": "ModusAutocompleteOption[] | string[]",
          "resolved": "ModusAutocompleteOption[] | string[]",
          "references": {
            "ModusAutocompleteOption": {
              "location": "local",
              "path": "/home/runner/work/modus-web-components/modus-web-components/stencil-workspace/src/components/modus-autocomplete/modus-autocomplete.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's options."
        }
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's input placeholder."
        },
        "attribute": "placeholder",
        "reflect": false
      },
      "readOnly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether the autocomplete is read-only."
        },
        "attribute": "read-only",
        "reflect": false
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether the autocomplete is required."
        },
        "attribute": "required",
        "reflect": false
      },
      "showNoResultsFoundMessage": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether to show the no results found message."
        },
        "attribute": "show-no-results-found-message",
        "reflect": false,
        "defaultValue": "true"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'medium' | 'large'",
          "resolved": "\"large\" | \"medium\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's size."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'medium'"
      },
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The autocomplete's search value."
        },
        "attribute": "value",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "containsSlottedElements": {},
      "hasFocus": {},
      "visibleOptions": {},
      "customOptions": {},
      "visibleCustomOptions": {}
    };
  }
  static get events() {
    return [{
        "method": "optionSelected",
        "name": "optionSelected",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires when a dropdown option is selected. Emits the option id."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }, {
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires when the input value changes. Emits the value string."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "options",
        "methodName": "watchOptions"
      }];
  }
  static get listeners() {
    return [{
        "name": "click",
        "method": "outsideElementClickHandler",
        "target": "document",
        "capture": false,
        "passive": false
      }];
  }
}
const NoResultsFound = (props) => (h("div", { class: "no-results" }, h("div", { style: { display: 'flex' } }, h(IconSearch, { size: "28px" }), h("div", { class: "message" }, props.text)), h("div", { class: "subtext" }, props.subtext)));
