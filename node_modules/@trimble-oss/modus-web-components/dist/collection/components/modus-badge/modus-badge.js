// eslint-disable-next-line
import { h } from '@stencil/core';
export class ModusBadge {
  constructor() {
    this.classByColor = new Map([
      ['danger', 'color-danger'],
      ['dark', 'color-dark'],
      ['primary', 'color-primary'],
      ['secondary', 'color-secondary'],
      ['success', 'color-success'],
      ['tertiary', 'color-tertiary'],
      ['warning', 'color-warning'],
    ]);
    this.classBySize = new Map([
      ['small', 'size-small'],
      ['medium', 'size-medium'],
      ['large', 'size-large'],
    ]);
    this.classByType = new Map([
      ['counter', 'type-counter'],
      ['default', 'type-default'],
      ['text', 'type-text'],
    ]);
    this.ariaLabel = undefined;
    this.color = 'primary';
    this.size = 'medium';
    this.type = 'default';
  }
  render() {
    const className = `badge ${this.classByColor.get(this.color)} ${this.classBySize.get(this.size)} ${this.classByType.get(this.type)}`;
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "status" }, h("slot", null)));
  }
  static get is() { return "modus-badge"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-badge.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-badge.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The badge's aria-label"
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'danger' | 'dark' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning'",
          "resolved": "\"danger\" | \"dark\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The color of the badge"
        },
        "attribute": "color",
        "reflect": false,
        "defaultValue": "'primary'"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'small' | 'medium' | 'large'",
          "resolved": "\"large\" | \"medium\" | \"small\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The size of the badge"
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'medium'"
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'counter' | 'default' | 'text'",
          "resolved": "\"counter\" | \"default\" | \"text\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The type of the badge"
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "'default'"
      }
    };
  }
}
