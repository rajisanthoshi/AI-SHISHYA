/* eslint-disable @typescript-eslint/no-unused-vars */
import { h } from '@stencil/core';
import { createGuid } from '../../utils/utils';
export class ModusSelect {
  constructor() {
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
    this.ariaLabel = undefined;
    this.disabled = undefined;
    this.errorText = undefined;
    this.helperText = undefined;
    this.label = undefined;
    this.options = [];
    this.optionsDisplayProp = undefined;
    this.required = undefined;
    this.size = 'medium';
    this.validText = undefined;
    this.value = undefined;
    this.internalValue = undefined;
    this.optionIdMap = new Map();
  }
  handleValueChange(newValue) {
    this.internalValue = newValue;
  }
  connectedCallback() {
    this.internalValue = this.value;
  }
  handleOptionSelect(option) {
    this.valueChange.emit(option);
  }
  handleSelectChange(event) {
    const target = event.target;
    const selectedId = target.value;
    const option = this.optionIdMap.get(selectedId);
    this.handleOptionSelect(option);
  }
  renderSubText() {
    if (this.errorText) {
      return h("label", { class: "sub-text error" }, this.errorText);
    }
    else if (this.validText) {
      return h("label", { class: "sub-text valid" }, this.validText);
    }
    else if (this.helperText) {
      return h("label", { class: "sub-text helper" }, this.helperText);
    }
    return null;
  }
  renderLabel() {
    return this.label || this.required ? (h("div", { class: "label-container" }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null;
  }
  renderOptions() {
    var _a;
    return (_a = this.options) === null || _a === void 0 ? void 0 : _a.map((option) => {
      const optionId = createGuid();
      this.optionIdMap.set(optionId, option);
      return (h("option", { value: optionId, key: optionId, selected: option === this.internalValue }, option[this.optionsDisplayProp]));
    });
  }
  render() {
    var _a;
    const selectClass = `${this.classBySize.get(this.size)} ${this.errorText ? 'error' : this.validText ? 'valid' : this.disabled ? 'disabled' : ''}`;
    return (h("div", { class: this.disabled ? 'disabled' : undefined }, this.renderLabel(), h("span", { class: "input-container" }, h("select", { disabled: this.disabled, class: selectClass, "aria-label": this.ariaLabel, onChange: (event) => {
        this.handleSelectChange(event);
      }, "aria-invalid": !!this.errorText, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString() }, this.renderOptions()), this.renderSubText())));
  }
  static get is() { return "modus-select"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-select.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-select.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The select's aria-label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the input is disabled."
        },
        "attribute": "disabled",
        "reflect": false
      },
      "errorText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's error text."
        },
        "attribute": "error-text",
        "reflect": false
      },
      "helperText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's helper text."
        },
        "attribute": "helper-text",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input label."
        },
        "attribute": "label",
        "reflect": false
      },
      "options": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "unknown[]",
          "resolved": "unknown[]",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The options for the dropdown list."
        },
        "defaultValue": "[]"
      },
      "optionsDisplayProp": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The options property to render in the dropdown list."
        },
        "attribute": "options-display-prop",
        "reflect": false
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the input is required."
        },
        "attribute": "required",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'medium' | 'large'",
          "resolved": "\"large\" | \"medium\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's size."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'medium'"
      },
      "validText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's valid text."
        },
        "attribute": "valid-text",
        "reflect": false
      },
      "value": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "unknown",
          "resolved": "unknown",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input value."
        }
      }
    };
  }
  static get states() {
    return {
      "internalValue": {},
      "optionIdMap": {}
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on input value change."
        },
        "complexType": {
          "original": "unknown",
          "resolved": "unknown",
          "references": {}
        }
      }];
  }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "handleValueChange"
      }];
  }
}
