// eslint-disable-next-line
import { h } from '@stencil/core';
export class ModusSwitch {
  constructor() {
    this.ariaLabel = undefined;
    this.checked = undefined;
    this.disabled = undefined;
    this.label = undefined;
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.handleSwitchClick();
        break;
    }
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Space':
        this.handleSwitchClick();
        break;
    }
  }
  handleSwitchClick() {
    if (this.disabled) {
      return;
    }
    this.updateChecked();
    this.switchClick.emit(this.checked);
  }
  updateChecked() {
    this.checked = !this.checked;
    this.checkboxInput.checked = this.checked;
  }
  render() {
    const containerClassName = `modus-switch ${this.disabled ? 'disabled' : ''}`;
    const switchClassName = `switch ${this.checked ? 'checked' : ''}`;
    return (h("div", { class: containerClassName, onClick: () => this.handleSwitchClick(), tabIndex: 0 }, h("div", { class: switchClassName }, h("span", { class: "slider" })), h("input", { "aria-checked": this.checked, "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel, checked: this.checked, disabled: this.disabled, ref: (el) => (this.checkboxInput = el), role: "switch", type: "checkbox" }), this.label ? h("label", null, this.label) : null));
  }
  static get is() { return "modus-switch"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-switch.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-switch.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The switch's aria-label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "checked": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the switch is checked."
        },
        "attribute": "checked",
        "reflect": false
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the switch is disabled."
        },
        "attribute": "disabled",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The switch label."
        },
        "attribute": "label",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "switchClick",
        "name": "switchClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on switch click."
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get listeners() {
    return [{
        "name": "keydown",
        "method": "elementKeydownHandler",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "keyup",
        "method": "elementKeyupHandler",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
