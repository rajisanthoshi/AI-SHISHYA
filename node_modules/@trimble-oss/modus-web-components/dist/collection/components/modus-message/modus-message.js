// eslint-disable-next-line
import { h } from '@stencil/core';
import { IconInfo } from '../icons/icon-info';
import { IconHelp } from '../icons/icon-help';
import { IconMap } from '../icons/IconMap';
export class ModusMessage {
  constructor() {
    this.classByType = new Map([
      ['info', 'info'],
      ['question', 'question'],
    ]);
    this.ariaLabel = undefined;
    this.icon = undefined;
    this.type = 'info';
  }
  render() {
    const className = `modus-message ${this.classByType.get(this.type)}`;
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "note" }, h("span", { class: "icon" }, this.icon ? (h(IconMap, { icon: this.icon, size: "18" })) : this.type === 'info' ? (h(IconInfo, { size: "18" })) : this.type === 'question' ? (h(IconHelp, { size: "18" })) : null), h("span", { class: "message" }, h("slot", null))));
  }
  static get is() { return "modus-message"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-message.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-message.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The message's aria-label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "(optional) The message's icon."
        },
        "attribute": "icon",
        "reflect": false
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'info' | 'question'",
          "resolved": "\"info\" | \"question\"",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "(optional) The message's type."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "'info'"
      }
    };
  }
}
