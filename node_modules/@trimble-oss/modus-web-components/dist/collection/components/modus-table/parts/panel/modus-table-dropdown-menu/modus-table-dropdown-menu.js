import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from '@stencil/core';
import { IconHorizontalEllipsis } from '../../../../icons/icon-horizontal-ellipsis';
import { KEYBOARD_ENTER, KEYBOARD_ESCAPE, KEYBOARD_SPACE } from '../../../modus-table.constants';
export class ModusTableDropdownMenu {
  constructor() {
    this.table = undefined;
    this.options = undefined;
    this.show = false;
  }
  handleClickOutside(event) {
    // Closing the dropdown when click outside
    const withinBoundaries = event.composedPath();
    if (!withinBoundaries.find((item) => item['className'] === 'dropdown-menu-container')) {
      this.show = false;
    }
  }
  handleIconKeyDown(event) {
    const eventKey = event.key.toLowerCase();
    if (eventKey === KEYBOARD_ENTER || eventKey === KEYBOARD_SPACE) {
      this.show = true;
      event.preventDefault();
    }
    else if (eventKey === KEYBOARD_ESCAPE) {
      this.show = false;
      event.preventDefault();
    }
  }
  handleDropdownKeyDown(event) {
    if (event.key.toLowerCase() === KEYBOARD_ESCAPE) {
      this.show = false;
      this.menuIconContainerRef.focus();
      event.preventDefault();
    }
  }
  render() {
    var _a;
    return (h("div", { class: "dropdown-menu-container" }, h("div", { tabIndex: 0, class: "dropdown-menu-icon", onClick: () => (this.show = !this.show), onKeyDown: (event) => this.handleIconKeyDown(event), ref: (el) => (this.menuIconContainerRef = el) }, h(IconHorizontalEllipsis, { size: "20" })), h("div", { onKeyDown: (event) => this.handleDropdownKeyDown(event), class: `dropdown-menu ${this.show ? 'visible' : ''}` }, h("modus-table-columns-visibility", { table: this.table, columnsVisibility: (_a = this.options) === null || _a === void 0 ? void 0 : _a.columnsVisibility, showDropdown: this.show, menuIconContainerRef: this.menuIconContainerRef, toggleDropdown: (show) => (this.show = show) }))));
  }
  static get is() { return "modus-table-dropdown-menu"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["./modus-table-dropdown-menu.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-table-dropdown-menu.css"]
    };
  }
  static get properties() {
    return {
      "table": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Table<unknown>",
          "resolved": "Table<unknown>",
          "references": {
            "Table": {
              "location": "import",
              "path": "@tanstack/table-core"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Table data."
        }
      },
      "options": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "ModusTableToolbarOptions",
          "resolved": "ModusTableToolbarOptions",
          "references": {
            "ModusTableToolbarOptions": {
              "location": "import",
              "path": "../../../models/modus-table.models"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "dropdown menu options."
        }
      }
    };
  }
  static get states() {
    return {
      "show": {}
    };
  }
  static get elementRef() { return "element"; }
  static get listeners() {
    return [{
        "name": "click",
        "method": "handleClickOutside",
        "target": "document",
        "capture": false,
        "passive": false
      }];
  }
}
