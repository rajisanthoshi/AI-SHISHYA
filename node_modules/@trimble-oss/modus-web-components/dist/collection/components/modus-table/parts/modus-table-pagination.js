import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from '@stencil/core';
import { PAGINATION_PAGEVIEW_TEXT, PAGINATION_SUMMARY_TEXT } from '../modus-table.constants';
export const ModusTablePagination = ({ table, totalCount, pageSizeList, }) => {
  const optionsList = pageSizeList.map((option) => ({ display: option }));
  const { options, getState, getPageCount, getExpandedRowModel, setPageIndex, setPageSize } = table;
  const { pageIndex, pageSize } = getState().pagination;
  const selectedPageSize = optionsList.find((l) => l.display === pageSize);
  const handleChange = (event) => {
    const selectedValue = event.detail;
    setPageSize(Number(selectedValue === null || selectedValue === void 0 ? void 0 : selectedValue.display));
  };
  return (h("div", { class: "pagination-container" }, h("div", { class: "items-per-page" }, h("span", null, PAGINATION_PAGEVIEW_TEXT), h("modus-select", { "options-display-prop": "display", options: optionsList, onValueChange: handleChange, value: selectedPageSize })), h("div", { class: "pagination-and-count" }, h("div", { class: "total-count" }, h("span", null, PAGINATION_SUMMARY_TEXT), h("span", null, pageIndex * pageSize + 1), h("span", null, "-"), h("span", null, pageIndex + 1 === getPageCount()
    ? options.paginateExpandedRows
      ? getExpandedRowModel().rows.length
      : totalCount
    : (pageIndex + 1) * pageSize), h("span", null, "of"), h("span", null, options.paginateExpandedRows ? getExpandedRowModel().rows.length : totalCount), ' '), h("modus-pagination", { "active-page": 1, "max-page": getPageCount(), "min-page": 1, onPageChange: (event) => setPageIndex(event.detail - 1) }))));
};
