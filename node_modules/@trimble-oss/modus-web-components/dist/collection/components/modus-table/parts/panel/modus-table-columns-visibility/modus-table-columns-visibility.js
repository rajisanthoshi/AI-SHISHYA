import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from '@stencil/core';
import { KEYBOARD_DOWN, KEYBOARD_UP, KEYBOARD_ENTER, KEYBOARD_SPACE, KEYBOARD_TAB } from '../../../modus-table.constants';
export class ModusTableColumnsVisibility {
  constructor() {
    this.refItemContent = [];
    this.table = undefined;
    this.columnsVisibility = undefined;
    this.showDropdown = undefined;
    this.menuIconContainerRef = undefined;
    this.toggleDropdown = undefined;
    this.columnsVisibilityState = new Map();
  }
  applyColumnsVisibility() {
    this.table.getAllLeafColumns().forEach((column) => {
      if (this.columnsVisibilityState.has(column.id)) {
        column.toggleVisibility(this.columnsVisibilityState.get(column.id));
      }
    });
    this.toggleDropdown(!this.showDropdown);
    this.menuIconContainerRef.focus();
  }
  closeDropdown() {
    this.columnsVisibilityState = new Map();
    this.toggleDropdown(!this.showDropdown);
    this.menuIconContainerRef.focus();
  }
  handleApplyKeyDown(event) {
    if (event.key.toLowerCase() === KEYBOARD_TAB && !event.shiftKey) {
      this.toggleDropdown(false);
    }
  }
  /**
   * Handling columns dropdown keyboard(arrowUp/arrowDown) navigation
   * @param event keyboard event
   * @param columnIndex column index
   */
  handleColumnItemKeyDown(event, columnIndex) {
    let currentRefItemIndex;
    const recursiveTillAnotherFocusItem = (refItemIndex, isIncrement) => {
      this.refItemContent[refItemIndex]
        ? this.refItemContent[refItemIndex].focus()
        : recursiveTillAnotherFocusItem(isIncrement ? refItemIndex + 1 : refItemIndex - 1, isIncrement);
    };
    const eventKey = event.key.toLowerCase();
    if (eventKey === KEYBOARD_ENTER || eventKey === KEYBOARD_SPACE) {
      this.toggleColumnVisibility(columnIndex);
    }
    else if (eventKey === KEYBOARD_DOWN) {
      currentRefItemIndex = columnIndex + 1 < this.refItemContent.length ? columnIndex + 1 : this.refItemContent.length - 1;
      recursiveTillAnotherFocusItem(currentRefItemIndex, true);
      event.preventDefault();
    }
    else if (eventKey === KEYBOARD_UP) {
      currentRefItemIndex = columnIndex - 1 >= 0 ? columnIndex - 1 : 0;
      recursiveTillAnotherFocusItem(currentRefItemIndex, false);
      event.preventDefault();
    }
  }
  /**
   * Adding column item refs(not disabled)
   */
  handleRefColumnItemContent(el, i, requiredColumn) {
    if (!requiredColumn) {
      this.refItemContent[i] = el;
    }
  }
  toggleColumnVisibility(columnIndex) {
    const shadowRootChildren = this.refItemContent[columnIndex].children[0].shadowRoot
      .children;
    const modusCheckboxElement = shadowRootChildren[shadowRootChildren.length - 1];
    modusCheckboxElement.click();
  }
  /**
   * Returns true if the column is required column
   */
  checkIfRequiredColumn(columnId) {
    var _a, _b;
    return (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(columnId);
  }
  renderColumnsChecklist() {
    const columnVisibilityItemControls = (columnId, columnIndex) => {
      return {
        key: columnId,
        tabIndex: this.checkIfRequiredColumn(columnId) ? -1 : 0,
        ref: (el) => {
          this.handleRefColumnItemContent(el, columnIndex, this.checkIfRequiredColumn(columnId));
        },
        onClick: () => this.toggleColumnVisibility(columnIndex),
        onKeyDown: (event) => this.handleColumnItemKeyDown(event, columnIndex),
      };
    };
    return this.table.getAllLeafColumns().map((column, index) => {
      var _a, _b;
      return (h("div", Object.assign({}, columnVisibilityItemControls(column.id, index), { class: "column-visibility-item" }), h("modus-checkbox", { ariaLabel: column.columnDef.header, label: column.columnDef.header, checked: column.getIsVisible(), onCheckboxClick: (e) => this.columnsVisibilityState.set(column.id, e.detail), disabled: (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(column.id), stopPropagation: true })));
    });
  }
  renderCancelApplyButtons() {
    return (h("div", { class: "column-visibility-buttons-container" }, h("modus-button", { size: "small", buttonStyle: "outline", onClick: () => this.closeDropdown() }, "Cancel"), h("modus-button", { size: "small", onClick: () => this.applyColumnsVisibility(), onKeyDown: (event) => this.handleApplyKeyDown(event) }, "Apply")));
  }
  render() {
    return (h("div", { class: "columns-visibility-menu" }, h("div", { class: "column-visibility-header" }, this.columnsVisibility.title || 'Columns'), h("div", null, this.renderColumnsChecklist()), this.renderCancelApplyButtons()));
  }
  static get is() { return "modus-table-columns-visibility"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["./modus-table-columns-visibility.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-table-columns-visibility.css"]
    };
  }
  static get properties() {
    return {
      "table": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Table<unknown>",
          "resolved": "Table<unknown>",
          "references": {
            "Table": {
              "location": "import",
              "path": "@tanstack/table-core"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Table data."
        }
      },
      "columnsVisibility": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "ModusTableColumnsVisibilityOptions",
          "resolved": "ModusTableColumnsVisibilityOptions",
          "references": {
            "ModusTableColumnsVisibilityOptions": {
              "location": "import",
              "path": "../../../models/modus-table.models"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Column visibility options"
        }
      },
      "showDropdown": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "show-dropdown",
        "reflect": false
      },
      "menuIconContainerRef": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "HTMLDivElement",
          "resolved": "HTMLDivElement",
          "references": {
            "HTMLDivElement": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "toggleDropdown": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "(show: boolean) => void",
          "resolved": "(show: boolean) => void",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      }
    };
  }
  static get states() {
    return {
      "columnsVisibilityState": {}
    };
  }
}
