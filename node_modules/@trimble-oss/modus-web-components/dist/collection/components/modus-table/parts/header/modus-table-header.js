import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from '@stencil/core';
import { KEYBOARD_ENTER } from '../../modus-table.constants';
import { ModusTableColumnResizingHandler } from './modus-table-column-resizing-handler';
import { ModusTableHeaderSort } from './modus-table-header-sort';
/**
 * Modus Table Header
 */
export const ModusTableHeader = ({ table, header, isNestedParentHeader, showSortIconOnHover, columnReorder, isColumnResizing, frozenColumns, onDragStart, onMouseEnterResize, onMouseLeaveResize, }) => {
  let elementRef;
  const { column, id, colSpan, isPlaceholder, getSize } = header;
  return (h("th", { tabindex: `${!isColumnResizing && columnReorder ? '0' : ''}`, key: id, colSpan: colSpan,
    /**
     * isNestedParentHeader: If parent in nested headers, `text-align: center` will be applied.
     * frozenColumns.includes(header.id): Checks if the header is to be frozen or not.
     * columnReorder && !frozenColumns.includes(header.id) && !isColumnResizing: Allows column reorder when column in not frozen and column resize is not active/underway.
     * isColumnResizing: If column resize is active, resize curser is displayed.
     * header.column.getIsResizing(): When a column resize is active/underway.
     */
    class: `
        ${isNestedParentHeader ? 'text-align-center' : ''}
        ${frozenColumns.includes(id) ? 'sticky-left' : ''}
        ${column.getIsResizing() ? 'active-resize' : ''}
      `, style: {
      width: `${getSize()}px`,
    }, "aria-label": column.columnDef.header, role: "columnheader", scope: "col", id: id, ref: (element) => (elementRef = element), onMouseDown: (event) => onDragStart(event, id, elementRef, true), onKeyDown: (event) => {
      if (event.key.toLowerCase() === KEYBOARD_ENTER) {
        onDragStart(event, id, elementRef, false);
      }
    } }, isPlaceholder ? null : ( // header.isPlaceholder is Required for nested column headers to display empty cell
  h("div", { class: column.getCanSort() && 'can-sort' }, h("span", null, column.columnDef.header), column.getCanSort() && (h(ModusTableHeaderSort, { column: column, showSortIconOnHover: showSortIconOnHover, isColumnResizing: isColumnResizing })))), column.getCanResize() ? (h(ModusTableColumnResizingHandler, { table: table, header: header, onMouseEnter: () => onMouseEnterResize(), onMouseLeave: () => onMouseLeaveResize() })) : null));
};
