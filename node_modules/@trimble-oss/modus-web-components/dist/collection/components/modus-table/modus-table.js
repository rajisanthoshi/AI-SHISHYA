import { Host, h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from '@stencil/core';
import { createTable, getCoreRowModel, getExpandedRowModel, getPaginationRowModel, getSortedRowModel, } from '@tanstack/table-core';
import { PAGINATION_DEFAULT_SIZES } from './modus-table.constants';
import { ModusTableCell } from './parts/cell/modus-table-cell';
import { ModusTableHeader } from './parts/header/modus-table-header';
import { ModusTableColumnDropIndicator, ModusTableColumnDragItem } from './parts/modus-table-drag-item';
import { ModusTablePagination } from './parts/modus-table-pagination';
import { ModusTableSummaryRow } from './parts/modus-table-summary-row';
import { TableHeaderDragDrop } from './utilities/table-header-drag-drop.utility';
import { Fragment } from '@stencil/core/internal';
/**
 * @slot customFooter - Slot for custom footer.
 * @slot groupLeft - Slot for custom toolbar options added to the left.
 * @slot groupRight - Slot for custom toolbar options added to the right.
 */
export class ModusTable {
  constructor() {
    this.frozenColumns = []; // Columns will remain on the left and be unable to resize, reorganize, or modify their visibility.
    this.isColumnResizing = false;
    this.tableRef = null;
    this.fillerColumnRef = null;
    this.onMouseMove = (event) => this.handleDragOver(event);
    this.onKeyDown = (event) => this.handleKeyDown(event);
    this.onMouseUp = () => this.handleDrop();
    this.columns = undefined;
    this.data = undefined;
    this.hover = false;
    this.columnResize = false;
    this.fullWidth = false;
    this.sort = false;
    this.showSortIconOnHover = false;
    this.pagination = undefined;
    this.pageSizeList = PAGINATION_DEFAULT_SIZES;
    this.summaryRow = false;
    this.toolbarOptions = null;
    this.toolbar = false;
    this.displayOptions = {
      borderless: false,
      cellBorderless: false,
    };
    this.rowSelection = false;
    this.rowSelectionOptions = {
      multiple: false,
      subRowSelection: false,
    };
    this.columnReorder = false;
    this.rowsExpandable = false;
    this.maxHeight = undefined;
    this.maxWidth = undefined;
    this.columnSizing = {};
    this.columnSizingInfo = {};
    this.expanded = undefined;
    this.sorting = [];
    this.table = undefined;
    this.paginationState = {
      pageIndex: 0,
      pageSize: this.pageSizeList[0],
    };
    this.columnVisibility = {};
    this.columnOrder = [];
    this.itemDragState = undefined;
    this.dragAndDropObj = new TableHeaderDragDrop();
    this.rowSelectionState = {};
  }
  onChangeOfColumns(newVal) {
    var _a;
    if (this.table) {
      this.table.options.columns = (_a = newVal) !== null && _a !== void 0 ? _a : [];
    }
  }
  onChangeOfData() {
    if (this.table) {
      this.table.options.data = this.data;
    }
  }
  updateColumnResize() {
    this.table.options.enableColumnResizing = this.columnResize;
  }
  updateSort() {
    this.table.options.enableSorting = this.sort;
  }
  onChangePanelOptions() {
    var _a;
    if (this.table) {
      this.table.options.enableHiding = !!((_a = this.toolbarOptions) === null || _a === void 0 ? void 0 : _a.columnsVisibility);
    }
    this.onChangeOfRowsExpandable();
  }
  onRowSelectionOptionsChange(newVal, oldVal) {
    if (newVal.multiple !== oldVal.multiple || newVal.subRowSelection !== oldVal.subRowSelection) {
      this.rowSelectionOptions.multiple = newVal.multiple;
      this.rowSelectionOptions.subRowSelection = newVal.subRowSelection;
    }
  }
  updateColumnReorder() {
    this.table.options.state.columnOrder = this.columnOrder;
  }
  onChangeOfRowsExpandable() {
    var _a;
    if (this.rowsExpandable) {
      this.frozenColumns.push(this.columnOrder[0]);
    }
    if ((_a = this.toolbarOptions) === null || _a === void 0 ? void 0 : _a.columnsVisibility) {
      this.toolbarOptions.columnsVisibility.requiredColumns = [
        ...this.toolbarOptions.columnsVisibility.requiredColumns,
        ...this.frozenColumns,
      ];
    }
  }
  documentClickHandler(event) {
    if (event.defaultPrevented) {
      return;
    }
    // Deactivating the column resizing mode if other click events happened
    this.table.setColumnSizingInfo({
      startOffset: null,
      startSize: null,
      deltaOffset: null,
      deltaPercentage: null,
      isResizingColumn: null,
      columnSizingStart: [],
    });
  }
  handleItemDragState(newValue, oldValue) {
    if (oldValue && newValue && oldValue === newValue && this.columnReorder)
      return;
    if (newValue) {
      document.addEventListener('mousemove', this.onMouseMove);
      document.addEventListener('mouseup', this.onMouseUp);
      document.addEventListener('keydown', this.onKeyDown);
    }
    else {
      document.removeEventListener('mousemove', this.onMouseMove);
      document.removeEventListener('mouseup', this.onMouseUp);
      document.removeEventListener('keydown', this.onKeyDown);
    }
  }
  handleDragStart(event, draggedColumnId, elementRef, mouseInteracted) {
    var _a, _b;
    if (this.columnReorder &&
      !this.isColumnResizing &&
      !((_a = this.itemDragState) === null || _a === void 0 ? void 0 : _a.dropColumnId) && // On Enter key press, two functions are called handleDragStart and handleKeyDown, if dropColumnId is present we ignore handleDragStart.
      ((_b = this.itemDragState) === null || _b === void 0 ? void 0 : _b.draggedColumnId) !== draggedColumnId // If same item is selected we don't update itemDragState.
    ) {
      if (this.frozenColumns.includes(draggedColumnId)) {
        return;
      }
      this.itemDragState = null;
      this.dragAndDropObj.setValues(this.columnOrder, this.columnReorder, this.isColumnResizing, this.tableHeaderRowRef, this.table, this.itemDragState, this.frozenColumns);
      this.dragAndDropObj.handleDragStart(event, draggedColumnId, elementRef, mouseInteracted);
      /**
       * SetTimeout
       * If we select another header, after selecting a header for reorder creates an issue(Both selection using keyboard). When tab key is used this issue will not occur.
       * Which displays both the headers in the ModusTableDragItem component, as we are using appendChild.
       * To resolved this issue we have used setTimeout to delay the updating of dragContent is itemDragState.
       * The same issue can be reproduced when a header is selected using keyboard and then one clicks on another header using mouse.
       */
      setTimeout(() => {
        this.itemDragState = Object.assign({}, this.dragAndDropObj.itemDragState);
      }, 10);
    }
  }
  handleDragOver(event) {
    this.dragAndDropObj.handleDragOver(event);
    this.itemDragState = this.dragAndDropObj.itemDragState;
  }
  handleKeyDown(event) {
    this.itemDragState = null;
    this.dragAndDropObj.handleKeyDown(event);
    this.columnOrder = this.dragAndDropObj.columnOrder;
    this.itemDragState = this.dragAndDropObj.itemDragState;
  }
  handleDrop() {
    this.dragAndDropObj.handleDrop();
    this.columnOrder = this.dragAndDropObj.columnOrder;
    this.itemDragState = null;
  }
  componentWillLoad() {
    var _a;
    this.columnOrder = (_a = this.columns) === null || _a === void 0 ? void 0 : _a.map((column) => column.id); // Sets column order
    this.onChangeOfRowsExpandable();
    this.initializeTable();
  }
  componentDidLoad() {
    this.initializeFillerColumn();
  }
  /**
   * Creates a table with some set of options.
   */
  initializeTable() {
    var _a, _b, _c;
    const { multiple, subRowSelection } = this.rowSelectionOptions;
    const options = {
      data: (_a = this.data) !== null && _a !== void 0 ? _a : [],
      columns: (_b = this.columns) !== null && _b !== void 0 ? _b : [],
      state: {
        columnPinning: {},
        columnSizing: {},
        columnSizingInfo: {},
        columnVisibility: this.columnVisibility,
        columnOrder: this.columnReorder ? this.columnOrder : [],
        expanded: this.expanded,
        sorting: this.sorting,
        rowSelection: this.rowSelectionState,
      },
      enableRowSelection: this.rowSelection,
      enableMultiRowSelection: multiple,
      enableSubRowSelection: multiple && subRowSelection,
      enableSorting: this.sort,
      sortingFns: {
        sortForHyperlink: (rowA, rowB, columnId) => {
          var _a, _b;
          const valA = (_a = rowA.getValue(columnId)['display']) !== null && _a !== void 0 ? _a : rowA.getValue(columnId);
          const valB = (_b = rowB.getValue(columnId)['display']) !== null && _b !== void 0 ? _b : rowB.getValue(columnId);
          return valA > valB ? 1 : -1;
        },
      },
      columnResizeMode: 'onChange',
      enableColumnResizing: this.columnResize,
      enableHiding: !!((_c = this.toolbarOptions) === null || _c === void 0 ? void 0 : _c.columnsVisibility),
      sortDescFirst: false,
      onExpandedChange: (updater) => this.updatingState(updater, 'expanded'),
      onSortingChange: (updater) => this.setSorting(updater),
      onRowSelectionChange: (updater) => this.setRowSelection(updater),
      onPaginationChange: (updater) => this.setPagination(updater),
      getCoreRowModel: getCoreRowModel(),
      getPaginationRowModel: this.pagination && getPaginationRowModel(),
      getSortedRowModel: getSortedRowModel(),
      onColumnSizingChange: (updater) => this.updatingState(updater, 'columnSizing'),
      onColumnSizingInfoChange: (updater) => {
        this.updatingState(updater, 'columnSizingInfo');
        this.isColumnResizing = !this.columnSizingInfo.isResizingColumn ? false : true;
      },
      onColumnVisibilityChange: (updater) => this.updatingState(updater, 'columnVisibility'),
      onColumnOrderChange: (updater) => this.updatingState(updater, 'columnOrder'),
      getExpandedRowModel: getExpandedRowModel(),
      getSubRows: (row) => row['subRows'],
      // eslint-disable-next-line @typescript-eslint/no-empty-function
      onStateChange: () => { },
      renderFallbackValue: null,
    };
    this.table = createTable(options);
    if (this.pagination) {
      this.table.setOptions((prev) => (Object.assign(Object.assign({}, prev), { state: Object.assign(Object.assign(Object.assign({}, prev.state), this.table.initialState), { pagination: Object.assign(Object.assign({}, this.paginationState), { pageSize: this.pageSizeList[0] }) }) })));
    }
  }
  initializeFillerColumn() {
    if (this.fillerColumnRef && this.tableRef) {
      this.fillerColumnRef.targetTable = this.tableRef;
    }
  }
  updatingState(updater, key) {
    this[key] = updater instanceof Function ? updater(this[key]) : updater;
    this.table.options.state[key] = this[key];
  }
  setSorting(updater) {
    this.updatingState(updater, 'sorting');
    this.sortChange.emit(this.sorting);
  }
  setPagination(updater) {
    this.paginationState = updater instanceof Function ? updater(this.paginationState) : updater;
    this.table.options.state.pagination = this.paginationState;
  }
  setRowSelection(updater) {
    this.rowSelectionState = typeof updater === 'function' ? updater(this.rowSelectionState) : updater;
    this.table.options.state.rowSelection = this.rowSelectionState;
    this.rowSelectionChange.emit(this.table.getSelectedRowModel().flatRows.map((row) => row.original));
  }
  /**
   * Returns data of a column.
   * @param accessorKey : Column name as key.
   * @returns : Column data as Array or empty array.
   */
  async getColumnData(accessorKey) {
    const columns = this.table.getAllLeafColumns();
    let rowData = [];
    for (let i = 0; i < columns.length; i++) {
      if (columns[i].columnDef['accessorKey'] === accessorKey) {
        rowData = this.table.options.data.map((row) => row[accessorKey]);
        break;
      }
    }
    return rowData;
  }
  /**
   * Toggle the table column visibility
   * @param columnId Column id
   * @param show Boolean value decides to visibility of column
   */
  async toggleColumnVisibility(columnId, show) {
    this.table.getAllLeafColumns().forEach((column) => {
      if (column.id === columnId) {
        column.toggleVisibility(show);
      }
    });
  }
  renderToolBar() {
    return (this.toolbar &&
      this.toolbarOptions && (h("modus-table-toolbar", { table: this.table, options: this.toolbarOptions }, h("div", { slot: "group-left" }, h("slot", { name: "groupLeft" })), h("div", { slot: "group-right" }, h("slot", { name: "groupRight" })))));
  }
  renderMain() {
    const { borderless, cellBorderless } = this.displayOptions || {};
    const tableContainerClass = {
      'table-container': true,
      borderless: borderless,
    };
    return (h(Fragment, null, h("div", { class: tableContainerClass, style: { maxHeight: this.maxHeight } }, this.renderTable(), h("modus-table-filler-column", { "summary-row": this.summaryRow, "cell-borderless": cellBorderless, ref: (el) => (this.fillerColumnRef = el) })), h("slot", { name: "customFooter" })));
  }
  renderTable() {
    var _a, _b;
    const { multiple } = this.rowSelectionOptions;
    const totalSize = this.table.getTotalSize();
    const tableMainClass = {
      borderless: (_a = this.displayOptions) === null || _a === void 0 ? void 0 : _a.borderless,
      'cell-borderless': (_b = this.displayOptions) === null || _b === void 0 ? void 0 : _b.cellBorderless,
    };
    const tableStyle = this.fullWidth
      ? { width: '100%' }
      : totalSize > 0
        ? { width: `${totalSize}px`, tableLayout: 'fixed' }
        : { tableLayout: 'fixed' };
    return (h("table", { "data-test-id": "main-table", class: tableMainClass, style: tableStyle, ref: (el) => (this.tableRef = el) }, this.renderTableHeader(multiple), this.renderTableBody(multiple), this.renderTableFooter()));
  }
  renderTableBody(multipleRowSelection) {
    var _a;
    return (h("tbody", null, (_a = this.table.getRowModel()) === null || _a === void 0 ? void 0 : _a.rows.map((row) => {
      var _a, _b;
      const isChecked = row.getIsSelected() && (((_a = row.subRows) === null || _a === void 0 ? void 0 : _a.length) ? row.getIsAllSubRowsSelected() : true);
      return (h("tr", { key: row.id, class: { 'enable-hover': this.hover, 'row-selected': isChecked } }, this.rowSelection && (h("td", { class: "row-checkbox sticky-left" }, h("modus-checkbox", { checked: isChecked, indeterminate: multipleRowSelection && row.getIsSomeSelected(), onCheckboxClick: () => row.toggleSelected() }))), (_b = row.getVisibleCells()) === null || _b === void 0 ? void 0 :
        _b.map((cell, cellIndex) => {
          return (h(ModusTableCell, { cell: cell, row: row, cellIndex: cellIndex, rowsExpandable: this.rowsExpandable, frozenColumns: this.frozenColumns, onLinkClick: (link) => this.cellLinkClick.emit(link) }));
        })));
    })));
  }
  renderTableHeader(multipleRowSelection) {
    const tableHeadClass = { 'show-resize-cursor': this.isColumnResizing, 'show-column-reorder-cursor': this.columnReorder };
    const headerGroups = this.table.getHeaderGroups();
    return (h("thead", { class: tableHeadClass }, headerGroups === null || headerGroups === void 0 ? void 0 : headerGroups.map((headerGroup, index) => {
      var _a;
      return (h("tr", { key: headerGroup.id, ref: (element) => (this.tableHeaderRowRef = element) }, this.rowSelection && (h("th", { class: "row-checkbox sticky-left" }, multipleRowSelection && (h("modus-checkbox", { checked: this.table.getIsAllRowsSelected(), indeterminate: this.table.getIsSomeRowsSelected(), onCheckboxClick: this.table.getToggleAllRowsSelectedHandler() })))), (_a = headerGroup.headers) === null || _a === void 0 ? void 0 :
        _a.map((header) => {
          return (h(ModusTableHeader, { table: this.table, header: header, isNestedParentHeader: index < headerGroups.length - 1, showSortIconOnHover: this.showSortIconOnHover, columnReorder: this.columnReorder, isColumnResizing: this.isColumnResizing, frozenColumns: this.frozenColumns, onDragStart: (event, id, elementRef, mouseInteracted) => this.handleDragStart(event, id, elementRef, mouseInteracted), onMouseEnterResize: () => (this.isColumnResizing = true), onMouseLeaveResize: () => (this.isColumnResizing = false) }));
        })));
    })));
  }
  renderTableFooter() {
    const footerGroups = this.table.getFooterGroups();
    return this.summaryRow ? (h(ModusTableSummaryRow, { footerGroups: [footerGroups[0]], tableData: this.data, frozenColumns: this.frozenColumns, rowSelection: this.rowSelection })) : null;
  }
  renderPagination() {
    return (this.pagination && (h(ModusTablePagination, { table: this.table, totalCount: this.data.length, pageSizeList: this.pageSizeList })));
  }
  render() {
    var _a;
    return (h(Host, null, h("div", { style: { maxWidth: this.maxWidth } }, this.renderToolBar(), this.renderMain(), this.renderPagination(), h(ModusTableColumnDragItem, { draggingState: this.itemDragState }), h(ModusTableColumnDropIndicator, { position: (_a = this.itemDragState) === null || _a === void 0 ? void 0 : _a.dropIndicator }))));
  }
  static get is() { return "modus-table"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-table.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-table.css"]
    };
  }
  static get properties() {
    return {
      "columns": {
        "type": "unknown",
        "mutable": true,
        "complexType": {
          "original": "ModusTableColumn<unknown>[]",
          "resolved": "ModusTableColumn<unknown, unknown>[]",
          "references": {
            "ModusTableColumn": {
              "location": "import",
              "path": "./models/modus-table.models"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Required) To display headers in the table."
        }
      },
      "data": {
        "type": "unknown",
        "mutable": true,
        "complexType": {
          "original": "unknown[]",
          "resolved": "unknown[]",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Required) To display data in the table."
        }
      },
      "hover": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To enable row hover in table."
        },
        "attribute": "hover",
        "reflect": false,
        "defaultValue": "false"
      },
      "columnResize": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "column-resize",
        "reflect": false,
        "defaultValue": "false"
      },
      "fullWidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "full-width",
        "reflect": false,
        "defaultValue": "false"
      },
      "sort": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To sort data in table."
        },
        "attribute": "sort",
        "reflect": false,
        "defaultValue": "false"
      },
      "showSortIconOnHover": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To display sort icon on hover."
        },
        "attribute": "show-sort-icon-on-hover",
        "reflect": false,
        "defaultValue": "false"
      },
      "pagination": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "pagination",
        "reflect": false
      },
      "pageSizeList": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "number[]",
          "resolved": "number[]",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "defaultValue": "PAGINATION_DEFAULT_SIZES"
      },
      "summaryRow": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To display summary row."
        },
        "attribute": "summary-row",
        "reflect": false,
        "defaultValue": "false"
      },
      "toolbarOptions": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "ModusTableToolbarOptions | null",
          "resolved": "ModusTableToolbarOptions",
          "references": {
            "ModusTableToolbarOptions": {
              "location": "import",
              "path": "./models/modus-table.models"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To display a toolbar, which allows access to table operations like hiding columns."
        },
        "defaultValue": "null"
      },
      "toolbar": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To display a toolbar for the table."
        },
        "attribute": "toolbar",
        "reflect": false,
        "defaultValue": "false"
      },
      "displayOptions": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "ModusTableDisplayOptions",
          "resolved": "ModusTableDisplayOptions",
          "references": {
            "ModusTableDisplayOptions": {
              "location": "import",
              "path": "./models/modus-table.models"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "(Optional) To control display options of table."
        },
        "defaultValue": "{\n    borderless: false,\n    cellBorderless: false,\n  }"
      },
      "rowSelection": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To display checkbox."
        },
        "attribute": "row-selection",
        "reflect": false,
        "defaultValue": "false"
      },
      "rowSelectionOptions": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "ModusTableRowSelectionOptions",
          "resolved": "ModusTableRowSelectionOptions",
          "references": {
            "ModusTableRowSelectionOptions": {
              "location": "import",
              "path": "./models/modus-table.models"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To control multiple row selection."
        },
        "defaultValue": "{\n    multiple: false,\n    subRowSelection: false,\n  }"
      },
      "columnReorder": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To allow column reordering."
        },
        "attribute": "column-reorder",
        "reflect": false,
        "defaultValue": "false"
      },
      "rowsExpandable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To display expanded rows."
        },
        "attribute": "rows-expandable",
        "reflect": false,
        "defaultValue": "false"
      },
      "maxHeight": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To display a vertical scrollbar when the height is exceeded."
        },
        "attribute": "max-height",
        "reflect": false
      },
      "maxWidth": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(Optional) To display a horizontal scrollbar when the width is exceeded."
        },
        "attribute": "max-width",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "columnSizing": {},
      "columnSizingInfo": {},
      "expanded": {},
      "sorting": {},
      "table": {},
      "paginationState": {},
      "columnVisibility": {},
      "columnOrder": {},
      "itemDragState": {},
      "dragAndDropObj": {},
      "rowSelectionState": {}
    };
  }
  static get events() {
    return [{
        "method": "sortChange",
        "name": "sortChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emits event on sort change"
        },
        "complexType": {
          "original": "ModusTableSortingState",
          "resolved": "ColumnSort[]",
          "references": {
            "ModusTableSortingState": {
              "location": "import",
              "path": "./models/modus-table.models"
            }
          }
        }
      }, {
        "method": "rowSelectionChange",
        "name": "rowSelectionChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event details contains the row(s) selected"
        },
        "complexType": {
          "original": "unknown",
          "resolved": "unknown",
          "references": {}
        }
      }, {
        "method": "cellLinkClick",
        "name": "cellLinkClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emits the link that was clicked"
        },
        "complexType": {
          "original": "ModusTableCellLink",
          "resolved": "ModusTableCellLink",
          "references": {
            "ModusTableCellLink": {
              "location": "import",
              "path": "./models/modus-table.models"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "getColumnData": {
        "complexType": {
          "signature": "(accessorKey: string) => Promise<unknown[]>",
          "parameters": [{
              "tags": [{
                  "name": "param",
                  "text": "accessorKey : Column name as key."
                }],
              "text": ": Column name as key."
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "Column": {
              "location": "import",
              "path": "@tanstack/table-core"
            }
          },
          "return": "Promise<unknown[]>"
        },
        "docs": {
          "text": "Returns data of a column.",
          "tags": [{
              "name": "param",
              "text": "accessorKey : Column name as key."
            }, {
              "name": "returns",
              "text": ": Column data as Array or empty array."
            }]
        }
      },
      "toggleColumnVisibility": {
        "complexType": {
          "signature": "(columnId: string, show: boolean) => Promise<void>",
          "parameters": [{
              "tags": [{
                  "name": "param",
                  "text": "columnId Column id"
                }],
              "text": "Column id"
            }, {
              "tags": [{
                  "name": "param",
                  "text": "show Boolean value decides to visibility of column"
                }],
              "text": "Boolean value decides to visibility of column"
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Toggle the table column visibility",
          "tags": [{
              "name": "param",
              "text": "columnId Column id"
            }, {
              "name": "param",
              "text": "show Boolean value decides to visibility of column"
            }]
        }
      }
    };
  }
  static get watchers() {
    return [{
        "propName": "columns",
        "methodName": "onChangeOfColumns"
      }, {
        "propName": "data",
        "methodName": "onChangeOfData"
      }, {
        "propName": "columnResize",
        "methodName": "updateColumnResize"
      }, {
        "propName": "sort",
        "methodName": "updateSort"
      }, {
        "propName": "toolbarOptions",
        "methodName": "onChangePanelOptions"
      }, {
        "propName": "rowSelectionOptions",
        "methodName": "onRowSelectionOptionsChange"
      }, {
        "propName": "columnReorder",
        "methodName": "updateColumnReorder"
      }, {
        "propName": "rowsExpandable",
        "methodName": "onChangeOfRowsExpandable"
      }, {
        "propName": "itemDragState",
        "methodName": "handleItemDragState"
      }];
  }
  static get listeners() {
    return [{
        "name": "click",
        "method": "documentClickHandler",
        "target": "document",
        "capture": false,
        "passive": false
      }];
  }
}
