// eslint-disable-next-line
import { h } from '@stencil/core';
import { IconSearch } from '../icons/icon-search';
import { IconClose } from '../icons/icon-close';
import { IconVisibility } from '../icons/icon-visibility';
import { IconVisibilityOff } from '../icons/icon-visibility-off';
export class ModusTextInput {
  constructor() {
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
    this.ariaLabel = undefined;
    this.autoFocusInput = undefined;
    this.clearable = false;
    this.disabled = undefined;
    this.errorText = undefined;
    this.helperText = undefined;
    this.includeSearchIcon = undefined;
    this.includePasswordTextToggle = true;
    this.inputmode = undefined;
    this.label = undefined;
    this.maxLength = undefined;
    this.minLength = undefined;
    this.placeholder = undefined;
    this.readOnly = undefined;
    this.required = undefined;
    this.size = 'medium';
    this.textAlign = 'left';
    this.type = 'text';
    this.validText = undefined;
    this.value = undefined;
  }
  watchValue(newValue) {
    this.value = newValue;
  }
  /** Focus the input. */
  async focusInput() {
    this.textInput.focus();
  }
  handleClear() {
    this.textInput.value = null;
    this.value = null;
    this.valueChange.emit(null);
  }
  handleOnInput(event) {
    const value = event.currentTarget.value;
    this.value = value;
    this.valueChange.emit(value);
  }
  handleTogglePassword() {
    if (this.textInput.type === 'password') {
      this.textInput.type = 'text';
      this.buttonTogglePassword.setAttribute('aria-label', 'Hide password.');
    }
    else {
      this.textInput.type = 'password';
      this.buttonTogglePassword.setAttribute('aria-label', 'Show password as plain text. ' + 'Warning: this will display your password on the screen.');
    }
  }
  render() {
    var _a, _b;
    const isPassword = this.type === 'password';
    const showPasswordToggle = !!(this.includePasswordTextToggle && isPassword && ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length));
    const isToggleablePassword = isPassword && this.includePasswordTextToggle;
    const showClearIcon = !isToggleablePassword && this.clearable && !this.readOnly && !!this.value;
    const buildTextInputClassNames = () => {
      const classNames = [];
      if (this.includeSearchIcon) {
        classNames.push('has-left-icon');
      }
      if (showClearIcon) {
        classNames.push('has-right-icon');
      }
      classNames.push(`text-align-${this.textAlign}`);
      return classNames.join(' ');
    };
    const buildContainerClassNames = () => {
      const classNames = [];
      classNames.push('modus-text-input');
      if (this.disabled) {
        classNames.push('disabled');
      }
      return classNames.join(' ');
    };
    return (h("div", { class: buildContainerClassNames() }, this.label || this.required ? (h("div", { class: 'label-container' }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null, h("div", { class: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}`, onClick: () => this.textInput.focus() }, this.includeSearchIcon ? h(IconSearch, { size: "16" }) : null, h("input", { "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel, "aria-required": (_b = this.required) === null || _b === void 0 ? void 0 : _b.toString(), class: buildTextInputClassNames(), disabled: this.disabled, inputmode: this.inputmode, maxlength: this.maxLength, minlength: this.minLength, onInput: (event) => this.handleOnInput(event), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this.textInput = el), tabIndex: 0, type: this.type, value: this.value, autofocus: this.autoFocusInput }), showPasswordToggle && (h("div", { class: "icons toggle-password", role: "button", "aria-label": "Show password as plain text. Warning: this will display your password on the screen.", ref: (el) => (this.buttonTogglePassword = el), onClick: () => this.handleTogglePassword() }, h(IconVisibility, { size: "16" }), h(IconVisibilityOff, { size: "16" }))), showClearIcon && (h("span", { class: "icons clear", role: "button", "aria-label": "Clear entry" }, h(IconClose, { onClick: () => this.handleClear(), size: "16" })))), this.errorText ? (h("label", { class: "sub-text error" }, this.errorText)) : this.validText ? (h("label", { class: "sub-text valid" }, this.validText)) : this.helperText ? (h("label", { class: "sub-text helper" }, this.helperText)) : null));
  }
  static get is() { return "modus-text-input"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-text-input.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-text-input.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's aria-label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "autoFocusInput": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Sets autofocus on the input."
        },
        "attribute": "auto-focus-input",
        "reflect": false
      },
      "clearable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the input has a clear button."
        },
        "attribute": "clearable",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the input is disabled."
        },
        "attribute": "disabled",
        "reflect": false
      },
      "errorText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's error state text."
        },
        "attribute": "error-text",
        "reflect": false
      },
      "helperText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's helper text displayed below the input."
        },
        "attribute": "helper-text",
        "reflect": false
      },
      "includeSearchIcon": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the search icon is included."
        },
        "attribute": "include-search-icon",
        "reflect": false
      },
      "includePasswordTextToggle": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the password text toggle icon is included."
        },
        "attribute": "include-password-text-toggle",
        "reflect": false,
        "defaultValue": "true"
      },
      "inputmode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'decimal' | 'email' | 'numeric' | 'search' | 'tel' | 'text' | 'url'",
          "resolved": "\"decimal\" | \"email\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's inputmode."
        },
        "attribute": "inputmode",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's label."
        },
        "attribute": "label",
        "reflect": false
      },
      "maxLength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's maximum length."
        },
        "attribute": "max-length",
        "reflect": false
      },
      "minLength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's minimum length."
        },
        "attribute": "min-length",
        "reflect": false
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's placeholder text."
        },
        "attribute": "placeholder",
        "reflect": false
      },
      "readOnly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the input's content is read-only"
        },
        "attribute": "read-only",
        "reflect": false
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) Whether the input is required."
        },
        "attribute": "required",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'medium' | 'large'",
          "resolved": "\"large\" | \"medium\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's size."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'medium'"
      },
      "textAlign": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'left' | 'right'",
          "resolved": "\"left\" | \"right\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's text alignment."
        },
        "attribute": "text-align",
        "reflect": false,
        "defaultValue": "'left'"
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'text' | 'password'",
          "resolved": "\"password\" | \"text\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's type."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "'text'"
      },
      "validText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's valid state text."
        },
        "attribute": "valid-text",
        "reflect": false
      },
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "(optional) The input's value."
        },
        "attribute": "value",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event that fires on input value change."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "focusInput": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Focus the input.",
          "tags": []
        }
      }
    };
  }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "watchValue"
      }];
  }
}
