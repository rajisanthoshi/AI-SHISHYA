import { ISO_DATE_FORMAT } from '../../modus-date-input/utils/modus-date-input.formatter';
export default class ModusDatePickerState {
  constructor(el) {
    var _a;
    this.isOpen = false;
    this.element = el;
    this.element.showCalendarIcon = ((_a = this.element.showCalendarIcon) === null || _a === void 0 ? void 0 : _a.toString().toUpperCase()) !== 'FALSE' ? true : false;
    this.refresh();
  }
  getDate() {
    return this.date;
  }
  setDate(val) {
    // Converting to ISO8601 'yyyy-mm-dd' format
    if (Number(val)) {
      const year = val.getFullYear();
      const month = val.getMonth() + 1; // Zero based number system for months
      const date = val.getDate();
      this.element.value = `${year}-${month}-${date}`;
      this.element.focusInput();
      this.date = val;
    }
  }
  setError(message = null) {
    this.element.errorText = message;
  }
  resetError() {
    this.element.errorText = null;
  }
  refresh() {
    // Note: Modus Date Input component's value is always in 'yyyy-mm-dd' format
    const dateISORegex = new RegExp(ISO_DATE_FORMAT);
    const parse = dateISORegex.exec(this.element.value);
    if (parse) {
      // first element returns the whole date string
      parse.shift();
      this.date = new Date(parseFloat(parse[0]), parseFloat(parse[1]) - 1, // Zero based number system for months
      parseFloat(parse[2]), 0, 0, 0, 0);
    }
    else
      this.date = null;
  }
  toggleCalendar(val = null) {
    this.isOpen = val !== null ? val : !this.isOpen;
  }
  isCalendarOpen() {
    return this.isOpen;
  }
}
