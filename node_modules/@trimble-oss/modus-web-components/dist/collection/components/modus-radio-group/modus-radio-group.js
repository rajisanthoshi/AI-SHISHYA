// eslint-disable-next-line
import { h } from '@stencil/core';
import { ModusRadioButton } from './modus-radio-button';
export class ModusRadioGroup {
  constructor() {
    this.ariaLabel = undefined;
    this.checkedId = undefined;
    this.name = undefined;
    this.radioButtons = [];
  }
  componentWillLoad() {
    this.radioButtons.forEach((radioButton) => {
      this.checkedId = radioButton.checked ? radioButton.id : this.checkedId;
    });
  }
  handleButtonClick(id) {
    this.setCheckedIdAndUpdateRadioButtons(id);
    this.buttonClick.emit(this.checkedId);
  }
  handleButtonKeydown(event, id) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleButtonClick(id);
  }
  setCheckedIdAndUpdateRadioButtons(id) {
    this.checkedId = id;
    this.radioButtons.forEach((radioButton) => {
      radioButton.checked = radioButton.id === this.checkedId;
    });
  }
  render() {
    return (h("div", { class: "modus-radio-group", "aria-label": this.ariaLabel }, this.radioButtons.map((radioButton) => {
      return (h(ModusRadioButton, { checked: radioButton.checked, disabled: radioButton.disabled, label: radioButton.label, name: this.name, id: radioButton.id, handleButtonClick: (id) => this.handleButtonClick(id), handleKeydown: (event, id) => this.handleButtonKeydown(event, id) }));
    })));
  }
  static get is() { return "modus-radio-group"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modus-radio-group.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modus-radio-group.css"]
    };
  }
  static get properties() {
    return {
      "ariaLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | null",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The radio group's aria-label."
        },
        "attribute": "aria-label",
        "reflect": false
      },
      "checkedId": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The ID of the checked radio button."
        },
        "attribute": "checked-id",
        "reflect": false
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The radio button group name."
        },
        "attribute": "name",
        "reflect": false
      },
      "radioButtons": {
        "type": "unknown",
        "mutable": true,
        "complexType": {
          "original": "RadioButton[]",
          "resolved": "RadioButton[]",
          "references": {
            "RadioButton": {
              "location": "import",
              "path": "./modus-radio-button"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The radio buttons to render."
        },
        "defaultValue": "[]"
      }
    };
  }
  static get events() {
    return [{
        "method": "buttonClick",
        "name": "buttonClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fires on radio button click."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get watchers() {
    return [{
        "propName": "checkedId",
        "methodName": "setCheckedIdAndUpdateRadioButtons"
      }];
  }
}
