import { TreeViewItemOptions, TreeViewItemInfo, TreeViewItemDragState, Position } from '../modus-content-tree.types';
export declare class ModusTreeView {
  element: HTMLElement;
  /** (optional) Enables checkbox selection on each tree item */
  checkboxSelection: boolean;
  /** (optional) Set checked tree items */
  checkedItems: string[];
  /** (optional) Disable usage of `tab` key to focus elements inside a tree view. Use `Arrow Up/Down` for focussing a tree item and `Shift + Arrow Right` for focussing a checkbox inside the item.*/
  disableTabbing: boolean;
  /** (optional) Set expanded tree items */
  expandedItems: string[];
  /** (optional) Enables multiple checkbox selection */
  multiCheckboxSelection: boolean;
  /** (optional) Enables multiple tree items selection */
  multiSelection: boolean;
  /** (optional) Set selected tree items */
  selectedItems: string[];
  /** (optional) The default size of all tree items */
  size: 'condensed' | 'large' | 'standard';
  itemDragState: TreeViewItemDragState;
  private focusItem;
  private items;
  private syncItems;
  private onMouseMove;
  private onMouseUp;
  readonly INITIAL_DRAG_POSITION: Position;
  clearItemDropState(): TreeViewItemDragState;
  handleDocumentClick(event: MouseEvent): void;
  handleItemDragState(newValue: TreeViewItemDragState, oldValue: TreeViewItemDragState): void;
  handleItemDragStart(itemId: string, dragContent: HTMLElement, event: MouseEvent): void;
  handleItemDragOver(event: MouseEvent): void;
  handleItemDrop(): void;
  handleItemsProps(newValue: string[], oldValue: string[]): void;
  handleOptionsProps(): void;
  handleTreeSlotChange(): void;
  getItemWithinBounds(x: any, y: any): TreeViewItemInfo;
  getParentIds(itemId: string): string[];
  addItem(ele: HTMLElement): void;
  componentDidUpdate(): void;
  deleteItem(itemId: string): void;
  getChildrenIds(itemId: string, recursive?: boolean): string[];
  getLevel(itemId: string): number;
  getFirstItem(): string;
  getLastItem(): string;
  getNavigableChildrenIds(parentId: string): string[];
  getNextNavigableItem(itemId: string): string;
  getPrevNavigableItem(itemId: string): string;
  getTreeViewItemOptions(): TreeViewItemOptions;
  handleCheckboxSelection(currentId: string, syncOnly?: boolean): void;
  handleItemAdded(event: CustomEvent<HTMLElement>): void;
  handleItemExpand(itemId: string): void;
  handleItemFocus(itemId: string): void;
  handleItemSelection(itemId: string, event?: KeyboardEvent | MouseEvent): void;
  handleKeyDown(event: KeyboardEvent): void;
  isItemChecked(itemId: string): boolean;
  isItemExpanded(itemId: string): boolean;
  isItemInFocus(itemId: string): boolean;
  isItemSelected(itemId: string): boolean;
  isItemIndeterminate(itemId: string): boolean;
  isItemDisabled(itemId: string): boolean;
  resetFocusItem(): void;
  showSelectionIndicator(itemId: string): boolean;
  syncTreeViewItem(itemId: string): void;
  updateItem(newValue: TreeViewItemInfo, oldValue?: TreeViewItemInfo): void;
  render(): HTMLUListElement;
}
