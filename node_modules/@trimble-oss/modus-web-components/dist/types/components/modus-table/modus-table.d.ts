import { EventEmitter } from '../../stencil-public-runtime';
import { ColumnSizingInfoState, ColumnSizingState, ExpandedState, PaginationState, Table, RowSelectionState, Updater, VisibilityState } from '@tanstack/table-core';
import { ModusTableSortingState } from './models/modus-table.models';
import ColumnDragState from './models/column-drag-state.model';
import { ModusTableColumn, ModusTableCellLink, ModusTableDisplayOptions, ModusTableToolbarOptions, ModusTableRowSelectionOptions } from './models/modus-table.models';
import { TableHeaderDragDrop } from './utilities/table-header-drag-drop.utility';
import { JSX } from '../../stencil-public-runtime';
/**
 * @slot customFooter - Slot for custom footer.
 * @slot groupLeft - Slot for custom toolbar options added to the left.
 * @slot groupRight - Slot for custom toolbar options added to the right.
 */
export declare class ModusTable {
  /** (Required) To display headers in the table. */
  columns: ModusTableColumn<unknown>[];
  onChangeOfColumns(newVal: ModusTableColumn<unknown>[]): void;
  /** (Required) To display data in the table. */
  data: unknown[];
  onChangeOfData(): void;
  /** (Optional) To enable row hover in table. */
  hover: boolean;
  columnResize: boolean;
  updateColumnResize(): void;
  fullWidth: boolean;
  /** (Optional) To sort data in table. */
  sort: boolean;
  updateSort(): void;
  /** (Optional) To display sort icon on hover. */
  showSortIconOnHover: boolean;
  pagination: boolean;
  pageSizeList: number[];
  /** (Optional) To display summary row. */
  summaryRow: boolean;
  /** (Optional) To display a toolbar, which allows access to table operations like hiding columns. */
  toolbarOptions: ModusTableToolbarOptions | null;
  onChangePanelOptions(): void;
  /** (Optional) To display a toolbar for the table. */
  toolbar: boolean;
  /** (Optional) To control display options of table. */
  displayOptions?: ModusTableDisplayOptions;
  /** (Optional) To display checkbox. */
  rowSelection: boolean;
  /** (Optional) To control multiple row selection. */
  rowSelectionOptions: ModusTableRowSelectionOptions;
  onRowSelectionOptionsChange(newVal: ModusTableRowSelectionOptions, oldVal: ModusTableRowSelectionOptions): void;
  /** (Optional) To allow column reordering. */
  columnReorder: boolean;
  updateColumnReorder(): void;
  /** (Optional) To display expanded rows. */
  rowsExpandable: boolean;
  onChangeOfRowsExpandable(): void;
  /** (Optional) To display a vertical scrollbar when the height is exceeded. */
  maxHeight: string;
  /** (Optional) To display a horizontal scrollbar when the width is exceeded. */
  maxWidth: string;
  /** Emits event on sort change */
  sortChange: EventEmitter<ModusTableSortingState>;
  /** Event details contains the row(s) selected */
  rowSelectionChange: EventEmitter<unknown>;
  /** Emits the link that was clicked */
  cellLinkClick: EventEmitter<ModusTableCellLink>;
  /**
   * ColumnSizing has info about width of the column
   * whereas ColumnSizingInfo has the detailed info about resizing of the column
   */
  columnSizing: ColumnSizingState;
  columnSizingInfo: ColumnSizingInfoState;
  expanded: ExpandedState;
  sorting: ModusTableSortingState;
  table: Table<unknown>;
  paginationState: PaginationState;
  columnVisibility: VisibilityState;
  columnOrder: string[];
  itemDragState: ColumnDragState;
  dragAndDropObj: TableHeaderDragDrop;
  rowSelectionState: RowSelectionState;
  private frozenColumns;
  private isColumnResizing;
  private tableRef;
  private tableHeaderRowRef;
  private fillerColumnRef;
  private onMouseMove;
  private onKeyDown;
  private onMouseUp;
  documentClickHandler(event: MouseEvent): void;
  handleItemDragState(newValue: string, oldValue: string): void;
  handleDragStart(event: MouseEvent | KeyboardEvent, draggedColumnId: string, elementRef: HTMLTableCellElement, mouseInteracted: boolean): void;
  handleDragOver(event: MouseEvent): void;
  handleKeyDown(event: KeyboardEvent): void;
  handleDrop(): void;
  componentWillLoad(): void;
  componentDidLoad(): void;
  /**
   * Creates a table with some set of options.
   */
  initializeTable(): void;
  initializeFillerColumn(): void;
  private updatingState;
  setSorting(updater: Updater<ModusTableSortingState>): void;
  setPagination(updater: Updater<PaginationState>): void;
  setRowSelection(updater: Updater<unknown>): void;
  /**
   * Returns data of a column.
   * @param accessorKey : Column name as key.
   * @returns : Column data as Array or empty array.
   */
  getColumnData(accessorKey: string): Promise<unknown[]>;
  /**
   * Toggle the table column visibility
   * @param columnId Column id
   * @param show Boolean value decides to visibility of column
   */
  toggleColumnVisibility(columnId: string, show: boolean): Promise<void>;
  renderToolBar(): JSX.Element | null;
  renderMain(): JSX.Element | null;
  renderTable(): JSX.Element | null;
  renderTableBody(multipleRowSelection: boolean): JSX.Element | null;
  renderTableHeader(multipleRowSelection: boolean): JSX.Element | null;
  renderTableFooter(): JSX.Element | null;
  renderPagination(): JSX.Element | null;
  render(): void;
}
