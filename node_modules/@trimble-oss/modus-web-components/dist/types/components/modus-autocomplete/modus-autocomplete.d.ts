import { EventEmitter } from '../../stencil-public-runtime';
export interface ModusAutocompleteOption {
  id: string;
  value: string;
}
export declare class ModusAutocomplete {
  el: HTMLElement;
  /** The autocomplete's aria label. */
  ariaLabel: string | null;
  /** Whether the input has a clear button. */
  clearable: boolean;
  /** Whether the input is disabled. */
  disabled: boolean;
  /** The autocomplete's dropdown's max height. */
  dropdownMaxHeight: string;
  /** The autocomplete's dropdown z-index. */
  dropdownZIndex: string;
  /** The autocomplete's error text. */
  errorText: string;
  /** Whether the search icon is included. */
  includeSearchIcon: boolean;
  /** The autocomplete's label. */
  label: string;
  /** The autocomplete's no results text. */
  noResultsFoundText: string;
  /** The autocomplete's no results sub-text. */
  noResultsFoundSubtext: string;
  /** The autocomplete's options. */
  options: ModusAutocompleteOption[] | string[];
  watchOptions(): void;
  /** The autocomplete's input placeholder. */
  placeholder: string;
  /** Whether the autocomplete is read-only. */
  readOnly: boolean;
  /** Whether the autocomplete is required. */
  required: boolean;
  /** Whether to show the no results found message. */
  showNoResultsFoundMessage: boolean;
  /** The autocomplete's size. */
  size: 'medium' | 'large';
  /** The autocomplete's search value. */
  value: string;
  /** An event that fires when a dropdown option is selected. Emits the option id. */
  optionSelected: EventEmitter<string>;
  /** An event that fires when the input value changes. Emits the value string. */
  valueChange: EventEmitter<string>;
  containsSlottedElements: boolean;
  hasFocus: boolean;
  visibleOptions: ModusAutocompleteOption[];
  customOptions: Array<any>;
  visibleCustomOptions: Array<any>;
  componentWillLoad(): void;
  componentDidLoad(): void;
  outsideElementClickHandler(event: MouseEvent): void;
  classBySize: Map<string, string>;
  convertOptions(): void;
  displayNoResults: () => boolean;
  displayOptions: () => boolean;
  handleCustomOptionClick: (option: any) => void;
  handleOptionClick: (option: ModusAutocompleteOption) => void;
  handleSearchChange: (search: string) => void;
  handleTextInputValueChange: (event: CustomEvent<string>) => void;
  updateVisibleCustomOptions: (search: string) => void;
  updateVisibleOptions: (search: string) => void;
  CustomOptionsSlot: () => any;
  TextInput: () => any;
  render(): unknown;
}
