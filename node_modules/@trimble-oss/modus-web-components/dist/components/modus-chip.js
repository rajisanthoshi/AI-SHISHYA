import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { I as IconRemove } from './icon-remove.js';
import { I as IconCheck } from './icon-check.js';

const modusChipCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-chip{align-items:center;background-color:var(--modus-chip-bg, #cbcdd6);border:0.0625rem solid var(--modus-chip-bg, #cbcdd6);border-radius:1rem;color:var(--modus-chip-color, #353a40);cursor:pointer;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:1.625rem;justify-content:center;padding:0.125rem 0.25rem;vertical-align:middle}.modus-chip.no-left-icon.no-right-icon{padding:0.125rem 1rem}.modus-chip.small{height:1rem}.modus-chip.small span{font-size:0.75rem}.modus-chip.small img{height:1rem;width:1rem}.modus-chip.small svg{height:1rem;width:1rem}.modus-chip img{border-radius:50%;height:1.5rem;width:1.5rem}.modus-chip span{font-size:0.8125rem;font-weight:600;margin:0 0.25rem}.modus-chip svg:not(.icon-remove) path{fill:var(--modus-chip-color, #353a40) !important}.modus-chip .icon-remove,.modus-chip .icon-remove path{fill:var(--modus-chip-color, #353a40) !important}.modus-chip.style-outline{background-color:transparent;border:0.0625rem solid var(--modus-chip-outline-border-color, #90939f);color:var(--modus-chip-outline-color, #353a40)}.modus-chip.style-outline svg:not(.icon-remove) path{fill:var(--modus-chip-outline-color, #353a40) !important}.modus-chip.style-outline .icon-remove,.modus-chip.style-outline .icon-remove path{fill:var(--modus-chip-outline-color, #353a40) !important}.modus-chip.style-outline.disabled{opacity:var(--modus-chip-outline-disabled-opacity, 0.3)}.modus-chip:hover{background-color:var(--modus-chip-hover-bg, #e0e1e9);border:0.0625rem solid var(--modus-chip-hover-bg, #e0e1e9);color:var(--modus-chip-color, #353a40)}.modus-chip:hover svg:not(.icon-remove) path{fill:var(--modus-chip-color, #353a40) !important}.modus-chip:hover .icon-remove,.modus-chip:hover .icon-remove path{fill:var(--modus-chip-color, #353a40) !important}.modus-chip:hover.style-outline{background-color:var(--modus-chip-outline-hover-bg, #e0e1e9);border:0.0625rem solid var(--modus-chip-outline-hover-border-color, #90939f);color:var(--modus-chip-outline-hover-color, #585c65)}.modus-chip:hover.style-outline svg:not(.icon-remove) path{fill:var(--modus-chip-outline-hover-color, #585c65) !important}.modus-chip:hover.style-outline .icon-remove,.modus-chip:hover.style-outline .icon-remove path{fill:var(--modus-chip-outline-hover-color, #585c65) !important}.modus-chip:active{background-color:var(--modus-chip-active-bg, #217cbb4d);border:0.0625rem solid var(--modus-chip-active-bg, #217cbb4d);color:var(--modus-chip-active-color, #252a2e)}.modus-chip:active svg:not(.icon-remove) path{fill:var(--modus-chip-active-color, #252a2e) !important}.modus-chip:active .icon-remove,.modus-chip:active .icon-remove path{fill:var(--modus-chip-active-color, #252a2e) !important}.modus-chip:active.style-outline{background-color:var(--modus-chip-outline-active-bg, #dcedf9);border:0.0625rem solid var(--modus-chip-outline-active-border-color, #217cbb);color:var(--modus-chip-outline-active-color, #252a2e)}.modus-chip:active.style-outline svg:not(.icon-remove) path{fill:var(--modus-chip-outline-active-color, #252a2e) !important}.modus-chip:active.style-outline .icon-remove,.modus-chip:active.style-outline .icon-remove path{fill:var(--modus-chip-outline-active-border-color, #217cbb) !important}.modus-chip.has-error{background-color:var(--modus-chip-error-bg, #fbd4d7);border:0.0625rem solid var(--modus-chip-error-bg, #fbd4d7);color:var(--modus-chip-error-color, #ab1f26)}.modus-chip.has-error svg:not(.icon-remove) path{fill:var(--modus-chip-error-color, #ab1f26) !important}.modus-chip.has-error .icon-remove,.modus-chip.has-error .icon-remove path{fill:var(--modus-chip-error-color, #ab1f26) !important}.modus-chip.has-error:active{background-color:var(--modus-chip-error-active-bg, #adaeb6);border:0.0625rem solid var(--modus-chip-error-active-border-color, #adaeb6);color:var(--modus-chip-error-active-color, #000)}.modus-chip.has-error:active svg:not(.icon-remove) path{fill:var(--modus-chip-error-active-color, #000) !important}.modus-chip.has-error:active .icon-remove,.modus-chip.has-error:active .icon-remove path{fill:var(--modus-chip-error-active-color, #000) !important}.modus-chip.has-error.style-outline{background-color:var(--modus-chip-outline-error-bg, #fbd4d7);border:0.0625rem solid var(--modus-chip-outline-error-border-color, #ab1f26);color:var(--modus-chip-outline-error-color, #ab1f26)}.modus-chip.has-error.style-outline svg:not(.icon-remove) path{fill:var(--modus-chip-outline-error-color, #ab1f26) !important}.modus-chip.has-error.style-outline .icon-remove,.modus-chip.has-error.style-outline .icon-remove path{fill:var(--modus-chip-outline-error-color, #ab1f26) !important}.modus-chip.has-error.style-outline:active{background-color:var(--modus-chip-outline-error-active-bg, #d3d5dc);border:0.0625rem solid var(--modus-chip-outline-error-active-border-color, #7a7b80);color:var(--modus-chip-outline-error-active-color, #252a2e)}.modus-chip.has-error.style-outline:active svg:not(.icon-remove) path{fill:var(--modus-chip-outline-error-active-color, #252a2e) !important}.modus-chip.has-error.style-outline:active .icon-remove,.modus-chip.has-error.style-outline:active .icon-remove path{fill:var(--modus-chip-outline-error-active-color, #252a2e) !important}.modus-chip.disabled{opacity:var(--modus-chip-disabled-opacity, 0.3);pointer-events:none}";

const ModusChip$1 = /*@__PURE__*/ proxyCustomElement(class ModusChip extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.chipClick = createEvent(this, "chipClick", 7);
    this.closeClick = createEvent(this, "closeClick", 7);
    this.classByChipStyle = new Map([
      ['outline', 'style-outline'],
      ['solid', 'style-solid'],
    ]);
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['small', 'small'],
    ]);
    this.ariaLabel = undefined;
    this.chipStyle = 'solid';
    this.disabled = false;
    this.hasError = false;
    this.imageUrl = undefined;
    this.showCheckmark = false;
    this.showClose = false;
    this.size = 'medium';
    this.value = undefined;
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Escape':
        if (!this.showClose) {
          return;
        }
        this.closeClick.emit(event);
        break;
    }
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.chipClick.emit(event);
        break;
    }
  }
  onChipClick(event) {
    if (event.defaultPrevented) {
      return;
    } // Don't emit chipClick if closeClick has emitted.
    this.chipClick.emit(event);
  }
  onCloseClick(event) {
    this.closeClick.emit(event);
    event.preventDefault();
  }
  render() {
    const chipClass = `
      modus-chip ${this.disabled ? 'disabled' : ''}
      ${this.hasError ? 'has-error' : ''}
      ${this.classByChipStyle.get(this.chipStyle)}
      ${this.classBySize.get(this.size)}
      ${!this.showCheckmark && !this.imageUrl ? 'no-left-icon' : null}
      ${!this.showClose ? 'no-right-icon' : null}
    `;
    return (h("div", { "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel, class: chipClass, onClick: this.disabled ? null : (event) => this.onChipClick(event), tabIndex: 0 }, this.imageUrl ? (h("img", { src: this.imageUrl, alt: "" })) : this.showCheckmark ? (h(IconCheck, { size: '24' })) : null, h("span", null, this.value), this.showClose ? (h(IconRemove, { onClick: this.disabled ? null : (event) => this.onCloseClick(event), size: '24' })) : null));
  }
  static get style() { return modusChipCss; }
}, [1, "modus-chip", {
    "ariaLabel": [1, "aria-label"],
    "chipStyle": [1, "chip-style"],
    "disabled": [4],
    "hasError": [4, "has-error"],
    "imageUrl": [1, "image-url"],
    "showCheckmark": [4, "show-checkmark"],
    "showClose": [4, "show-close"],
    "size": [1],
    "value": [1]
  }, [[0, "keyup", "elementKeyupHandler"], [0, "keydown", "elementKeydownHandler"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-chip"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-chip":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusChip$1);
      }
      break;
  } });
}

const ModusChip = ModusChip$1;
const defineCustomElement = defineCustomElement$1;

export { ModusChip, defineCustomElement };
