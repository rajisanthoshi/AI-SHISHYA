import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { I as IconClose } from './icon-close.js';
import { d as defineCustomElement$1 } from './modus-text-input2.js';

const modusNavbarSearchOverlayCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{display:block}.overlay-wrapper{display:flex;flex-shrink:0;gap:45px}.overlay-wrapper .search-box{display:flex;flex-grow:2;justify-content:center}.overlay-wrapper .search-box modus-text-input{display:block;margin-left:1rem;max-width:764px;min-width:185px;width:100%}.overlay-wrapper .navbar-button{justify-content:end;padding-right:1rem}@media screen and (width <= 576px){.overlay-wrapper .navbar-button{padding-right:0.5rem}}";

const ModusNavbarSearchOverlay = /*@__PURE__*/ proxyCustomElement(class ModusNavbarSearchOverlay extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.close = createEvent(this, "close", 7);
    this.search = createEvent(this, "search", 7);
  }
  componentDidRender() {
    var _a;
    (_a = this.modusTextInput) === null || _a === void 0 ? void 0 : _a.focusInput();
  }
  render() {
    return (h(Host, null, h("div", { class: "overlay-wrapper" }, h("div", { class: "search-box" }, h("modus-text-input", { placeholder: "Search", size: "large", onValueChange: (event) => this.search.emit(event.detail), "include-search-icon": true, ref: (el) => (this.modusTextInput = el) })), h("div", { class: "navbar-button", "data-test-id": "close-button" }, h("span", { class: "navbar-button-icon", tabIndex: 0, onKeyDown: (event) => event.code === 'Enter' && this.close.emit(), onClick: () => this.close.emit() }, h(IconClose, { size: "24" }))))));
  }
  get element() { return this; }
  static get style() { return modusNavbarSearchOverlayCss; }
}, [0, "modus-navbar-search-overlay"]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-navbar-search-overlay", "modus-text-input"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-navbar-search-overlay":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusNavbarSearchOverlay);
      }
      break;
    case "modus-text-input":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { ModusNavbarSearchOverlay as M, defineCustomElement as d };
