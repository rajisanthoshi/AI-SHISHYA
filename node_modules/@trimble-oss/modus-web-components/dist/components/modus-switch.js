import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';

const modusSwitchCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-switch{align-items:center;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.75rem}.modus-switch .switch{background-color:var(--modus-switch-bg, #90939f);border:0.125rem var(--modus-switch-border-color, #90939f) solid;border-radius:1rem;height:0.875rem;position:relative;width:1.875rem}.modus-switch .switch .slider{background-color:var(--modus-switch-bg, #90939f);border-radius:1rem;cursor:pointer;height:0.875rem;inset:0;position:absolute;top:0;width:1.875rem}.modus-switch .switch .slider::before{background-color:#fff;border-radius:50%;content:\"\";height:0.875rem;position:absolute;transition:0.1s;width:0.875rem}.modus-switch .switch.checked{background-color:var(--modus-switch-selected-border-color, #217cbb);border-color:var(--modus-switch-selected-border-color, #217cbb)}.modus-switch .switch.checked .slider{background-color:var(--modus-switch-selected-border-color, #217cbb)}.modus-switch .switch.checked .slider::before{transform:translateX(1rem)}.modus-switch .switch:active .slider{background-color:var(--modus-switch-selected-border-color, #217cbb)}.modus-switch:hover .switch{border-color:var(--modus-switch-hover-border-color, #217cbb)}.modus-switch input{display:none}.modus-switch label{color:var(--modus-switch-label-color, #464b52);margin-left:0.5rem}.modus-switch.disabled{opacity:var(--modus-check-input-disabled-opacity, 0.3);pointer-events:none}";

const ModusSwitch$1 = /*@__PURE__*/ proxyCustomElement(class ModusSwitch extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.switchClick = createEvent(this, "switchClick", 7);
    this.ariaLabel = undefined;
    this.checked = undefined;
    this.disabled = undefined;
    this.label = undefined;
  }
  elementKeydownHandler(event) {
    switch (event.code) {
      case 'Enter':
        this.handleSwitchClick();
        break;
    }
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Space':
        this.handleSwitchClick();
        break;
    }
  }
  handleSwitchClick() {
    if (this.disabled) {
      return;
    }
    this.updateChecked();
    this.switchClick.emit(this.checked);
  }
  updateChecked() {
    this.checked = !this.checked;
    this.checkboxInput.checked = this.checked;
  }
  render() {
    const containerClassName = `modus-switch ${this.disabled ? 'disabled' : ''}`;
    const switchClassName = `switch ${this.checked ? 'checked' : ''}`;
    return (h("div", { class: containerClassName, onClick: () => this.handleSwitchClick(), tabIndex: 0 }, h("div", { class: switchClassName }, h("span", { class: "slider" })), h("input", { "aria-checked": this.checked, "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel, checked: this.checked, disabled: this.disabled, ref: (el) => (this.checkboxInput = el), role: "switch", type: "checkbox" }), this.label ? h("label", null, this.label) : null));
  }
  static get style() { return modusSwitchCss; }
}, [1, "modus-switch", {
    "ariaLabel": [1, "aria-label"],
    "checked": [1028],
    "disabled": [4],
    "label": [1]
  }, [[0, "keydown", "elementKeydownHandler"], [0, "keyup", "elementKeyupHandler"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-switch"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-switch":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusSwitch$1);
      }
      break;
  } });
}

const ModusSwitch = ModusSwitch$1;
const defineCustomElement = defineCustomElement$1;

export { ModusSwitch, defineCustomElement };
