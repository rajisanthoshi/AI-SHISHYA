import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './modus-button2.js';
import { d as defineCustomElement$1 } from './modus-checkbox2.js';

const SORTED_ASCENDING = 'Sorted Ascending';
const SORTED_DESCENDING = 'Sorted Descending';
const SORT_ASCENDING = 'Sort Ascending';
const SORT_DESCENDING = 'Sort Descending';
const COLUMN_DEF_DATATYPE_KEY = 'dataType';
const COLUMN_DEF_SHOWTOTAL = 'showTotal';
const COLUMN_DEF_ROW_SELECTION_ID = 'row-checkbox';
const COLUMN_DEF_ROW_SELECTION_CSS = 'row-checkbox';
const COLUMN_DEF_DATATYPE_INTEGER = 'integer';
const COLUMN_DEF_DATATYPE_LINK = 'link';
const PAGINATION_DEFAULT_SIZES = [10, 20, 30];
const PAGINATION_PAGEVIEW_TEXT = 'Page View';
const PAGINATION_SUMMARY_TEXT = 'Showing result';
// Keyboard key constants
const KEYBOARD_ENTER = 'enter';
const KEYBOARD_TAB = 'tab';
const KEYBOARD_LEFT = 'arrowleft';
const KEYBOARD_RIGHT = 'arrowright';
const KEYBOARD_UP = 'arrowup';
const KEYBOARD_DOWN = 'arrowdown';
const KEYBOARD_SPACE = ' ';
const KEYBOARD_ESCAPE = 'escape';

const modusTableColumnsVisibilityCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.columns-visibility-menu .column-visibility-header{color:var(--modus-primary, #019aeb);font-size:0.875rem;font-weight:700;line-height:18px;margin:12px;margin-bottom:5px}.columns-visibility-menu .column-visibility-item{padding:5px 5px 5px 12px}.columns-visibility-menu .column-visibility-item:focus,.columns-visibility-menu .column-visibility-item:hover{background:var(--modus-group-item-hover-bg, #e0e1e9);outline:none}.columns-visibility-menu .column-visibility-item:last-child{margin-bottom:10px}.columns-visibility-menu .column-visibility-buttons-container{margin-bottom:12px}modus-button{padding:12px 0 0 12px}";

const ModusTableColumnsVisibility = /*@__PURE__*/ proxyCustomElement(class ModusTableColumnsVisibility extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.refItemContent = [];
    this.table = undefined;
    this.columnsVisibility = undefined;
    this.showDropdown = undefined;
    this.menuIconContainerRef = undefined;
    this.toggleDropdown = undefined;
    this.columnsVisibilityState = new Map();
  }
  applyColumnsVisibility() {
    this.table.getAllLeafColumns().forEach((column) => {
      if (this.columnsVisibilityState.has(column.id)) {
        column.toggleVisibility(this.columnsVisibilityState.get(column.id));
      }
    });
    this.toggleDropdown(!this.showDropdown);
    this.menuIconContainerRef.focus();
  }
  closeDropdown() {
    this.columnsVisibilityState = new Map();
    this.toggleDropdown(!this.showDropdown);
    this.menuIconContainerRef.focus();
  }
  handleApplyKeyDown(event) {
    if (event.key.toLowerCase() === KEYBOARD_TAB && !event.shiftKey) {
      this.toggleDropdown(false);
    }
  }
  /**
   * Handling columns dropdown keyboard(arrowUp/arrowDown) navigation
   * @param event keyboard event
   * @param columnIndex column index
   */
  handleColumnItemKeyDown(event, columnIndex) {
    let currentRefItemIndex;
    const recursiveTillAnotherFocusItem = (refItemIndex, isIncrement) => {
      this.refItemContent[refItemIndex]
        ? this.refItemContent[refItemIndex].focus()
        : recursiveTillAnotherFocusItem(isIncrement ? refItemIndex + 1 : refItemIndex - 1, isIncrement);
    };
    const eventKey = event.key.toLowerCase();
    if (eventKey === KEYBOARD_ENTER || eventKey === KEYBOARD_SPACE) {
      this.toggleColumnVisibility(columnIndex);
    }
    else if (eventKey === KEYBOARD_DOWN) {
      currentRefItemIndex = columnIndex + 1 < this.refItemContent.length ? columnIndex + 1 : this.refItemContent.length - 1;
      recursiveTillAnotherFocusItem(currentRefItemIndex, true);
      event.preventDefault();
    }
    else if (eventKey === KEYBOARD_UP) {
      currentRefItemIndex = columnIndex - 1 >= 0 ? columnIndex - 1 : 0;
      recursiveTillAnotherFocusItem(currentRefItemIndex, false);
      event.preventDefault();
    }
  }
  /**
   * Adding column item refs(not disabled)
   */
  handleRefColumnItemContent(el, i, requiredColumn) {
    if (!requiredColumn) {
      this.refItemContent[i] = el;
    }
  }
  toggleColumnVisibility(columnIndex) {
    const shadowRootChildren = this.refItemContent[columnIndex].children[0].shadowRoot
      .children;
    const modusCheckboxElement = shadowRootChildren[shadowRootChildren.length - 1];
    modusCheckboxElement.click();
  }
  /**
   * Returns true if the column is required column
   */
  checkIfRequiredColumn(columnId) {
    var _a, _b;
    return (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(columnId);
  }
  renderColumnsChecklist() {
    const columnVisibilityItemControls = (columnId, columnIndex) => {
      return {
        key: columnId,
        tabIndex: this.checkIfRequiredColumn(columnId) ? -1 : 0,
        ref: (el) => {
          this.handleRefColumnItemContent(el, columnIndex, this.checkIfRequiredColumn(columnId));
        },
        onClick: () => this.toggleColumnVisibility(columnIndex),
        onKeyDown: (event) => this.handleColumnItemKeyDown(event, columnIndex),
      };
    };
    return this.table.getAllLeafColumns().map((column, index) => {
      var _a, _b;
      return (h("div", Object.assign({}, columnVisibilityItemControls(column.id, index), { class: "column-visibility-item" }), h("modus-checkbox", { ariaLabel: column.columnDef.header, label: column.columnDef.header, checked: column.getIsVisible(), onCheckboxClick: (e) => this.columnsVisibilityState.set(column.id, e.detail), disabled: (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(column.id), stopPropagation: true })));
    });
  }
  renderCancelApplyButtons() {
    return (h("div", { class: "column-visibility-buttons-container" }, h("modus-button", { size: "small", buttonStyle: "outline", onClick: () => this.closeDropdown() }, "Cancel"), h("modus-button", { size: "small", onClick: () => this.applyColumnsVisibility(), onKeyDown: (event) => this.handleApplyKeyDown(event) }, "Apply")));
  }
  render() {
    return (h("div", { class: "columns-visibility-menu" }, h("div", { class: "column-visibility-header" }, this.columnsVisibility.title || 'Columns'), h("div", null, this.renderColumnsChecklist()), this.renderCancelApplyButtons()));
  }
  static get style() { return modusTableColumnsVisibilityCss; }
}, [1, "modus-table-columns-visibility", {
    "table": [16],
    "columnsVisibility": [16],
    "showDropdown": [4, "show-dropdown"],
    "menuIconContainerRef": [16],
    "toggleDropdown": [16],
    "columnsVisibilityState": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-table-columns-visibility", "modus-button", "modus-checkbox"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-table-columns-visibility":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusTableColumnsVisibility);
      }
      break;
    case "modus-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "modus-checkbox":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { COLUMN_DEF_DATATYPE_LINK as C, KEYBOARD_ENTER as K, ModusTableColumnsVisibility as M, PAGINATION_PAGEVIEW_TEXT as P, SORTED_ASCENDING as S, COLUMN_DEF_DATATYPE_KEY as a, COLUMN_DEF_DATATYPE_INTEGER as b, KEYBOARD_SPACE as c, KEYBOARD_TAB as d, KEYBOARD_ESCAPE as e, KEYBOARD_LEFT as f, KEYBOARD_RIGHT as g, SORTED_DESCENDING as h, SORT_ASCENDING as i, SORT_DESCENDING as j, PAGINATION_SUMMARY_TEXT as k, COLUMN_DEF_ROW_SELECTION_ID as l, COLUMN_DEF_ROW_SELECTION_CSS as m, COLUMN_DEF_SHOWTOTAL as n, PAGINATION_DEFAULT_SIZES as o, defineCustomElement as p };
