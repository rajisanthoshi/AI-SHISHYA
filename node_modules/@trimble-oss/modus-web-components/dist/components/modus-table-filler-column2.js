import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';

const modusTableFillerColumnCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.d-none{display:none}";

const ModusTableFillerColumn = /*@__PURE__*/ proxyCustomElement(class ModusTableFillerColumn extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.observer = null;
    this.updateContainerLayout = () => {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const tableWidth = (_b = (_a = this.targetTable) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width;
      const parentWidth = (_e = (_d = (_c = this.targetTable) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.getBoundingClientRect()) === null || _e === void 0 ? void 0 : _e.width;
      this.showFillerTable = tableWidth < parentWidth;
      if (!this.showFillerTable)
        return;
      if (this.fillerTableRef) {
        this.fillerTableRef.querySelector('thead').style.height = `${(_f = this.targetTable
          .querySelector('thead')) === null || _f === void 0 ? void 0 : _f.getBoundingClientRect().height}px`;
        if (this.summaryRow) {
          this.fillerTableRef.querySelector('tfoot').style.height = `${(_g = this.targetTable
            .querySelector('tfoot')) === null || _g === void 0 ? void 0 : _g.getBoundingClientRect().height}px`;
        }
        this.fillerTableRef.querySelector('tbody').style.height = `${(_h = this.targetTable
          .querySelector('tbody')) === null || _h === void 0 ? void 0 : _h.getBoundingClientRect().height}px`;
      }
    };
    this.cellBorderless = undefined;
    this.summaryRow = undefined;
    this.targetTable = undefined;
    this.showFillerTable = false;
  }
  targetTableChange() {
    if (this.targetTable) {
      this.updateContainerLayout();
      this.connectDOMObserver();
    }
  }
  disconnectedCallback() {
    this.disconnectDOMObserver();
  }
  connectDOMObserver() {
    this.observer = new ResizeObserver(this.updateContainerLayout);
    this.observer.observe(this.targetTable);
  }
  disconnectDOMObserver() {
    if (this.observer) {
      this.observer.disconnect();
    }
  }
  render() {
    return (h("table", { class: { 'cell-borderless': this.cellBorderless, 'd-none': !this.showFillerTable }, ref: (el) => (this.fillerTableRef = el) }, h("thead", null, h("tr", null, h("th", null))), h("tbody", null, h("tr", null, h("td", null))), this.summaryRow && (h("tfoot", null, h("tr", { class: "summary-row" }, h("td", null))))));
  }
  static get watchers() { return {
    "targetTable": ["targetTableChange"]
  }; }
  static get style() { return modusTableFillerColumnCss; }
}, [0, "modus-table-filler-column", {
    "cellBorderless": [4, "cell-borderless"],
    "summaryRow": [4, "summary-row"],
    "targetTable": [16],
    "showFillerTable": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-table-filler-column"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-table-filler-column":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusTableFillerColumn);
      }
      break;
  } });
}

export { ModusTableFillerColumn as M, defineCustomElement as d };
