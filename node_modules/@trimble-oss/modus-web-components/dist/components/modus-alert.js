import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { I as IconClose } from './icon-close.js';
import { I as IconError, a as IconInfo, b as IconCheckCircle, c as IconWarning } from './icon-info.js';

const modusAlertCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");div.alert{align-items:center;border:1px solid;border-left-width:0.5rem;border-radius:2px;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:56px;padding:0 1rem;position:relative}div.alert.type-error{background-color:var(--modus-alert-danger-bg, #fff);border-color:var(--modus-alert-danger-border-color, #da212c);color:var(--modus-alert-danger-color, #da212c)}div.alert.type-error ::slotted(a){color:var(--modus-alert-danger-link-color, #a01820)}div.alert.type-error .icon-check-circle path,div.alert.type-error .icon-error path,div.alert.type-error .icon-info path,div.alert.type-error .icon-warning path{fill:var(--modus-alert-danger-color, #da212c)}div.alert.type-info{background-color:var(--modus-alert-primary-bg, #fff);border-color:var(--modus-alert-primary-border-color, #0063a3);color:var(--modus-alert-primary-color, #0063a3)}div.alert.type-info ::slotted(a){color:var(--modus-alert-primary-link-color, #003b61)}div.alert.type-info .icon-check-circle path,div.alert.type-info .icon-error path,div.alert.type-info .icon-info path,div.alert.type-info .icon-warning path{fill:var(--modus-alert-primary-color, #0063a3)}div.alert.type-info-gray{background-color:var(--modus-alert-secondary-bg, #fff);border-color:var(--modus-alert-secondary-border-color, #6a6e79);color:var(--modus-alert-secondary-color, #6a6e79)}div.alert.type-info-gray ::slotted(a){color:var(--modus-alert-secondary-link-color, #4b4e56)}div.alert.type-info-gray .icon-check-circle path,div.alert.type-info-gray .icon-error path,div.alert.type-info-gray .icon-info path,div.alert.type-info-gray .icon-warning path{fill:var(--modus-alert-secondary-color, #6a6e79)}div.alert.type-info-gray-dark{background-color:var(--modus-alert-dark-bg, #fff);border-color:var(--modus-alert-dark-border-color, #464b52);color:var(--modus-alert-dark-color, #252a2e)}div.alert.type-info-gray-dark ::slotted(a){color:var(--modus-alert-dark-link-color, #070809)}div.alert.type-info-gray-dark .icon-check-circle path,div.alert.type-info-gray-dark .icon-error path,div.alert.type-info-gray-dark .icon-info path,div.alert.type-info-gray-dark .icon-warning path{fill:var(--modus-alert-dark-color, #252a2e)}div.alert.type-success{background-color:var(--modus-alert-success-bg, #fff);border-color:var(--modus-alert-success-border-color, #006638);color:var(--modus-alert-success-color, #006638)}div.alert.type-success ::slotted(a){color:var(--modus-alert-success-link-color, #002414)}div.alert.type-success .icon-check-circle path,div.alert.type-success .icon-error path,div.alert.type-success .icon-info path,div.alert.type-success .icon-warning path{fill:var(--modus-alert-success-color, #006638)}div.alert.type-warning{background-color:var(--modus-alert-warning-bg, #fff);border-color:var(--modus-alert-warning-border-color, #e49325);color:var(--modus-alert-warning-color, #252a2e)}div.alert.type-warning ::slotted(a){color:var(--modus-alert-warning-link-color, #b16f16)}div.alert.type-warning .icon-check-circle path,div.alert.type-warning .icon-error path,div.alert.type-warning .icon-info path,div.alert.type-warning .icon-warning path{fill:var(--modus-alert-warning-color, #252a2e)}div.alert .message{font-size:0.875rem;font-weight:700}div.alert .icon-check-circle,div.alert .icon-error,div.alert .icon-info,div.alert .icon-warning{margin-right:8px}div.alert .icon-close{cursor:pointer;margin-left:auto}div.alert .icon-close path{fill:var(--modus-alert-close-color, #252a2e)}div.alert .icon-close:hover{opacity:var(--modus-alert-close-hover-opacity, 0.5)}";

const ModusAlert$1 = /*@__PURE__*/ proxyCustomElement(class ModusAlert extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.dismissClick = createEvent(this, "dismissClick", 7);
    this.classByType = new Map([
      ['error', 'type-error'],
      ['info', 'type-info'],
      ['info-gray', 'type-info-gray'],
      ['info-gray-dark', 'type-info-gray-dark'],
      ['success', 'type-success'],
      ['warning', 'type-warning'],
    ]);
    this.infoTypes = ['info', 'info-gray', 'info-gray-dark'];
    this.ariaLabel = undefined;
    this.dismissible = undefined;
    this.message = undefined;
    this.type = 'info';
  }
  elementKeyupHandler(event) {
    switch (event.code) {
      case 'Escape':
        if (!this.dismissible) {
          return;
        }
        this.dismissClick.emit();
        break;
    }
  }
  render() {
    const className = `alert ${this.classByType.get(this.type)}`;
    const iconSize = '24';
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "alert", tabIndex: 0 }, this.type === 'error' ? h(IconError, { size: iconSize }) : null, this.infoTypes.includes(this.type) ? h(IconInfo, { size: iconSize }) : null, this.type === 'success' ? h(IconCheckCircle, { size: iconSize }) : null, this.type === 'warning' ? h(IconWarning, { size: iconSize }) : null, h("div", { class: "message" }, this.message, h("slot", null)), this.dismissible ? h(IconClose, { size: "18", onClick: () => this.dismissClick.emit() }) : null));
  }
  static get style() { return modusAlertCss; }
}, [1, "modus-alert", {
    "ariaLabel": [1, "aria-label"],
    "dismissible": [4],
    "message": [1],
    "type": [1]
  }, [[0, "keyup", "elementKeyupHandler"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-alert"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-alert":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusAlert$1);
      }
      break;
  } });
}

const ModusAlert = ModusAlert$1;
const defineCustomElement = defineCustomElement$1;

export { ModusAlert, defineCustomElement };
