import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { c as createGuid } from './utils.js';

const modusSelectCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{color:var(--modus-input-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}:host .label-container{align-items:baseline;display:flex}:host .label-container label{color:var(--modus-input-label-color, #464b52);font-size:0.75rem;margin:0 0.25rem 0.25rem 0}:host .label-container .required{color:var(--modus-input-validation-error-color, #da212c)}:host .input-container{position:relative}:host .input-container:hover{cursor:pointer}:host .input-container select{align-items:center;background-color:var(--modus-input-bg, #fff);border:solid 0.0625rem var(--modus-input-border-color, #e0e1e9);border-bottom-color:var(--modus-input-bottom-line-color, #6a6e79);color:var(--modus-input-color, #464b52);display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.75rem;height:2rem;padding-left:0.625rem;position:relative;width:100%}:host .input-container select.disabled{background-color:var(--modus-input-disabled-bg, #e0e1e9)}:host .input-container select:hover{cursor:pointer}:host .input-container select:focus{outline:none}:host .input-container select:focus-within{border-bottom-color:var(--modus-input-bottom-line-active-color, #217cbb);border-bottom-width:0.125rem}:host .input-container select.large{font-size:0.875rem;height:3rem}:host .input-container select.error{border-bottom-color:var(--modus-input-validation-error-color, #da212c);border-bottom-width:0.125rem}:host .input-container select.valid{border-bottom-color:var(--modus-input-validation-success-color, #006638);border-bottom-width:0.125rem}:host .sub-text{font-size:0.75rem;margin-top:0.25rem}:host .sub-text.helper{color:var(--modus-input-label-color, #464b52)}:host .sub-text.error{color:var(--modus-input-validation-error-color, #da212c)}:host .sub-text.valid{color:var(--modus-input-validation-success-color, #006638)}";

const ModusSelect = /*@__PURE__*/ proxyCustomElement(class ModusSelect extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.valueChange = createEvent(this, "valueChange", 7);
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
    this.ariaLabel = undefined;
    this.disabled = undefined;
    this.errorText = undefined;
    this.helperText = undefined;
    this.label = undefined;
    this.options = [];
    this.optionsDisplayProp = undefined;
    this.required = undefined;
    this.size = 'medium';
    this.validText = undefined;
    this.value = undefined;
    this.internalValue = undefined;
    this.optionIdMap = new Map();
  }
  handleValueChange(newValue) {
    this.internalValue = newValue;
  }
  connectedCallback() {
    this.internalValue = this.value;
  }
  handleOptionSelect(option) {
    this.valueChange.emit(option);
  }
  handleSelectChange(event) {
    const target = event.target;
    const selectedId = target.value;
    const option = this.optionIdMap.get(selectedId);
    this.handleOptionSelect(option);
  }
  renderSubText() {
    if (this.errorText) {
      return h("label", { class: "sub-text error" }, this.errorText);
    }
    else if (this.validText) {
      return h("label", { class: "sub-text valid" }, this.validText);
    }
    else if (this.helperText) {
      return h("label", { class: "sub-text helper" }, this.helperText);
    }
    return null;
  }
  renderLabel() {
    return this.label || this.required ? (h("div", { class: "label-container" }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null;
  }
  renderOptions() {
    var _a;
    return (_a = this.options) === null || _a === void 0 ? void 0 : _a.map((option) => {
      const optionId = createGuid();
      this.optionIdMap.set(optionId, option);
      return (h("option", { value: optionId, key: optionId, selected: option === this.internalValue }, option[this.optionsDisplayProp]));
    });
  }
  render() {
    var _a;
    const selectClass = `${this.classBySize.get(this.size)} ${this.errorText ? 'error' : this.validText ? 'valid' : this.disabled ? 'disabled' : ''}`;
    return (h("div", { class: this.disabled ? 'disabled' : undefined }, this.renderLabel(), h("span", { class: "input-container" }, h("select", { disabled: this.disabled, class: selectClass, "aria-label": this.ariaLabel, onChange: (event) => {
        this.handleSelectChange(event);
      }, "aria-invalid": !!this.errorText, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString() }, this.renderOptions()), this.renderSubText())));
  }
  static get watchers() { return {
    "value": ["handleValueChange"]
  }; }
  static get style() { return modusSelectCss; }
}, [1, "modus-select", {
    "ariaLabel": [1, "aria-label"],
    "disabled": [4],
    "errorText": [1, "error-text"],
    "helperText": [1, "helper-text"],
    "label": [1],
    "options": [16],
    "optionsDisplayProp": [1, "options-display-prop"],
    "required": [4],
    "size": [1],
    "validText": [1, "valid-text"],
    "value": [16],
    "internalValue": [32],
    "optionIdMap": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-select"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-select":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusSelect);
      }
      break;
  } });
}

export { ModusSelect as M, defineCustomElement as d };
