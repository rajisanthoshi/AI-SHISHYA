import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { I as IconMap } from './IconMap.js';
import { T as TREE_ITEM_SIZE_CLASS } from './modus-content-tree.constants.js';
import { d as defineCustomElement$3 } from './modus-checkbox2.js';
import { d as defineCustomElement$2 } from './modus-text-input2.js';

const modusTreeViewItemCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.tree-item{align-items:center;background-color:var(--modus-tree-view-item-bg, #fff);border:0.0625rem solid var(--modus-tree-view-item-border-color, #e0e1e9);color:var(--modus-tree-view-item-color, #252a2e);cursor:pointer;display:flex;fill:var(--modus-tree-view-item-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:1rem;min-height:2.375rem;width:100%}.tree-item svg path{fill:var(--modus-tree-view-item-color, #252a2e)}.tree-item .icon-chevron-right-thick path,.tree-item .icon-chevron-down-thick path{fill:var(--modus-chevron-color, #90939f)}.tree-item.disabled{color:var(--modus-tree-view-item-disabled-color, #252a2e4d);cursor:default !important}.tree-item.disabled svg path{fill:var(--modus-tree-view-item-disabled-color, #252a2e4d)}.tree-item.drop-allow{box-shadow:0 -2px 0 var(--modus-tree-view-item-drag-border-color, #217cbb) !important}.tree-item.drop-block{box-shadow:0 -2px 0 var(--modus-tree-view-item-drag-error-border-color, #da212c) !important}.tree-item .d-none{display:none !important}.tree-item .hidden{visibility:hidden}.tree-item:hover:not(.disabled){background-color:var(--modus-tree-view-item-hover-bg, #e0e1e9)}.tree-item .icon-slot{align-items:center;display:flex;justify-content:center;width:1.5rem}.tree-item .icon-slot.drag-icon{cursor:grab !important;width:1rem}.tree-item .icon-slot.drag-icon svg{height:1rem;width:1rem}.tree-item .icon-slot .inline-flex{display:inline-flex}.tree-item .icon-slot .rotate-right{transform:rotate(-90deg)}.tree-item .label-slot{overflow:hidden;padding-left:0.5rem;padding-right:0.5rem;text-overflow:ellipsis;white-space:nowrap;width:100%}.tree-item.large{min-height:2.875rem}.tree-item.selected{background-color:var(--modus-tree-view-item-selected-bg, #dcedf9);border-color:var(--modus-tree-view-item-selected-border-color, #dcedf9)}.tree-item.small{font-size:0.75rem;min-height:1.875rem}.tree-item-container{display:flex;flex-direction:column;position:relative}.tree-item-container.selected-indicator::before{box-shadow:inset 0.3rem 0 0 0 var(--modus-tree-view-item-selected-indicator-color, #217cbb);content:\"\";height:100%;left:0;position:absolute;right:0;width:0.3rem;z-index:5}.tree-item-group{display:none;margin:0;padding:0;width:100%}.tree-item-group.expanded{display:block}";

var __rest = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const ModusTreeViewItem$1 = /*@__PURE__*/ proxyCustomElement(class ModusTreeViewItem extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.checkboxClick = createEvent(this, "checkboxClick", 7);
    this.itemClick = createEvent(this, "itemClick", 7);
    this.itemExpandToggle = createEvent(this, "itemExpandToggle", 7);
    this.itemAdded = createEvent(this, "itemAdded", 7);
    this.SLOT_COLLAPSE_ICON = 'collapseIcon';
    this.SLOT_DRAG_ICON = 'dragIcon';
    this.SLOT_EXPAND_ICON = 'expandIcon';
    this.SLOT_ITEM_ICON = 'itemIcon';
    this.SLOT_LABEL = 'label';
    this.CustomSlot = (_a) => {
      var { name, className, defaultContent, display = true } = _a, props = __rest(_a, ["name", "className", "defaultContent", "display"]);
      const showDefault = !this.slots.has(name) && defaultContent;
      return (h("div", Object.assign({}, props, { class: `${className || ''} ${display ? '' : 'd-none'}` }), h("slot", { name: name, onSlotchange: () => this.handleDefaultSlotChange() }), showDefault && defaultContent));
    };
    this.disabled = undefined;
    this.draggableItem = undefined;
    this.droppableItem = undefined;
    this.editable = undefined;
    this.label = undefined;
    this.nodeId = undefined;
    this.tabIndexValue = 0;
    this.childrenIds = undefined;
    this.forceUpdate = {};
    this.slots = new Map();
  }
  connectedCallback() {
    // the element is moved in the DOM, register it on the root
    // example, drag and drop
    if (this.options) {
      this.options.onItemAdd(this.element);
    }
  }
  componentDidRender() {
    // Needed for retaining focus on the label input while in edit mode
    if (this.refLabelInput && this.editable) {
      this.refLabelInput.focusInput();
    }
  }
  componentWillLoad() {
    this.itemAdded.emit(this.element);
    this.handleDefaultSlotChange();
  }
  disconnectedCallback() {
    var _a;
    // the element has been moved or deleted in the DOM, deregister it on the root
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.onItemDelete(this.nodeId);
  }
  /** Focus the tree item */
  async focusItem() {
    this.refItemContent.focus();
  }
  /** Focus the checkbox inside a tree item */
  async focusCheckbox() {
    if (this.refCheckbox)
      this.refCheckbox.focusCheckbox();
  }
  getChildrenIds() {
    return Array.from(this.element.children)
      .map((i) => i.nodeId)
      .filter((i) => i);
  }
  handleCheckboxClick(e) {
    if (this.shouldHandleEvent(e)) {
      const { onCheckboxSelection, hasItemChecked } = this.options;
      onCheckboxSelection(this.nodeId);
      this.checkboxClick.emit(hasItemChecked(this.nodeId));
    }
  }
  handleDefaultKeyDown(e, handler) {
    switch (e.code) {
      case 'Space':
      case 'Enter':
        handler();
        e.preventDefault();
        break;
    }
  }
  handleDefaultSlotChange() {
    const slotElements = this.element.querySelectorAll('[slot]');
    const newSlots = new Map();
    // look for icon/label slot added/removed
    let isUpdated = slotElements.length !== this.slots.size;
    slotElements.forEach((e) => {
      newSlots.set(e.slot, true);
      isUpdated = !this.slots.get(e.slot) || isUpdated;
    });
    if (isUpdated)
      this.slots = new Map(newSlots);
  }
  handleDrag(e) {
    if (this.shouldHandleEvent(e)) {
      e.preventDefault();
      const dragContent = this.refItemContent.cloneNode(true);
      this.options.onItemDrag(this.nodeId, dragContent, e);
    }
  }
  handleExpandToggle(e) {
    if (this.shouldHandleEvent(e)) {
      const { onItemExpandToggle, hasItemExpanded } = this.options;
      onItemExpandToggle(this.nodeId);
      this.itemExpandToggle.emit(hasItemExpanded(this.nodeId));
    }
  }
  handleFocus() {
    const { onItemFocus, hasItemFocus } = this.options || {};
    if (!hasItemFocus(this.nodeId)) {
      onItemFocus(this.nodeId);
    }
  }
  handleItemClick(e) {
    if (this.shouldHandleEvent(e)) {
      const { onItemSelection, hasItemSelected } = this.options;
      onItemSelection(this.nodeId, e);
      this.itemClick.emit(hasItemSelected(this.nodeId));
    }
  }
  handleKeyDownTreeItem(e) {
    if (e.defaultPrevented) {
      return; // Do nothing if event already handled
    }
    switch (e.code) {
      case 'Space':
        this.handleExpandToggle(e);
        e.preventDefault();
        e.stopPropagation();
        break;
      case 'Enter':
        this.handleItemClick(e);
        e.stopPropagation();
        break;
    }
  }
  handleLabelInputClick(e) {
    e.stopPropagation();
  }
  handleLabelInputBlur() {
    this.updateLabelInput();
  }
  handleLabelInputKeyDown(e) {
    switch (e.code) {
      case 'Enter':
        e.preventDefault();
        this.updateLabelInput();
        break;
    }
  }
  handlePropDisabledChange(newValue) {
    var _a;
    // sync root
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.onItemUpdate({ nodeId: this.nodeId, disabled: newValue });
  }
  handlePropNodeIdChange(newValue, oldValue) {
    var _a;
    // sync root
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.onItemUpdate({ nodeId: newValue }, { nodeId: oldValue });
  }
  handleRefItemContent(ref) {
    var _a;
    this.refItemContent = ref;
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.onItemUpdate({ nodeId: this.nodeId, content: ref });
  }
  handleTreeSlotChange() {
    var _a, _b;
    const newChildren = this.getChildrenIds();
    const isUpdated = this.childrenIds && newChildren
      ? this.childrenIds.length !== newChildren.filter((c) => this.childrenIds.includes(c)).length
      : ((_a = this.childrenIds) === null || _a === void 0 ? void 0 : _a.length) !== (newChildren === null || newChildren === void 0 ? void 0 : newChildren.length);
    if (this.options) {
      const { onItemUpdate, multiCheckboxSelection, onCheckboxSelection } = this.options;
      // sync root
      onItemUpdate({ nodeId: this.nodeId, children: [...newChildren] });
      // sync the checkboxes if there is any child added/removed
      if (((_b = this.childrenIds) === null || _b === void 0 ? void 0 : _b.length) && this.childrenIds.length !== (newChildren === null || newChildren === void 0 ? void 0 : newChildren.length) && multiCheckboxSelection) {
        onCheckboxSelection(this.nodeId, true);
      }
    }
    // avoid re-render if the value is not updated
    this.childrenIds = isUpdated ? [...newChildren] : this.childrenIds;
  }
  /**
   * @internal
   */
  async initTreeViewItem(newValue) {
    this.options = Object.assign({}, newValue);
    this.handleTreeSlotChange();
    this.updateComponent();
    this.tabIndexValue = this.options.disableTabbing ? -1 : this.tabIndexValue;
  }
  rootOptions() {
    var _a;
    if (this.options) {
      const { checkboxSelection, multiCheckboxSelection, showSelectionIndicator, size, getLevel, hasItemSelected, hasItemDisabled, hasItemIndeterminate, hasItemExpanded, hasItemChecked, } = this.options;
      const selected = hasItemSelected(this.nodeId);
      const checked = hasItemChecked(this.nodeId);
      const indeterminate = hasItemIndeterminate(this.nodeId);
      const expanded = hasItemExpanded(this.nodeId);
      const level = getLevel(this.nodeId);
      const isDisabled = hasItemDisabled(this.nodeId);
      const selectionIndicator = showSelectionIndicator(this.nodeId);
      return {
        selected,
        checked,
        indeterminate,
        expanded,
        expandable: Boolean((_a = this.childrenIds) === null || _a === void 0 ? void 0 : _a.length),
        level,
        checkboxSelection,
        multiCheckboxSelection,
        size,
        isDisabled,
        selectionIndicator,
      };
    }
    else
      return {
        level: 1,
      };
  }
  shouldHandleEvent(e) {
    if (e)
      e.stopPropagation();
    // Do not handle the event when the item is disabled
    return this.options && !this.options.hasItemDisabled(this.nodeId);
  }
  /**
   * @internal
   */
  async updateComponent() {
    this.forceUpdate = Object.assign({}, this.forceUpdate);
  }
  updateLabelInput() {
    if (this.refLabelInput) {
      this.label = this.refLabelInput.value;
    }
    this.refLabelInput = null;
    this.editable = false;
  }
  render() {
    const { selected, checked, indeterminate, expanded, expandable, level, checkboxSelection, multiCheckboxSelection, size, isDisabled, selectionIndicator, } = this.rootOptions();
    const ariaControls = Object.assign(Object.assign({ 'aria-level': level, 'aria-selected': selected ? 'true' : 'false', 'aria-disabled': isDisabled ? 'true' : 'false' }, (expandable ? { 'aria-expanded': expanded ? 'true' : 'false' } : {})), { role: 'treeitem' });
    const sizeClass = `${TREE_ITEM_SIZE_CLASS.get(size || 'standard')}`;
    const tabIndex = isDisabled ? -1 : this.tabIndexValue;
    const treeItemClass = `tree-item ${selected ? 'selected' : ''} ${sizeClass} ${isDisabled ? 'disabled' : ''} `;
    const treeItemChildrenClass = `tree-item-group ${sizeClass} ${expanded ? 'expanded' : ''}`;
    return (h("li", Object.assign({}, ariaControls, { class: `tree-item-container${selectionIndicator ? ' selected-indicator' : ''}` }), h("div", { class: treeItemClass, onFocus: () => this.handleFocus(), onClick: (e) => this.handleItemClick(e), onKeyDown: (e) => this.handleKeyDownTreeItem(e), ref: (el) => this.handleRefItemContent(el), tabindex: tabIndex }, h(this.CustomSlot, { className: `icon-slot drag-icon${!this.draggableItem ? ' hidden' : ''}`, defaultContent: h(IconMap, { icon: "drag" }), name: this.SLOT_DRAG_ICON, onMouseDown: (e) => this.handleDrag(e) }), h("div", { "aria-disabled": "true", style: { paddingLeft: `${(level - 1) * 0.5}rem` } }), h("div", { class: `icon-slot${!expandable ? ' hidden' : ''}`, onClick: (e) => this.handleExpandToggle(e), onKeyDown: (e) => this.handleDefaultKeyDown(e, () => this.handleExpandToggle(e)), tabindex: expandable ? tabIndex : -1 }, h(this.CustomSlot, { className: "inline-flex rotate-right", defaultContent: h(IconMap, { icon: "chevron-down-thick", size: "24" }), display: !expanded, name: this.SLOT_EXPAND_ICON }), h(this.CustomSlot, { className: "inline-flex", defaultContent: h(IconMap, { icon: "chevron-down-thick", size: "24" }), display: expanded, name: this.SLOT_COLLAPSE_ICON })), (checkboxSelection || multiCheckboxSelection) && (h("div", { class: "icon-slot" }, h("modus-checkbox", { checked: checked, disabled: isDisabled, indeterminate: indeterminate, onClick: (e) => this.handleCheckboxClick(e), onKeyDown: (e) => this.handleDefaultKeyDown(e, () => this.handleCheckboxClick(e)), ref: (el) => (this.refCheckbox = el), tabIndexValue: tabIndex }))), h(this.CustomSlot, { className: "icon-slot", name: this.SLOT_ITEM_ICON, display: this.slots.has(this.SLOT_ITEM_ICON) }), h("div", { role: "heading", "aria-level": level, class: "label-slot" }, h(this.CustomSlot, { role: "button", name: this.SLOT_LABEL, defaultContent: this.editable ? (h("modus-text-input", { size: size == 'large' ? 'large' : 'medium', autoFocusInput: true, tabindex: 0, ref: (el) => (this.refLabelInput = el), value: this.label, onClick: (e) => this.handleLabelInputClick(e), onBlur: () => this.handleLabelInputBlur(), onKeyDown: (e) => this.handleLabelInputKeyDown(e) })) : (this.label) }))), h("ul", { class: treeItemChildrenClass, role: "tree" }, h("slot", { onSlotchange: () => this.handleTreeSlotChange() }))));
  }
  get element() { return this; }
  static get watchers() { return {
    "disabled": ["handlePropDisabledChange"],
    "nodeId": ["handlePropNodeIdChange"]
  }; }
  static get style() { return modusTreeViewItemCss; }
}, [1, "modus-tree-view-item", {
    "disabled": [4],
    "draggableItem": [4, "draggable-item"],
    "droppableItem": [4, "droppable-item"],
    "editable": [1028],
    "label": [1537],
    "nodeId": [513, "node-id"],
    "tabIndexValue": [1032, "tab-index-value"],
    "childrenIds": [32],
    "forceUpdate": [32],
    "slots": [32],
    "focusItem": [64],
    "focusCheckbox": [64],
    "initTreeViewItem": [64],
    "updateComponent": [64]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-tree-view-item", "modus-checkbox", "modus-text-input"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-tree-view-item":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusTreeViewItem$1);
      }
      break;
    case "modus-checkbox":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "modus-text-input":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const ModusTreeViewItem = ModusTreeViewItem$1;
const defineCustomElement = defineCustomElement$1;

export { ModusTreeViewItem, defineCustomElement };
