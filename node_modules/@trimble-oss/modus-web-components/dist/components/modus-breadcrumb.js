import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';

const modusBreadcrumbCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");nav{font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;position:relative}nav ol{align-items:center;display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0.625rem 0}nav ol li .crumb a{color:var(--modus-link-color, #217cbb);cursor:pointer;text-decoration:none}nav ol li .crumb a:hover{text-decoration:underline}nav ol li .crumb a:active{color:var(--modus-breadcrumb-item-active-color, #6c757d);text-decoration:none}nav ol li .crumb .divider{color:var(--modus-breadcrumb-divider-color, #6c757d);cursor:default;padding:0 0.5rem}nav ol li .last-crumb{color:var(--modus-breadcrumb-item-active-color, #6c757d)}";

const ModusBreadcrumb$1 = /*@__PURE__*/ proxyCustomElement(class ModusBreadcrumb extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.crumbClick = createEvent(this, "crumbClick", 7);
    this.ariaLabel = undefined;
    this.crumbs = [];
  }
  render() {
    return (h("nav", { "aria-label": this.ariaLabel, role: "navigation" }, h("ol", null, this.crumbs.map((crumb, index) => (h("li", { key: crumb.id }, index < this.crumbs.length - 1 ? (h("span", { class: "crumb" }, h("a", { onClick: () => this.crumbClick.emit(crumb) }, crumb.display), h("span", { class: "divider" }, '>'))) : (h("span", { class: "last-crumb", "aria-current": "page" }, crumb.display))))))));
  }
  static get style() { return modusBreadcrumbCss; }
}, [1, "modus-breadcrumb", {
    "ariaLabel": [1, "aria-label"],
    "crumbs": [16]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-breadcrumb"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-breadcrumb":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusBreadcrumb$1);
      }
      break;
  } });
}

const ModusBreadcrumb = ModusBreadcrumb$1;
const defineCustomElement = defineCustomElement$1;

export { ModusBreadcrumb, defineCustomElement };
