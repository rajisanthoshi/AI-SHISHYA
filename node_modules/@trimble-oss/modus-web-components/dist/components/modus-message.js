import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { a as IconInfo } from './icon-info.js';
import { I as IconHelp } from './icon-help.js';
import { I as IconMap } from './IconMap.js';

const modusMessageCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-message{align-items:center;border-radius:0.125rem;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;padding:0.5rem}.modus-message .icon{align-items:center;display:flex;margin-right:0.5rem}.modus-message.info{background-color:var(--modus-message-info-bg, #dcedf9);color:var(--modus-message-info-color, #0063a3)}.modus-message.info svg path{fill:var(--modus-message-info-color, #0063a3) !important}.modus-message.question{background-color:var(--modus-message-question-bg, #f1f1f6);color:var(--modus-message-question-color, #6a6e79)}.modus-message.question svg path{fill:var(--modus-message-question-color, #6a6e79) !important}";

const ModusMessage$1 = /*@__PURE__*/ proxyCustomElement(class ModusMessage extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.classByType = new Map([
      ['info', 'info'],
      ['question', 'question'],
    ]);
    this.ariaLabel = undefined;
    this.icon = undefined;
    this.type = 'info';
  }
  render() {
    const className = `modus-message ${this.classByType.get(this.type)}`;
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "note" }, h("span", { class: "icon" }, this.icon ? (h(IconMap, { icon: this.icon, size: "18" })) : this.type === 'info' ? (h(IconInfo, { size: "18" })) : this.type === 'question' ? (h(IconHelp, { size: "18" })) : null), h("span", { class: "message" }, h("slot", null))));
  }
  static get style() { return modusMessageCss; }
}, [1, "modus-message", {
    "ariaLabel": [1, "aria-label"],
    "icon": [1],
    "type": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-message"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-message":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusMessage$1);
      }
      break;
  } });
}

const ModusMessage = ModusMessage$1;
const defineCustomElement = defineCustomElement$1;

export { ModusMessage, defineCustomElement };
