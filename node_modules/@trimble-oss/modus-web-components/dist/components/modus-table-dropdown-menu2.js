import { h, proxyCustomElement, HTMLElement } from '@stencil/core/internal/client';
import { K as KEYBOARD_ENTER, c as KEYBOARD_SPACE, e as KEYBOARD_ESCAPE, p as defineCustomElement$1 } from './modus-table-columns-visibility2.js';
import { d as defineCustomElement$3 } from './modus-button2.js';
import { d as defineCustomElement$2 } from './modus-checkbox2.js';

// eslint-disable-next-line
const IconHorizontalEllipsis = (props) => {
  var _a, _b, _c;
  return (h("svg", { xmlns: "http://www.w3.org/2000/svg", width: (_a = props.size) !== null && _a !== void 0 ? _a : 16, height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? () => props.onClick() : null, fill: (_c = props.color) !== null && _c !== void 0 ? _c : '#6A6976', viewBox: "0 0 24 24" },
    h("path", { d: "M10.59 10.59c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Zm7 0c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Zm-14 0c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Z" })));
};

const modusTableDropdownMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.dropdown-menu-container{display:inline-block;padding-left:12px;position:relative}.dropdown-menu-container .dropdown-menu-icon{border-radius:3px;cursor:pointer;display:flex;padding:4px}.dropdown-menu-container .dropdown-menu-icon svg{fill:var(--modus-icon-colour, #252a2e)}.dropdown-menu-container .dropdown-menu-icon:hover{background:var(--modus-group-item-hover-bg, #e0e1e9)}.dropdown-menu-container .dropdown-menu{background-color:var(--modus-group-item-bg, #fff);border:1px solid var(--modus-group-item-border-color, #e0e1e9);box-shadow:0 0 4px var(--modus-card-shadow-color, #3635454d);display:none;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:absolute;right:0;top:28px;width:240px;z-index:99}.dropdown-menu-container .dropdown-menu.visible{display:block}";

const ModusTableDropdownMenu = /*@__PURE__*/ proxyCustomElement(class ModusTableDropdownMenu extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.table = undefined;
    this.options = undefined;
    this.show = false;
  }
  handleClickOutside(event) {
    // Closing the dropdown when click outside
    const withinBoundaries = event.composedPath();
    if (!withinBoundaries.find((item) => item['className'] === 'dropdown-menu-container')) {
      this.show = false;
    }
  }
  handleIconKeyDown(event) {
    const eventKey = event.key.toLowerCase();
    if (eventKey === KEYBOARD_ENTER || eventKey === KEYBOARD_SPACE) {
      this.show = true;
      event.preventDefault();
    }
    else if (eventKey === KEYBOARD_ESCAPE) {
      this.show = false;
      event.preventDefault();
    }
  }
  handleDropdownKeyDown(event) {
    if (event.key.toLowerCase() === KEYBOARD_ESCAPE) {
      this.show = false;
      this.menuIconContainerRef.focus();
      event.preventDefault();
    }
  }
  render() {
    var _a;
    return (h("div", { class: "dropdown-menu-container" }, h("div", { tabIndex: 0, class: "dropdown-menu-icon", onClick: () => (this.show = !this.show), onKeyDown: (event) => this.handleIconKeyDown(event), ref: (el) => (this.menuIconContainerRef = el) }, h(IconHorizontalEllipsis, { size: "20" })), h("div", { onKeyDown: (event) => this.handleDropdownKeyDown(event), class: `dropdown-menu ${this.show ? 'visible' : ''}` }, h("modus-table-columns-visibility", { table: this.table, columnsVisibility: (_a = this.options) === null || _a === void 0 ? void 0 : _a.columnsVisibility, showDropdown: this.show, menuIconContainerRef: this.menuIconContainerRef, toggleDropdown: (show) => (this.show = show) }))));
  }
  get element() { return this; }
  static get style() { return modusTableDropdownMenuCss; }
}, [1, "modus-table-dropdown-menu", {
    "table": [16],
    "options": [16],
    "show": [32]
  }, [[4, "click", "handleClickOutside"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-table-dropdown-menu", "modus-button", "modus-checkbox", "modus-table-columns-visibility"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-table-dropdown-menu":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusTableDropdownMenu);
      }
      break;
    case "modus-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "modus-checkbox":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "modus-table-columns-visibility":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { ModusTableDropdownMenu as M, defineCustomElement as d };
