import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';

const modusNavbarProfileMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.profile-menu{background-color:var(--modus-body-bg, #fff);border:0.0625rem solid var(--modus-border-color, #cbcdd6);border-radius:0.125rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:var(--modus-body-color, #252a2e);display:flex;flex-direction:column;max-width:384px;padding:0.5rem;position:absolute;right:0;top:48px;z-index:100;align-items:center;cursor:default;max-width:19rem;padding:0;width:fit-content}.profile-menu .user{align-items:center;display:flex;justify-content:center;padding:1.25rem 1.25rem 0 1.25rem}.profile-menu .user .avatar,.profile-menu .user .initials{background-color:var(--modus-navbar-icon-color, #252a2e);border-radius:50%;height:6rem;margin:0 1rem 1.25rem 0;user-select:none;width:6rem}.profile-menu .user .initials{align-items:center;color:var(--modus-navbar-profile-icon-initials-color, #fff);display:flex;font-size:1.5rem;font-weight:600;justify-content:center}.profile-menu .user .username{font-size:1rem;font-weight:600;max-width:10rem;overflow-wrap:break-word;padding:0 0.25rem}.profile-menu .user .email{font-size:0.75rem;margin-bottom:1rem;max-width:10rem;overflow-wrap:break-word;padding:0 0.25rem}.profile-menu.profile-menu-blue .user .avatar,.profile-menu.profile-menu-blue .user .initials{background-color:#b7b9c3;color:var(--modus-navbar-blue-profile-icon-initials-color, #0e416c)}.profile-menu .links{font-size:0.875rem;margin-bottom:0.75rem;max-width:19rem;user-select:none;width:100%}.profile-menu .links .link{cursor:pointer;overflow:hidden;padding:0.625rem 1.25rem;text-overflow:ellipsis;white-space:nowrap}@media (hover: hover){.profile-menu .links .link:hover{background-color:var(--modus-navbar-icon-hover-bg, #e0e1e9)}}.profile-menu .links .link:active{background-color:var(--modus-navbar-icon-active-bg, #cbcdd6)}.profile-menu .sign-out{background-color:var(--modus-navbar-profile-menu-sign-out-background-color, #f1f1f6);user-select:none;width:100%}.profile-menu .sign-out div{color:var(--modus-blue, #0063a3);cursor:pointer;font-size:0.875rem;padding:0.625rem 1.25rem}@media (hover: hover){.profile-menu .sign-out div:hover{text-decoration:underline}}.profile-menu.reverse{left:0}";

const ModusNavbarProfileMenu = /*@__PURE__*/ proxyCustomElement(class ModusNavbarProfileMenu extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.linkClick = createEvent(this, "linkClick", 7);
    this.signOutClick = createEvent(this, "signOutClick", 7);
    this.avatarUrl = undefined;
    this.email = undefined;
    this.initials = undefined;
    this.links = undefined;
    this.reverse = undefined;
    this.username = undefined;
    this.variant = 'default';
  }
  render() {
    var _a;
    const direction = this.reverse ? 'reverse' : '';
    const variant = this.variant === 'default' ? '' : `profile-menu-${this.variant}`;
    return (h("div", { class: `profile-menu ${direction} ${variant}`, onClick: (event) => event.preventDefault() }, h("div", { class: "user" }, this.avatarUrl ? (h("img", { class: "avatar", src: this.avatarUrl, alt: "Avatar" })) : (h("span", { class: "initials" }, this.initials)), h("div", null, h("div", { class: "username" }, this.username), h("div", { class: "email" }, this.email))), ((_a = this.links) === null || _a === void 0 ? void 0 : _a.length) ? (h("div", { class: "links" }, this.links.map((link) => {
      return (h("div", { class: "link", onClick: () => this.linkClick.emit(link.id) }, link.display));
    }))) : null, h("div", { class: "sign-out", onClick: () => this.signOutClick.emit() }, h("div", null, "Sign out"))));
  }
  static get style() { return modusNavbarProfileMenuCss; }
}, [1, "modus-navbar-profile-menu", {
    "avatarUrl": [1, "avatar-url"],
    "email": [1],
    "initials": [1],
    "links": [16],
    "reverse": [4],
    "username": [1],
    "variant": [1]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["modus-navbar-profile-menu"];
  components.forEach(tagName => { switch (tagName) {
    case "modus-navbar-profile-menu":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ModusNavbarProfileMenu);
      }
      break;
  } });
}

export { ModusNavbarProfileMenu as M, defineCustomElement as d };
