import { r as registerInstance, h } from './index-3e825a40.js';
import { b as IconInfo } from './icon-info-7b42dead.js';
import { I as IconHelp } from './icon-help-20569b49.js';
import { I as IconMap } from './IconMap-df6478b0.js';
import './icon-upload-cloud-4225b13f.js';
import './icon-check-97decd2e.js';
import './icon-chevron-down-thick-37bb76ee.js';
import './icon-chevron-right-thick-ca63f695.js';
import './icon-close-63df3f68.js';
import './icon-indeterminate-90195a87.js';
import './icon-remove-967d73a9.js';
import './icon-search-331a957f.js';
import './icon-chevron-up-thick-ba5de848.js';
import './icon-chevron-left-thick-052e66f6.js';
import './icon-visibility-off-2f751132.js';

const modusMessageCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-message{align-items:center;border-radius:0.125rem;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;padding:0.5rem}.modus-message .icon{align-items:center;display:flex;margin-right:0.5rem}.modus-message.info{background-color:var(--modus-message-info-bg, #dcedf9);color:var(--modus-message-info-color, #0063a3)}.modus-message.info svg path{fill:var(--modus-message-info-color, #0063a3) !important}.modus-message.question{background-color:var(--modus-message-question-bg, #f1f1f6);color:var(--modus-message-question-color, #6a6e79)}.modus-message.question svg path{fill:var(--modus-message-question-color, #6a6e79) !important}";

const ModusMessage = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.classByType = new Map([
      ['info', 'info'],
      ['question', 'question'],
    ]);
    this.ariaLabel = undefined;
    this.icon = undefined;
    this.type = 'info';
  }
  render() {
    const className = `modus-message ${this.classByType.get(this.type)}`;
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "note" }, h("span", { class: "icon" }, this.icon ? (h(IconMap, { icon: this.icon, size: "18" })) : this.type === 'info' ? (h(IconInfo, { size: "18" })) : this.type === 'question' ? (h(IconHelp, { size: "18" })) : null), h("span", { class: "message" }, h("slot", null))));
  }
};
ModusMessage.style = modusMessageCss;

export { ModusMessage as modus_message };
