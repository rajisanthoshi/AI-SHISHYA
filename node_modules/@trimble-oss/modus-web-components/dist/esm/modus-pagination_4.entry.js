import { r as registerInstance, c as createEvent, h, H as Host } from './index-3e825a40.js';
import { I as IconChevronRightThick } from './icon-chevron-right-thick-ca63f695.js';
import { I as IconChevronLeftThick } from './icon-chevron-left-thick-052e66f6.js';
import { c as createGuid } from './utils-2b4ba4cd.js';

var PaginationDirection;
(function (PaginationDirection) {
  PaginationDirection["Previous"] = "Previous";
  PaginationDirection["Next"] = "Next";
})(PaginationDirection || (PaginationDirection = {}));

const modusPaginationCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");nav{align-items:center;background-color:transparent;border-radius:0.125rem;color:var(--modus-pagination-color, #252a2e);display:inline-flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";justify-content:center;user-select:none;width:100%}nav svg path{fill:var(--modus-pagination-chevron-color, #6a6e79)}nav ul{align-items:center;display:flex;flex-direction:row;justify-content:center;padding:0}nav ul li{align-items:center;display:flex;flex-direction:row;justify-content:center;list-style-type:none;min-width:min-content}nav ul li.active{background-color:var(--modus-pagination-active-bg, #dcedf9);color:var(--modus-pagination-active-color, #217cbb)}nav ul li.disabled{opacity:0.3}nav ul li.hoverable{cursor:pointer}nav ul li.hoverable:not(.active):hover{background-color:var(--modus-pagination-hover-bg, #e0e1e9)}nav.small{height:1.5rem}nav.small li{font-size:0.75rem;height:1.5rem;padding:0 0.5rem}nav.medium{height:2rem}nav.medium ul li{font-size:0.875rem;height:2rem;padding:0 0.75rem}nav.large{height:3rem}nav.large ul li{font-size:1.25rem;height:3rem;padding:0 1.5rem}";

const ModusPagination = class {
  activePageWatch(newValue, oldValue) {
    if (newValue !== oldValue) {
      this.pageChange.emit(newValue);
    }
  }
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.pageChange = createEvent(this, "pageChange", 7);
    this.chevronSizeBySize = new Map([
      ['small', '16'],
      ['medium', '20'],
      ['large', '24'],
    ]);
    this.classBySize = new Map([
      ['small', 'small'],
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
    this.ariaLabel = undefined;
    this.activePage = undefined;
    this.maxPage = undefined;
    this.minPage = undefined;
    this.prevPageButtonText = undefined;
    this.nextPageButtonText = undefined;
    this.size = 'medium';
    this.pages = undefined;
    this.setPages();
  }
  componentWillRender() {
    this.setPages();
  }
  setPages() {
    const pages = [];
    const ellipsis = '...';
    // Always show the first page.
    this.maxPage > 1 && pages.push(this.minPage);
    if (this.maxPage - this.minPage < 7) {
      // No need for ellipsis for 7 pages - push all of them.
      for (let i = this.minPage + 1; i < this.maxPage; i++) {
        pages.push(i);
      }
    }
    else {
      if (this.activePage - this.minPage < 4) {
        // One of the first 4 pages is active.
        [1, 2, 3, 4].map((val) => pages.push(this.minPage + val));
        pages.push(ellipsis);
      }
      else if (this.maxPage - this.activePage < 4) {
        // One of the last 4 pages is active.
        pages.push(ellipsis);
        [4, 3, 2, 1].map((val) => pages.push(this.maxPage - val));
      }
      else {
        // The active page is somewhere in the middle.
        pages.push(ellipsis);
        [-1, 0, 1].map((val) => pages.push(this.activePage + val));
        pages.push(ellipsis);
      }
    }
    // Always show the last page.
    pages.push(this.maxPage);
    this.pages = pages;
  }
  handleChevronClick(direction) {
    if (direction === PaginationDirection.Previous && this.activePage !== this.minPage) {
      this.activePage--;
    }
    else if (direction === PaginationDirection.Next && this.activePage !== this.maxPage) {
      this.activePage++;
    }
  }
  handleChevronKeydown(event, direction) {
    if (event.key.toLowerCase() === 'enter') {
      this.handleChevronClick(direction);
      event.preventDefault();
    }
  }
  handlePageKeydown(event, page) {
    if (event.key.toLowerCase() === 'enter') {
      this.handlePageClick(page);
      event.preventDefault();
    }
  }
  handlePageClick(page) {
    if (!isNaN(page)) {
      this.activePage = page;
    }
  }
  renderPreviousPageControl() {
    return (this.maxPage - this.minPage >= 7 && (h("li", { "aria-label": "Previous", class: `${this.activePage != this.minPage ? 'hoverable' : 'disabled'}`, onClick: () => this.handleChevronClick(PaginationDirection.Previous), onKeyDown: (event) => this.handleChevronKeydown(event, PaginationDirection.Previous), tabIndex: 0 }, this.prevPageButtonText ? (h("span", { "data-test-id": "prev-button-text" }, this.prevPageButtonText)) : (h(IconChevronLeftThick, { size: this.chevronSizeBySize.get(this.size) })))));
  }
  renderNextPageControl() {
    return (this.maxPage - this.minPage >= 7 && (h("li", { "aria-label": "Next", class: `${this.activePage != this.maxPage ? 'hoverable' : 'disabled'}`, onClick: () => this.handleChevronClick(PaginationDirection.Next), onKeyDown: (event) => this.handleChevronKeydown(event, PaginationDirection.Next), tabIndex: 0 }, this.nextPageButtonText ? (h("span", { "data-test-id": "next-button-text" }, this.nextPageButtonText)) : (h(IconChevronRightThick, { size: this.chevronSizeBySize.get(this.size) })))));
  }
  renderPageNumbers() {
    return this.pages.map((page) => {
      const isCurrentPage = page === this.activePage;
      if (page === '...') {
        return (h("li", { class: `${!isNaN(+page) ? 'hoverable' : ''}`, tabIndex: -1 }, page));
      }
      return (h("li", { "aria-current": isCurrentPage ? 'page' : null, class: `${page === this.activePage ? 'active' : ''} ${!isNaN(+page) ? 'hoverable' : ''}`, onClick: () => this.handlePageClick(+page), onKeyDown: (event) => this.handlePageKeydown(event, +page), tabIndex: 0 }, page));
    });
  }
  render() {
    return (h("nav", { "aria-label": this.ariaLabel, class: `${this.classBySize.get(this.size)}` }, h("ul", null, this.renderPreviousPageControl(), this.renderPageNumbers(), this.renderNextPageControl())));
  }
  static get watchers() { return {
    "activePage": ["activePageWatch"]
  }; }
};
ModusPagination.style = modusPaginationCss;

const modusSelectCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{color:var(--modus-input-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}:host .label-container{align-items:baseline;display:flex}:host .label-container label{color:var(--modus-input-label-color, #464b52);font-size:0.75rem;margin:0 0.25rem 0.25rem 0}:host .label-container .required{color:var(--modus-input-validation-error-color, #da212c)}:host .input-container{position:relative}:host .input-container:hover{cursor:pointer}:host .input-container select{align-items:center;background-color:var(--modus-input-bg, #fff);border:solid 0.0625rem var(--modus-input-border-color, #e0e1e9);border-bottom-color:var(--modus-input-bottom-line-color, #6a6e79);color:var(--modus-input-color, #464b52);display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.75rem;height:2rem;padding-left:0.625rem;position:relative;width:100%}:host .input-container select.disabled{background-color:var(--modus-input-disabled-bg, #e0e1e9)}:host .input-container select:hover{cursor:pointer}:host .input-container select:focus{outline:none}:host .input-container select:focus-within{border-bottom-color:var(--modus-input-bottom-line-active-color, #217cbb);border-bottom-width:0.125rem}:host .input-container select.large{font-size:0.875rem;height:3rem}:host .input-container select.error{border-bottom-color:var(--modus-input-validation-error-color, #da212c);border-bottom-width:0.125rem}:host .input-container select.valid{border-bottom-color:var(--modus-input-validation-success-color, #006638);border-bottom-width:0.125rem}:host .sub-text{font-size:0.75rem;margin-top:0.25rem}:host .sub-text.helper{color:var(--modus-input-label-color, #464b52)}:host .sub-text.error{color:var(--modus-input-validation-error-color, #da212c)}:host .sub-text.valid{color:var(--modus-input-validation-success-color, #006638)}";

const ModusSelect = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.valueChange = createEvent(this, "valueChange", 7);
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
    this.ariaLabel = undefined;
    this.disabled = undefined;
    this.errorText = undefined;
    this.helperText = undefined;
    this.label = undefined;
    this.options = [];
    this.optionsDisplayProp = undefined;
    this.required = undefined;
    this.size = 'medium';
    this.validText = undefined;
    this.value = undefined;
    this.internalValue = undefined;
    this.optionIdMap = new Map();
  }
  handleValueChange(newValue) {
    this.internalValue = newValue;
  }
  connectedCallback() {
    this.internalValue = this.value;
  }
  handleOptionSelect(option) {
    this.valueChange.emit(option);
  }
  handleSelectChange(event) {
    const target = event.target;
    const selectedId = target.value;
    const option = this.optionIdMap.get(selectedId);
    this.handleOptionSelect(option);
  }
  renderSubText() {
    if (this.errorText) {
      return h("label", { class: "sub-text error" }, this.errorText);
    }
    else if (this.validText) {
      return h("label", { class: "sub-text valid" }, this.validText);
    }
    else if (this.helperText) {
      return h("label", { class: "sub-text helper" }, this.helperText);
    }
    return null;
  }
  renderLabel() {
    return this.label || this.required ? (h("div", { class: "label-container" }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null;
  }
  renderOptions() {
    var _a;
    return (_a = this.options) === null || _a === void 0 ? void 0 : _a.map((option) => {
      const optionId = createGuid();
      this.optionIdMap.set(optionId, option);
      return (h("option", { value: optionId, key: optionId, selected: option === this.internalValue }, option[this.optionsDisplayProp]));
    });
  }
  render() {
    var _a;
    const selectClass = `${this.classBySize.get(this.size)} ${this.errorText ? 'error' : this.validText ? 'valid' : this.disabled ? 'disabled' : ''}`;
    return (h("div", { class: this.disabled ? 'disabled' : undefined }, this.renderLabel(), h("span", { class: "input-container" }, h("select", { disabled: this.disabled, class: selectClass, "aria-label": this.ariaLabel, onChange: (event) => {
        this.handleSelectChange(event);
      }, "aria-invalid": !!this.errorText, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString() }, this.renderOptions()), this.renderSubText())));
  }
  static get watchers() { return {
    "value": ["handleValueChange"]
  }; }
};
ModusSelect.style = modusSelectCss;

const modusTableFillerColumnCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.d-none{display:none}";

const ModusTableFillerColumn = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.observer = null;
    this.updateContainerLayout = () => {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const tableWidth = (_b = (_a = this.targetTable) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width;
      const parentWidth = (_e = (_d = (_c = this.targetTable) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.getBoundingClientRect()) === null || _e === void 0 ? void 0 : _e.width;
      this.showFillerTable = tableWidth < parentWidth;
      if (!this.showFillerTable)
        return;
      if (this.fillerTableRef) {
        this.fillerTableRef.querySelector('thead').style.height = `${(_f = this.targetTable
          .querySelector('thead')) === null || _f === void 0 ? void 0 : _f.getBoundingClientRect().height}px`;
        if (this.summaryRow) {
          this.fillerTableRef.querySelector('tfoot').style.height = `${(_g = this.targetTable
            .querySelector('tfoot')) === null || _g === void 0 ? void 0 : _g.getBoundingClientRect().height}px`;
        }
        this.fillerTableRef.querySelector('tbody').style.height = `${(_h = this.targetTable
          .querySelector('tbody')) === null || _h === void 0 ? void 0 : _h.getBoundingClientRect().height}px`;
      }
    };
    this.cellBorderless = undefined;
    this.summaryRow = undefined;
    this.targetTable = undefined;
    this.showFillerTable = false;
  }
  targetTableChange() {
    if (this.targetTable) {
      this.updateContainerLayout();
      this.connectDOMObserver();
    }
  }
  disconnectedCallback() {
    this.disconnectDOMObserver();
  }
  connectDOMObserver() {
    this.observer = new ResizeObserver(this.updateContainerLayout);
    this.observer.observe(this.targetTable);
  }
  disconnectDOMObserver() {
    if (this.observer) {
      this.observer.disconnect();
    }
  }
  render() {
    return (h("table", { class: { 'cell-borderless': this.cellBorderless, 'd-none': !this.showFillerTable }, ref: (el) => (this.fillerTableRef = el) }, h("thead", null, h("tr", null, h("th", null))), h("tbody", null, h("tr", null, h("td", null))), this.summaryRow && (h("tfoot", null, h("tr", { class: "summary-row" }, h("td", null))))));
  }
  static get watchers() { return {
    "targetTable": ["targetTableChange"]
  }; }
};
ModusTableFillerColumn.style = modusTableFillerColumnCss;

const modusTableToolbarCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.table-toolbar{align-items:center;display:flex;justify-content:space-between;padding-bottom:3px}.table-toolbar .section{align-items:center;display:flex}";

const ModusTablePanel = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.table = undefined;
    this.options = undefined;
  }
  render() {
    return (h(Host, null, h("div", { class: "table-toolbar" }, h("div", { class: "section" }, h("slot", { name: "group-left" })), h("div", { class: "section" }, h("slot", { name: "group-right" }), h("modus-table-dropdown-menu", { table: this.table, options: this.options })))));
  }
};
ModusTablePanel.style = modusTableToolbarCss;

export { ModusPagination as modus_pagination, ModusSelect as modus_select, ModusTableFillerColumn as modus_table_filler_column, ModusTablePanel as modus_table_toolbar };
