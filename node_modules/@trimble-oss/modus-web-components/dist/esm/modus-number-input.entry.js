import { r as registerInstance, c as createEvent, h } from './index-3e825a40.js';

const modusNumberInputCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-number-input{display:inline-flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";width:100%}.modus-number-input label{color:var(--modus-input-label-color, #464b52);font-size:0.75rem;margin-bottom:0.25rem}.modus-number-input label span{color:var(--modus-input-bottom-line-color, #6a6e79);margin:0.25rem}.modus-number-input .label-container{align-items:baseline;display:flex}.modus-number-input .label-container .required{color:var(--modus-input-validation-error-color, #da212c);margin-left:0.25rem}.modus-number-input .input-container{align-items:center;background-color:var(--modus-input-bg, #fff);border:0.0625rem solid var(--modus-input-border-color, #e0e1e9);border-bottom-color:var(--modus-input-bottom-line-color, #6a6e79);display:flex;flex-direction:row;height:32px}.modus-number-input .input-container input{background-color:transparent;border:none;color:var(--modus-input-color, #252a2e);outline:0;padding:0 0.5rem;width:100%}.modus-number-input .input-container input.text-align-right{padding-right:0;text-align:right}.modus-number-input .input-container input::placeholder{color:var(--modus-input-hint-text-color, #a3a6b1)}.modus-number-input .input-container:focus-within,.modus-number-input .input-container.error,.modus-number-input .input-container.valid{border-bottom-width:0.125rem;height:31px}.modus-number-input .input-container:focus-within{border-bottom-color:var(--modus-input-bottom-line-active-color, #217cbb)}.modus-number-input .input-container.error{border-bottom-color:var(--modus-input-validation-error-color, #da212c)}.modus-number-input .input-container.valid{border-bottom-color:var(--modus-input-validation-success-color, #006638)}.modus-number-input .input-container.large{height:48px}.modus-number-input .input-container.large input{font-size:0.875rem;height:47px}.modus-number-input .input-container.large:focus-within,.modus-number-input .input-container.large.error,.modus-number-input .input-container.large.valid{height:47px}.modus-number-input .sub-text{font-size:0.6875rem;margin-top:0.25rem}.modus-number-input .sub-text.helper{color:var(--modus-input-label-color, #464b52);font-weight:600}.modus-number-input .sub-text.error{color:var(--modus-input-validation-error-color, #da212c)}.modus-number-input .sub-text.valid{color:var(--modus-input-validation-success-color, #006638)}.modus-number-input.disabled{pointer-events:none}.modus-number-input.disabled .input-container{background-color:var(--modus-input-disabled-bg, #e0e1e9);border:0.0625rem solid var(--modus-input-disabled-border-color, #e0e1e9);border-bottom-color:var(--modus-input-disabled-bottom-line-color, #a3a6b1)}.modus-number-input.disabled .input-container input{background-color:transparent;color:var(--modus-input-disabled-color, #a3a6b1)}";

const ModusNumberInput = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.valueChange = createEvent(this, "valueChange", 7);
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
    this.ariaLabel = undefined;
    this.disabled = undefined;
    this.errorText = undefined;
    this.helperText = undefined;
    this.label = undefined;
    this.maxValue = undefined;
    this.minValue = undefined;
    this.placeholder = undefined;
    this.readOnly = undefined;
    this.required = undefined;
    this.size = 'medium';
    this.step = undefined;
    this.textAlign = 'left';
    this.validText = undefined;
    this.value = undefined;
  }
  handleOnInput() {
    this.value = this.numberInput.value;
    this.valueChange.emit(this.value);
  }
  watchValue(newValue, oldValue) {
    if (isNaN(+newValue)) {
      this.value = oldValue;
      console.error(`${newValue} is not a number.`);
    }
    else {
      this.value = newValue;
    }
  }
  render() {
    var _a;
    const textAlignClassName = `text-align-${this.textAlign}`;
    const buildContainerClassNames = () => {
      const classNames = [];
      classNames.push('modus-number-input');
      if (this.disabled) {
        classNames.push('disabled');
      }
      return classNames.join(' ');
    };
    const buildInputContainerClassNames = () => {
      const classNames = [];
      classNames.push('input-container');
      classNames.push(this.classBySize.get(this.size));
      if (this.errorText) {
        classNames.push('error');
      }
      if (this.validText) {
        classNames.push('valid');
      }
      return classNames.join(' ');
    };
    return (h("div", { class: buildContainerClassNames() }, this.label || this.required ? (h("div", { class: "label-container" }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null, h("div", { class: buildInputContainerClassNames() }, h("input", { "aria-label": this.ariaLabel, "aria-invalid": !!this.errorText, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString(), "aria-valuemax": this.maxValue, "aria-valuemin": this.minValue, "aria-valuenow": this.value, class: textAlignClassName, disabled: this.disabled, max: this.maxValue, min: this.minValue, onInput: () => this.handleOnInput(), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this.numberInput = el), step: this.step, tabIndex: 0, type: "number", value: this.value })), this.errorText ? (h("label", { class: "sub-text error" }, this.errorText)) : this.validText ? (h("label", { class: "sub-text valid" }, this.validText)) : this.helperText ? (h("label", { class: "sub-text helper" }, this.helperText)) : null));
  }
  static get watchers() { return {
    "value": ["watchValue"]
  }; }
};
ModusNumberInput.style = modusNumberInputCss;

export { ModusNumberInput as modus_number_input };
