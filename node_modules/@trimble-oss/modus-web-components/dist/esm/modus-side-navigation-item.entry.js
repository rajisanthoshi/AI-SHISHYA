import { r as registerInstance, c as createEvent, h, g as getElement } from './index-3e825a40.js';
import { I as IconMap } from './IconMap-df6478b0.js';
import './icon-upload-cloud-4225b13f.js';
import './icon-check-97decd2e.js';
import './icon-info-7b42dead.js';
import './icon-chevron-down-thick-37bb76ee.js';
import './icon-chevron-right-thick-ca63f695.js';
import './icon-close-63df3f68.js';
import './icon-help-20569b49.js';
import './icon-indeterminate-90195a87.js';
import './icon-remove-967d73a9.js';
import './icon-search-331a957f.js';
import './icon-chevron-up-thick-ba5de848.js';
import './icon-chevron-left-thick-052e66f6.js';
import './icon-visibility-off-2f751132.js';

const modusSideNavigationItemCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{display:block}.side-nav-item{align-items:center;background-color:var(--modus-side-navigation-item-bg, #fff);color:var(--modus-side-navigation-item-color, #252a2e);cursor:pointer;display:flex;fill:var(--modus-side-navigation-item-icon-color, #252a2e);height:3rem;position:relative;transition:top, left, height, width, opacity 0.2s ease-out 0s;z-index:1030}.side-nav-item svg path{fill:var(--modus-side-navigation-item-icon-color, #252a2e)}.side-nav-item:hover:not(.disabled):not(.selected){background-color:var(--modus-side-navigation-item-hover-bg, #e0e1e9)}.side-nav-item .menu-icon{align-items:center;display:flex;justify-content:center;padding-left:1.25rem;z-index:1030}.side-nav-item .menu-icon modus-tooltip{height:1.5rem;width:1.5rem}.side-nav-item .menu-icon img{filter:var(--modus-side-navigation-item-icon-filter)}.side-nav-item .menu-text{font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;overflow:hidden;padding-left:1rem;text-overflow:clip;white-space:nowrap}.side-nav-item .level-icon{align-items:center;display:flex;height:1rem;justify-content:center;margin-left:auto;padding:0 2px;width:1rem}.side-nav-item .level-icon svg{height:0.625rem;width:0.625rem}.side-nav-item .level-icon svg path{fill:var(--modus-side-navigation-item-chevron-color, #252a2e)}.side-nav-item.expanded{transition:top, left, height, width, opacity 0.25s ease-in 0s}.side-nav-item.expanded .level-icon{height:1.5rem;padding:0 1rem;width:1.5rem}.side-nav-item.expanded .level-icon svg{height:1rem;width:1rem}.side-nav-item.selected{background-color:var(--modus-side-navigation-item-active-bg, #217cbb);box-shadow:inset 0 0 2px var(--modus-side-navigation-item-active-border-color, #217cbb);color:var(--modus-side-navigation-item-active-color, #fff)}.side-nav-item.selected .menu-icon img{filter:var(--modus-side-navigation-item-icon-active-filter, invert(95%) sepia(100%) saturate(0%) hue-rotate(151deg) brightness(104%) contrast(105%))}.side-nav-item.selected svg path{fill:var(--modus-side-navigation-item-icon-active-color, #fff)}.side-nav-item.disabled{opacity:var(--modus-side-navigation-item-disabled-opacity, 0.3)}";

const ModusSideNavigationItem = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.sideNavItemClicked = createEvent(this, "sideNavItemClicked", 7);
    this.sideNavItemFocus = createEvent(this, "sideNavItemFocus", 7);
    this._sideNavItemAdded = createEvent(this, "_sideNavItemAdded", 7);
    this._sideNavItemRemoved = createEvent(this, "_sideNavItemRemoved", 7);
    this.disabled = false;
    this.disableSelection = false;
    this.expanded = false;
    this.label = undefined;
    this.menuIcon = undefined;
    this.selected = false;
    this.showExpandIcon = false;
  }
  async focusItem() {
    var _a;
    (_a = this._itemRef) === null || _a === void 0 ? void 0 : _a.focus();
  }
  connectedCallback() {
    this._sideNavItemAdded.emit(this.element);
  }
  disconnectedCallback() {
    this._sideNavItemRemoved.emit(this.element);
  }
  handleClick() {
    var _a;
    if (this.disabled)
      return;
    this.selected = this.disableSelection ? this.selected : !this.selected;
    (_a = this.sideNavItemClicked) === null || _a === void 0 ? void 0 : _a.emit({
      id: this.element.id,
      selected: this.selected,
    });
  }
  handleKeyDown(e) {
    if (e.code.toUpperCase() === 'ENTER' || e.code.toUpperCase() === 'SPACE') {
      this.handleClick();
    }
  }
  render() {
    const classes = `side-nav-item${this.expanded ? ' expanded' : ''}${this.selected ? ' selected' : ''}${this.disabled ? ' disabled' : ''}`;
    const menuIconTooltip = this.expanded || this.disabled ? null : this.label;
    return (h("li", { role: "treeitem", ref: (el) => (this._itemRef = el), tabIndex: this.disabled ? -1 : 0, class: classes, onClick: () => this.handleClick(), onKeyDown: (e) => this.handleKeyDown(e), "aria-disabled": this.disabled ? 'true' : null, "aria-label": this.label, "aria-current": this.selected ? 'true' : null, onFocus: () => this.sideNavItemFocus.emit({ id: this.element.id }) }, h("div", { class: "menu-icon", onClick: () => this.sideNavItemFocus.emit({ id: this.element.id }) }, h("modus-tooltip", { text: menuIconTooltip, position: "right" }, h("slot", { name: "menu-icon" }), this.menuIcon && h(IconMap, { icon: this.menuIcon, "aria-label": this.label, size: "24" }))), this.expanded && h("div", { class: "menu-text" }, this.label), h("div", { class: "level-icon" }, this.showExpandIcon && h(IconMap, { icon: "chevron-right-thick" }))));
  }
  get element() { return getElement(this); }
};
ModusSideNavigationItem.style = modusSideNavigationItemCss;

export { ModusSideNavigationItem as modus_side_navigation_item };
