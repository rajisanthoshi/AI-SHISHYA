import { r as registerInstance, c as createEvent, h } from './index-3e825a40.js';
import { I as IconSearch } from './icon-search-331a957f.js';
import { I as IconClose } from './icon-close-63df3f68.js';
import { a as IconVisibility, I as IconVisibilityOff } from './icon-visibility-off-2f751132.js';

const modusTextInputCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-text-input{display:inline-flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";width:100%}.modus-text-input label{color:var(--modus-input-label-color, #464b52);font-size:0.75rem;margin-bottom:0.25rem}.modus-text-input label span{color:var(--modus-input-bottom-line-color, #6a6e79);margin:0.25rem}.modus-text-input .label-container{display:flex}.modus-text-input .label-container .required{bottom:0.0625rem;color:var(--modus-input-validation-error-color, #da212c);margin-left:0.25rem;position:relative}.modus-text-input .input-container{align-items:center;background-color:var(--modus-input-bg, #fff);border:0.0625rem solid var(--modus-input-border-color, #e0e1e9);border-bottom-color:var(--modus-input-bottom-line-color, #6a6e79);box-sizing:border-box;display:flex;flex-direction:row;height:2rem;margin:0;padding:0;position:relative;width:100%}.modus-text-input .input-container svg{padding:0 0.375rem}.modus-text-input .input-container svg path{fill:var(--modus-input-helper-icon-color, #6a6e79)}.modus-text-input .input-container input{background-color:transparent;border:none;color:var(--modus-input-color, #252a2e);font-size:0.75rem;outline:none;padding:0 0.5rem;width:100%}.modus-text-input .input-container input.has-left-icon{padding-left:0}.modus-text-input .input-container input.has-right-icon{padding-right:0}.modus-text-input .input-container input.text-align-right{text-align:right}.modus-text-input .input-container input::placeholder{color:var(--modus-input-hint-text-color, #a3a6b1)}.modus-text-input .input-container .icons{align-items:center;background-color:var(--modus-input-bg, #fff);color:var(--modus-input-helper-icon-color, #6a6e79);display:flex;font-size:1rem;justify-content:center;width:2rem}.modus-text-input .input-container .icons.clear{cursor:pointer;min-height:1.5rem}.modus-text-input .input-container .icons.clear:hover svg path{opacity:0.75}.modus-text-input .input-container:hover{cursor:text}.modus-text-input .input-container:focus-within,.modus-text-input .input-container.error,.modus-text-input .input-container.valid{border-bottom-width:0.125rem;height:2rem}.modus-text-input .input-container:focus-within{border-bottom-color:var(--modus-input-bottom-line-active-color, #217cbb)}.modus-text-input .input-container.error{border-bottom-color:var(--modus-input-validation-error-color, #da212c)}.modus-text-input .input-container.valid{border-bottom-color:var(--modus-input-validation-success-color, #006638)}.modus-text-input .input-container.large{height:3rem}.modus-text-input .input-container.large input{font-size:0.875rem}.modus-text-input .input-container.large:focus-within,.modus-text-input .input-container.large.error,.modus-text-input .input-container.large.valid{height:3rem}.modus-text-input .sub-text{font-size:0.6875rem;margin-top:0.25rem}.modus-text-input .sub-text.helper{color:var(--modus-input-label-color, #464b52);font-weight:600}.modus-text-input .sub-text.error{color:var(--modus-input-validation-error-color, #da212c)}.modus-text-input .sub-text.valid{color:var(--modus-input-validation-success-color, #006638)}.modus-text-input span.required{color:var(--modus-input-validation-error-color, #da212c)}.modus-text-input.large{font-size:0.875rem;height:48px}.modus-text-input.disabled{pointer-events:none}.modus-text-input.disabled .input-container{background-color:var(--modus-input-disabled-bg, #e0e1e9);border:0.0625rem solid var(--modus-input-disabled-border-color, #e0e1e9);border-bottom-color:var(--modus-input-disabled-bottom-line-color, #a3a6b1)}.modus-text-input.disabled .input-container svg path{fill:var(--modus-input-disabled-color, #a3a6b1)}.modus-text-input.disabled .input-container .icons{background-color:var(--modus-input-disabled-bg, #e0e1e9);cursor:default}.modus-text-input.disabled .input-container .icons.clear{visibility:hidden}.modus-text-input.disabled .input-container input{background-color:transparent;border-radius:0;color:var(--modus-input-disabled-color, #a3a6b1);height:100%}.modus-text-input ::-ms-reveal{display:none}.modus-text-input .toggle-password{z-index:9}.modus-text-input .toggle-password svg.visibility,.modus-text-input .toggle-password svg.visibility-off{display:none}.modus-text-input .toggle-password:active,.modus-text-input .toggle-password:focus,.modus-text-input .toggle-password:hover{cursor:pointer}.modus-text-input .toggle-password:focus{outline:none !important}.modus-text-input input{background-position:right calc(0.375em + 0.1875rem) center;background-repeat:no-repeat;background-size:calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);padding-right:calc(1.5em + 0.75rem)}.modus-text-input input[type=password]+.toggle-password>svg.visibility{display:inline}.modus-text-input input[type=text]+.toggle-password>svg.visibility-off{display:inline}";

const ModusTextInput = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.valueChange = createEvent(this, "valueChange", 7);
    this.classBySize = new Map([
      ['medium', 'medium'],
      ['large', 'large'],
    ]);
    this.ariaLabel = undefined;
    this.autoFocusInput = undefined;
    this.clearable = false;
    this.disabled = undefined;
    this.errorText = undefined;
    this.helperText = undefined;
    this.includeSearchIcon = undefined;
    this.includePasswordTextToggle = true;
    this.inputmode = undefined;
    this.label = undefined;
    this.maxLength = undefined;
    this.minLength = undefined;
    this.placeholder = undefined;
    this.readOnly = undefined;
    this.required = undefined;
    this.size = 'medium';
    this.textAlign = 'left';
    this.type = 'text';
    this.validText = undefined;
    this.value = undefined;
  }
  watchValue(newValue) {
    this.value = newValue;
  }
  /** Focus the input. */
  async focusInput() {
    this.textInput.focus();
  }
  handleClear() {
    this.textInput.value = null;
    this.value = null;
    this.valueChange.emit(null);
  }
  handleOnInput(event) {
    const value = event.currentTarget.value;
    this.value = value;
    this.valueChange.emit(value);
  }
  handleTogglePassword() {
    if (this.textInput.type === 'password') {
      this.textInput.type = 'text';
      this.buttonTogglePassword.setAttribute('aria-label', 'Hide password.');
    }
    else {
      this.textInput.type = 'password';
      this.buttonTogglePassword.setAttribute('aria-label', 'Show password as plain text. ' + 'Warning: this will display your password on the screen.');
    }
  }
  render() {
    var _a, _b;
    const isPassword = this.type === 'password';
    const showPasswordToggle = !!(this.includePasswordTextToggle && isPassword && ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length));
    const isToggleablePassword = isPassword && this.includePasswordTextToggle;
    const showClearIcon = !isToggleablePassword && this.clearable && !this.readOnly && !!this.value;
    const buildTextInputClassNames = () => {
      const classNames = [];
      if (this.includeSearchIcon) {
        classNames.push('has-left-icon');
      }
      if (showClearIcon) {
        classNames.push('has-right-icon');
      }
      classNames.push(`text-align-${this.textAlign}`);
      return classNames.join(' ');
    };
    const buildContainerClassNames = () => {
      const classNames = [];
      classNames.push('modus-text-input');
      if (this.disabled) {
        classNames.push('disabled');
      }
      return classNames.join(' ');
    };
    return (h("div", { class: buildContainerClassNames() }, this.label || this.required ? (h("div", { class: 'label-container' }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null, h("div", { class: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}`, onClick: () => this.textInput.focus() }, this.includeSearchIcon ? h(IconSearch, { size: "16" }) : null, h("input", { "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel, "aria-required": (_b = this.required) === null || _b === void 0 ? void 0 : _b.toString(), class: buildTextInputClassNames(), disabled: this.disabled, inputmode: this.inputmode, maxlength: this.maxLength, minlength: this.minLength, onInput: (event) => this.handleOnInput(event), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this.textInput = el), tabIndex: 0, type: this.type, value: this.value, autofocus: this.autoFocusInput }), showPasswordToggle && (h("div", { class: "icons toggle-password", role: "button", "aria-label": "Show password as plain text. Warning: this will display your password on the screen.", ref: (el) => (this.buttonTogglePassword = el), onClick: () => this.handleTogglePassword() }, h(IconVisibility, { size: "16" }), h(IconVisibilityOff, { size: "16" }))), showClearIcon && (h("span", { class: "icons clear", role: "button", "aria-label": "Clear entry" }, h(IconClose, { onClick: () => this.handleClear(), size: "16" })))), this.errorText ? (h("label", { class: "sub-text error" }, this.errorText)) : this.validText ? (h("label", { class: "sub-text valid" }, this.validText)) : this.helperText ? (h("label", { class: "sub-text helper" }, this.helperText)) : null));
  }
  static get watchers() { return {
    "value": ["watchValue"]
  }; }
};
ModusTextInput.style = modusTextInputCss;

export { ModusTextInput as modus_text_input };
