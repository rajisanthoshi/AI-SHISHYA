import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-3e825a40.js';
import { I as IconClose } from './icon-close-63df3f68.js';

const modusNavbarAppsMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.apps-menu{background-color:var(--modus-body-bg, #fff);border:0.0625rem solid var(--modus-border-color, #cbcdd6);border-radius:0.125rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:var(--modus-body-color, #252a2e);display:flex;flex-direction:column;max-width:384px;padding:0.5rem;position:absolute;right:0;top:48px;z-index:100;align-items:flex-start;cursor:default;max-height:605px;overflow-y:auto;width:max-content}.apps-menu.reverse{left:0}.apps-menu .app-div{width:100%}.apps-menu .app{border-color:var(--modus-border-color, #cbcdd6);border-radius:0.125rem;box-sizing:border-box;color:var(--modus-body-color, #252a2e);cursor:default;display:flex;padding:0.25rem;text-decoration:none;width:100%}.apps-menu .app:hover{background-color:var(--modus-navbar-icon-hover-bg, #e0e1e9);cursor:pointer}.apps-menu .app:active{background-color:var(--modus-navbar-icon-active-bg, #cbcdd6)}.apps-menu .app:not(:last-child){margin-bottom:0.5rem}.apps-menu .app img{height:2em;margin-right:0.75rem;width:2em}.apps-menu .app .right{align-self:center}.apps-menu .app .right .name{font-size:0.875rem;font-weight:600}.apps-menu .app .right .description{font-size:0.75rem}.apps-menu .category{border-top:1px solid var(--modus-border-color, #cbcdd6);color:var(--modus-body-color, #252a2e);font-size:0.75rem;font-weight:600;margin-top:0.5rem;padding-bottom:0.625rem;padding-top:1.125rem}";

const ModusNavbarAppsMenu = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.appOpen = createEvent(this, "appOpen", 7);
    this.apps = undefined;
    this.reverse = undefined;
  }
  clickAppHandler(event, app) {
    event.preventDefault();
    window.open(app.url, '_blank');
    this.appOpen.emit(app);
  }
  render() {
    var _a;
    const direction = this.reverse ? 'reverse' : '';
    return (h("div", { class: `apps-menu ${direction}`, onClick: (event) => event.preventDefault() }, (_a = this.apps) === null || _a === void 0 ? void 0 : _a.map((app) => (h("div", { class: "app-div" }, app.showCategory ? h("div", { class: "category" }, app.category) : null, h("a", { class: "app", href: app.url, onClick: (event) => this.clickAppHandler(event, app) }, h("img", { src: app.logoUrl }), h("div", { class: "right" }, h("div", { class: "name" }, app.name), app.description ? h("div", { class: "description" }, app.description) : null)))))));
  }
};
ModusNavbarAppsMenu.style = modusNavbarAppsMenuCss;

const modusNavbarButtonMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.button-menu{background-color:var(--modus-body-bg, #fff);border:0.0625rem solid var(--modus-border-color, #cbcdd6);border-radius:0.125rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:var(--modus-body-color, #252a2e);display:flex;flex-direction:column;max-width:384px;padding:0.5rem;position:absolute;right:0;top:48px;z-index:100;cursor:default;top:0;width:max-content}.button-menu.reverse{left:0}";

const ModusNavbarButtonMenu = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.reverse = undefined;
  }
  render() {
    const menuClasses = {
      'button-menu': true,
      reverse: this.reverse,
    };
    return (h("div", { class: menuClasses }, h("slot", null)));
  }
};
ModusNavbarButtonMenu.style = modusNavbarButtonMenuCss;

const DEFAULT_CONTAINER_LAYOUT = Object.freeze({
  position: 'fixed',
  top: '0px',
  left: '0px',
  height: '0px',
});
const DOM_OBSERVER_CONFIG = Object.freeze({
  childList: true,
});

const modusNavbarMainMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.main-menu{background-color:var(--modus-body-bg, #fff);border:0.0625rem solid var(--modus-border-color, #cbcdd6);border-radius:0.125rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:var(--modus-body-color, #252a2e);display:flex;flex-direction:column;max-width:384px;padding:0.5rem;position:absolute;right:0;top:48px;z-index:100;border-radius:0 0 0.125rem 0.125rem;border-top:none;box-sizing:border-box;clip-path:inset(0 -10px -10px -10px);cursor:default;max-width:616px;min-width:248px;padding:0;width:max-content}";

const ModusNavbarMainMenu = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.observer = null;
    this.updateContainerLayout = () => {
      var _a;
      const navbarRect = (_a = document.getElementById(this.navbarId)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
      if (!navbarRect) {
        return;
      }
      const availableHeight = window.innerHeight - navbarRect.bottom;
      const containerHeight = Math.min(availableHeight, window.innerHeight);
      this.containerLayout = Object.assign(Object.assign({}, this.containerLayout), { top: `${navbarRect.bottom}px`, left: `${navbarRect.left}px`, height: `${containerHeight}px` });
    };
    this.navbarId = undefined;
    this.containerLayout = DEFAULT_CONTAINER_LAYOUT;
  }
  componentDidLoad() {
    this.updateContainerLayout();
    this.addSubscriptions();
  }
  disconnectedCallback() {
    this.removeSubscriptions();
  }
  addSubscriptions() {
    window.addEventListener('resize', this.updateContainerLayout);
    window.addEventListener('scroll', this.updateContainerLayout);
    this.connectDOMObserver();
  }
  removeSubscriptions() {
    window.removeEventListener('resize', this.updateContainerLayout);
    window.removeEventListener('scroll', this.updateContainerLayout);
    this.disconnectDOMObserver();
  }
  connectDOMObserver() {
    this.observer = new MutationObserver(this.updateContainerLayout);
    this.observer.observe(document.body, DOM_OBSERVER_CONFIG);
  }
  disconnectDOMObserver() {
    if (this.observer) {
      this.observer.disconnect();
    }
  }
  render() {
    const positionStyle = Object.assign({}, this.containerLayout);
    return (h("div", { class: "main-menu", style: positionStyle, onClick: (event) => event.preventDefault() }, h("slot", null)));
  }
};
ModusNavbarMainMenu.style = modusNavbarMainMenuCss;

const modusNavbarNotificationsMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.notifications-menu{background-color:var(--modus-body-bg, #fff);border:0.0625rem solid var(--modus-border-color, #cbcdd6);border-radius:0.125rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:var(--modus-body-color, #252a2e);display:flex;flex-direction:column;max-width:384px;padding:0.5rem;position:absolute;right:0;top:48px;z-index:100;cursor:default;width:max-content}.notifications-menu.reverse{left:0}.notifications-menu .title{font-size:1.125rem;font-weight:600;margin-bottom:0.5rem}";

const ModusNavbarNotificationsMenu = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.reverse = undefined;
  }
  render() {
    const direction = this.reverse ? 'reverse' : '';
    return (h("div", { class: `notifications-menu ${direction}`, onClick: (event) => event.preventDefault() }, h("div", { class: "title" }, "Notifications"), h("slot", null)));
  }
};
ModusNavbarNotificationsMenu.style = modusNavbarNotificationsMenuCss;

const modusNavbarProfileMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.profile-menu{background-color:var(--modus-body-bg, #fff);border:0.0625rem solid var(--modus-border-color, #cbcdd6);border-radius:0.125rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:var(--modus-body-color, #252a2e);display:flex;flex-direction:column;max-width:384px;padding:0.5rem;position:absolute;right:0;top:48px;z-index:100;align-items:center;cursor:default;max-width:19rem;padding:0;width:fit-content}.profile-menu .user{align-items:center;display:flex;justify-content:center;padding:1.25rem 1.25rem 0 1.25rem}.profile-menu .user .avatar,.profile-menu .user .initials{background-color:var(--modus-navbar-icon-color, #252a2e);border-radius:50%;height:6rem;margin:0 1rem 1.25rem 0;user-select:none;width:6rem}.profile-menu .user .initials{align-items:center;color:var(--modus-navbar-profile-icon-initials-color, #fff);display:flex;font-size:1.5rem;font-weight:600;justify-content:center}.profile-menu .user .username{font-size:1rem;font-weight:600;max-width:10rem;overflow-wrap:break-word;padding:0 0.25rem}.profile-menu .user .email{font-size:0.75rem;margin-bottom:1rem;max-width:10rem;overflow-wrap:break-word;padding:0 0.25rem}.profile-menu.profile-menu-blue .user .avatar,.profile-menu.profile-menu-blue .user .initials{background-color:#b7b9c3;color:var(--modus-navbar-blue-profile-icon-initials-color, #0e416c)}.profile-menu .links{font-size:0.875rem;margin-bottom:0.75rem;max-width:19rem;user-select:none;width:100%}.profile-menu .links .link{cursor:pointer;overflow:hidden;padding:0.625rem 1.25rem;text-overflow:ellipsis;white-space:nowrap}@media (hover: hover){.profile-menu .links .link:hover{background-color:var(--modus-navbar-icon-hover-bg, #e0e1e9)}}.profile-menu .links .link:active{background-color:var(--modus-navbar-icon-active-bg, #cbcdd6)}.profile-menu .sign-out{background-color:var(--modus-navbar-profile-menu-sign-out-background-color, #f1f1f6);user-select:none;width:100%}.profile-menu .sign-out div{color:var(--modus-blue, #0063a3);cursor:pointer;font-size:0.875rem;padding:0.625rem 1.25rem}@media (hover: hover){.profile-menu .sign-out div:hover{text-decoration:underline}}.profile-menu.reverse{left:0}";

const ModusNavbarProfileMenu = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.linkClick = createEvent(this, "linkClick", 7);
    this.signOutClick = createEvent(this, "signOutClick", 7);
    this.avatarUrl = undefined;
    this.email = undefined;
    this.initials = undefined;
    this.links = undefined;
    this.reverse = undefined;
    this.username = undefined;
    this.variant = 'default';
  }
  render() {
    var _a;
    const direction = this.reverse ? 'reverse' : '';
    const variant = this.variant === 'default' ? '' : `profile-menu-${this.variant}`;
    return (h("div", { class: `profile-menu ${direction} ${variant}`, onClick: (event) => event.preventDefault() }, h("div", { class: "user" }, this.avatarUrl ? (h("img", { class: "avatar", src: this.avatarUrl, alt: "Avatar" })) : (h("span", { class: "initials" }, this.initials)), h("div", null, h("div", { class: "username" }, this.username), h("div", { class: "email" }, this.email))), ((_a = this.links) === null || _a === void 0 ? void 0 : _a.length) ? (h("div", { class: "links" }, this.links.map((link) => {
      return (h("div", { class: "link", onClick: () => this.linkClick.emit(link.id) }, link.display));
    }))) : null, h("div", { class: "sign-out", onClick: () => this.signOutClick.emit() }, h("div", null, "Sign out"))));
  }
};
ModusNavbarProfileMenu.style = modusNavbarProfileMenuCss;

const modusNavbarSearchOverlayCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{display:block}.overlay-wrapper{display:flex;flex-shrink:0;gap:45px}.overlay-wrapper .search-box{display:flex;flex-grow:2;justify-content:center}.overlay-wrapper .search-box modus-text-input{display:block;margin-left:1rem;max-width:764px;min-width:185px;width:100%}.overlay-wrapper .navbar-button{justify-content:end;padding-right:1rem}@media screen and (width <= 576px){.overlay-wrapper .navbar-button{padding-right:0.5rem}}";

const ModusNavbarSearchOverlay = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.close = createEvent(this, "close", 7);
    this.search = createEvent(this, "search", 7);
  }
  componentDidRender() {
    var _a;
    (_a = this.modusTextInput) === null || _a === void 0 ? void 0 : _a.focusInput();
  }
  render() {
    return (h(Host, null, h("div", { class: "overlay-wrapper" }, h("div", { class: "search-box" }, h("modus-text-input", { placeholder: "Search", size: "large", onValueChange: (event) => this.search.emit(event.detail), "include-search-icon": true, ref: (el) => (this.modusTextInput = el) })), h("div", { class: "navbar-button", "data-test-id": "close-button" }, h("span", { class: "navbar-button-icon", tabIndex: 0, onKeyDown: (event) => event.code === 'Enter' && this.close.emit(), onClick: () => this.close.emit() }, h(IconClose, { size: "24" }))))));
  }
  get element() { return getElement(this); }
};
ModusNavbarSearchOverlay.style = modusNavbarSearchOverlayCss;

export { ModusNavbarAppsMenu as modus_navbar_apps_menu, ModusNavbarButtonMenu as modus_navbar_button_menu, ModusNavbarMainMenu as modus_navbar_main_menu, ModusNavbarNotificationsMenu as modus_navbar_notifications_menu, ModusNavbarProfileMenu as modus_navbar_profile_menu, ModusNavbarSearchOverlay as modus_navbar_search_overlay };
