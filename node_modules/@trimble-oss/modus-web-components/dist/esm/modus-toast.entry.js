import { r as registerInstance, c as createEvent, h } from './index-3e825a40.js';
import { I as IconWarning, b as IconInfo, a as IconCheckCircle, c as IconError } from './icon-info-7b42dead.js';
import { I as IconHelp } from './icon-help-20569b49.js';
import { I as IconClose } from './icon-close-63df3f68.js';

const modusToastCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-toast{align-items:center;background-color:var(--modus-toast-bg, #fff);border:0.0625rem solid var(--modus-toast-border-color, #252a2e4d);border-radius:0.125rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:var(--modus-toast-color, #252a2e);display:flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;height:2.6875rem;padding:0 1rem}.modus-toast .icon{align-items:center;display:flex;justify-content:center;min-width:1.125rem}.modus-toast .text{margin:0 0.5rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.modus-toast .close{margin-left:auto}.modus-toast .close:hover svg{cursor:pointer}.modus-toast .close:hover svg path{opacity:0.5}.modus-toast.primary{background-color:var(--modus-toast-primary-bg, #dcedf9);border-color:var(--modus-toast-primary-border-color, #0063a3);color:var(--modus-toast-primary-color, #0063a3)}.modus-toast.primary .close svg path{fill:var(--modus-toast-primary-close-btn-color, #0e416c)}.modus-toast.primary svg:not(.icon-close) path{fill:var(--modus-toast-primary-border-color, #0063a3)}.modus-toast.secondary{background-color:var(--modus-toast-secondary-bg, #cbcdd6);border-color:var(--modus-toast-secondary-border-color, #252a2e);color:var(--modus-toast-secondary-color, var(--modus-toast-color, #252a2e))}.modus-toast.secondary .close svg path{fill:var(--modus-toast-secondary-close-btn-color, var(--modus-toast-close-btn-color, #252a2e))}.modus-toast.secondary svg:not(.icon-close) path{fill:var(--modus-toast-secondary-border-color, #252a2e)}.modus-toast.dark{background-color:var(--modus-toast-dark-bg, #252a2e);border-color:var(--modus-toast-dark-border-color, #252a2e);color:var(--modus-toast-dark-color, #fff)}.modus-toast.dark .close svg path{fill:var(--modus-toast-dark-close-btn-color, #fff)}.modus-toast.dark svg:not(.icon-close) path{fill:var(--modus-toast-dark-color, #fff)}.modus-toast.success{background-color:var(--modus-toast-success-bg, #e0eccf);border-color:var(--modus-toast-success-border-color, #4a821f);color:var(--modus-toast-success-color, var(--modus-toast-color, #252a2e))}.modus-toast.success .close svg path{fill:var(--modus-toast-success-close-btn-color, var(--modus-toast-close-btn-color, #252a2e))}.modus-toast.success svg:not(.icon-close) path{fill:var(--modus-toast-success-border-color, #4a821f)}.modus-toast.danger{background-color:var(--modus-toast-danger-bg, #fbd4d7);border-color:var(--modus-toast-danger-border-color, #ab1f26);color:var(--modus-toast-danger-color, var(--modus-toast-color, #252a2e))}.modus-toast.danger .close svg path{fill:var(--modus-toast-danger-close-btn-color, var(--modus-toast-close-btn-color, #252a2e))}.modus-toast.danger svg:not(.icon-close) path{fill:var(--modus-toast-danger-border-color, #ab1f26)}.modus-toast.warning{background-color:var(--modus-toast-warning-bg, #fff2cc);border-color:var(--modus-toast-warning-border-color, #e49325);color:var(--modus-toast-warning-color, var(--modus-toast-color, #252a2e))}.modus-toast.warning .close svg path{fill:var(--modus-toast-warning-close-btn-color, var(--modus-toast-close-btn-color, #252a2e))}.modus-toast.warning svg:not(.icon-close) path{fill:var(--modus-toast-warning-border-color, #e49325)}";

const ModusToast = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.dismissClick = createEvent(this, "dismissClick", 7);
    this.iconByType = new Map([
      ['danger', h(IconWarning, { color: '#C81922', size: '18' })],
      ['dark', h(IconInfo, { color: 'white', size: '18' })],
      ['default', h(IconInfo, { size: '18' })],
      ['primary', h(IconInfo, { color: '#0D6AA8', size: '18' })],
      ['secondary', h(IconHelp, { size: '18' })],
      ['success', h(IconCheckCircle, { color: '#5E9331', size: '18' })],
      ['tertiary', h(IconInfo, { size: '18' })],
      ['warning', h(IconError, { color: '#FFBE00', size: '18' })],
    ]);
    this.classByType = new Map([
      ['danger', 'danger'],
      ['dark', 'dark'],
      ['default', 'default'],
      ['primary', 'primary'],
      ['secondary', 'secondary'],
      ['success', 'success'],
      ['tertiary', 'tertiary'],
      ['warning', 'warning'],
    ]);
    this.ariaLabel = undefined;
    this.dismissible = undefined;
    this.showIcon = true;
    this.type = 'default';
  }
  render() {
    const icon = this.iconByType.get(this.type);
    const className = `modus-toast ${this.classByType.get(this.type)}`;
    return (h("div", { "aria-label": this.ariaLabel, class: className, role: "status" }, this.showIcon && h("div", { class: "icon" }, icon), h("span", { class: 'text' }, h("slot", null)), h("span", { class: 'close' }, this.dismissible && h(IconClose, { size: '18', onClick: () => this.dismissClick.emit() }))));
  }
};
ModusToast.style = modusToastCss;

export { ModusToast as modus_toast };
