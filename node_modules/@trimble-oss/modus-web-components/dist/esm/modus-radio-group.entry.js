import { h, r as registerInstance, c as createEvent } from './index-3e825a40.js';

// eslint-disable-next-line
const ModusRadioButton = (props) => (h("div", { class: `modus-radio-button ${props.disabled ? 'disabled' : ''}`, onClick: () => props.handleButtonClick(props.id), onKeyDown: (event) => props.handleKeydown(event, props.id), tabIndex: 0 },
  h("div", { class: "radio" },
    h("input", { checked: props.checked, disabled: props.disabled, name: props.name, type: "radio" }),
    h("span", { class: "checkmark" }),
    h("label", null, props.label))));

const modusRadioGroupCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");div.modus-radio-group{display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";margin:0;padding:0;position:relative}.modus-radio-button{display:inline-block}.modus-radio-button .radio{align-items:center;display:inline-flex;height:2rem}.modus-radio-button .radio input{display:none}.modus-radio-button .radio .checkmark{background-color:var(--modus-radio-btn-bg, #fff);border:0.125rem solid var(--modus-radio-btn-border-color, #90939f);border-radius:50%;height:0.875rem;position:absolute;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;width:0.875rem}.modus-radio-button .radio .checkmark::after{background:var(--modus-radio-btn-selected-border-color, #217cbb);border-radius:50%;content:\"\";display:none;height:0.5125rem;left:0.1875rem;position:absolute;top:0.1875rem;width:0.5125rem}.modus-radio-button .radio input:checked~.checkmark{background-color:var(--modus-radio-btn-bg, #fff);border-color:var(--modus-radio-btn-selected-border-color, #217cbb)}.modus-radio-button .radio input:checked~.checkmark::after{display:block}.modus-radio-button .radio label{color:var(--modus-radio-btn-label-color, #464b52);font-size:0.75rem;margin-left:1.625rem}.modus-radio-button:active .radio .checkmark{background-color:var(--modus-radio-btn-selected-border-color, #217cbb);border-color:var(--modus-radio-btn-selected-border-color, #217cbb)}.modus-radio-button:hover .radio .checkmark{border-color:var(--modus-radio-btn-hover-border-color, #217cbb)}.modus-radio-button.disabled{opacity:var(--modus-radio-btn-disabled-opacity, 0.3);pointer-events:none}";

const ModusRadioGroup = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.buttonClick = createEvent(this, "buttonClick", 7);
    this.ariaLabel = undefined;
    this.checkedId = undefined;
    this.name = undefined;
    this.radioButtons = [];
  }
  componentWillLoad() {
    this.radioButtons.forEach((radioButton) => {
      this.checkedId = radioButton.checked ? radioButton.id : this.checkedId;
    });
  }
  handleButtonClick(id) {
    this.setCheckedIdAndUpdateRadioButtons(id);
    this.buttonClick.emit(this.checkedId);
  }
  handleButtonKeydown(event, id) {
    if (event.code !== 'Enter') {
      return;
    }
    this.handleButtonClick(id);
  }
  setCheckedIdAndUpdateRadioButtons(id) {
    this.checkedId = id;
    this.radioButtons.forEach((radioButton) => {
      radioButton.checked = radioButton.id === this.checkedId;
    });
  }
  render() {
    return (h("div", { class: "modus-radio-group", "aria-label": this.ariaLabel }, this.radioButtons.map((radioButton) => {
      return (h(ModusRadioButton, { checked: radioButton.checked, disabled: radioButton.disabled, label: radioButton.label, name: this.name, id: radioButton.id, handleButtonClick: (id) => this.handleButtonClick(id), handleKeydown: (event, id) => this.handleButtonKeydown(event, id) }));
    })));
  }
  static get watchers() { return {
    "checkedId": ["setCheckedIdAndUpdateRadioButtons"]
  }; }
};
ModusRadioGroup.style = modusRadioGroupCss;

export { ModusRadioGroup as modus_radio_group };
